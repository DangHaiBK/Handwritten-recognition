
Handwritten.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0009a318  0800eb60  0800eb60  0001eb60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a8e78  080a8e78  000c0944  2**0
                  CONTENTS
  4 .ARM          00000008  080a8e78  080a8e78  000b8e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a8e80  080a8e80  000c0944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a8e80  080a8e80  000b8e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080a8e84  080a8e84  000b8e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000944  20000000  080a8e88  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b40  20000960  080a97cc  000c0960  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200024a0  080a97cc  000c24a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000c0944  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033e1c  00000000  00000000  000c0974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007e47  00000000  00000000  000f4790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  000fc5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002468  00000000  00000000  000fdfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003120a  00000000  00000000  00100408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032f9f  00000000  00000000  00131612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001093ca  00000000  00000000  001645b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026d97b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e38  00000000  00000000  0026d9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001a9e4  00000000  00000000  00273804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  0028e1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  0028e29c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000960 	.word	0x20000960
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb38 	.word	0x0800eb38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000964 	.word	0x20000964
 80001cc:	0800eb38 	.word	0x0800eb38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b9c6 	b.w	8001168 <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f858 	bl	8000e98 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_f2lz>:
 8000df4:	ee07 0a90 	vmov	s15, r0
 8000df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	d401      	bmi.n	8000e06 <__aeabi_f2lz+0x12>
 8000e02:	f000 b80b 	b.w	8000e1c <__aeabi_f2ulz>
 8000e06:	eef1 7a67 	vneg.f32	s15, s15
 8000e0a:	b508      	push	{r3, lr}
 8000e0c:	ee17 0a90 	vmov	r0, s15
 8000e10:	f000 f804 	bl	8000e1c <__aeabi_f2ulz>
 8000e14:	4240      	negs	r0, r0
 8000e16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <__aeabi_f2ulz>:
 8000e1c:	b5d0      	push	{r4, r6, r7, lr}
 8000e1e:	f7ff fb93 	bl	8000548 <__aeabi_f2d>
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__aeabi_f2ulz+0x38>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	4606      	mov	r6, r0
 8000e28:	460f      	mov	r7, r1
 8000e2a:	f7ff fbe5 	bl	80005f8 <__aeabi_dmul>
 8000e2e:	f000 f99d 	bl	800116c <__aeabi_d2uiz>
 8000e32:	4604      	mov	r4, r0
 8000e34:	f7ff fb66 	bl	8000504 <__aeabi_ui2d>
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <__aeabi_f2ulz+0x3c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f7ff fbdc 	bl	80005f8 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4630      	mov	r0, r6
 8000e46:	4639      	mov	r1, r7
 8000e48:	f7ff fa1e 	bl	8000288 <__aeabi_dsub>
 8000e4c:	f000 f98e 	bl	800116c <__aeabi_d2uiz>
 8000e50:	4621      	mov	r1, r4
 8000e52:	bdd0      	pop	{r4, r6, r7, pc}
 8000e54:	3df00000 	.word	0x3df00000
 8000e58:	41f00000 	.word	0x41f00000

08000e5c <__aeabi_d2ulz>:
 8000e5c:	b5d0      	push	{r4, r6, r7, lr}
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__aeabi_d2ulz+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	4606      	mov	r6, r0
 8000e64:	460f      	mov	r7, r1
 8000e66:	f7ff fbc7 	bl	80005f8 <__aeabi_dmul>
 8000e6a:	f000 f97f 	bl	800116c <__aeabi_d2uiz>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	f7ff fb48 	bl	8000504 <__aeabi_ui2d>
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <__aeabi_d2ulz+0x38>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f7ff fbbe 	bl	80005f8 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4630      	mov	r0, r6
 8000e82:	4639      	mov	r1, r7
 8000e84:	f7ff fa00 	bl	8000288 <__aeabi_dsub>
 8000e88:	f000 f970 	bl	800116c <__aeabi_d2uiz>
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e90:	3df00000 	.word	0x3df00000
 8000e94:	41f00000 	.word	0x41f00000

08000e98 <__udivmoddi4>:
 8000e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e9c:	9d08      	ldr	r5, [sp, #32]
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	468e      	mov	lr, r1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d14d      	bne.n	8000f42 <__udivmoddi4+0xaa>
 8000ea6:	428a      	cmp	r2, r1
 8000ea8:	4694      	mov	ip, r2
 8000eaa:	d969      	bls.n	8000f80 <__udivmoddi4+0xe8>
 8000eac:	fab2 f282 	clz	r2, r2
 8000eb0:	b152      	cbz	r2, 8000ec8 <__udivmoddi4+0x30>
 8000eb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000eb6:	f1c2 0120 	rsb	r1, r2, #32
 8000eba:	fa20 f101 	lsr.w	r1, r0, r1
 8000ebe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ec6:	4094      	lsls	r4, r2
 8000ec8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ecc:	0c21      	lsrs	r1, r4, #16
 8000ece:	fbbe f6f8 	udiv	r6, lr, r8
 8000ed2:	fa1f f78c 	uxth.w	r7, ip
 8000ed6:	fb08 e316 	mls	r3, r8, r6, lr
 8000eda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ede:	fb06 f107 	mul.w	r1, r6, r7
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d90a      	bls.n	8000efc <__udivmoddi4+0x64>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000eee:	f080 811f 	bcs.w	8001130 <__udivmoddi4+0x298>
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	f240 811c 	bls.w	8001130 <__udivmoddi4+0x298>
 8000ef8:	3e02      	subs	r6, #2
 8000efa:	4463      	add	r3, ip
 8000efc:	1a5b      	subs	r3, r3, r1
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f04:	fb08 3310 	mls	r3, r8, r0, r3
 8000f08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f0c:	fb00 f707 	mul.w	r7, r0, r7
 8000f10:	42a7      	cmp	r7, r4
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x92>
 8000f14:	eb1c 0404 	adds.w	r4, ip, r4
 8000f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f1c:	f080 810a 	bcs.w	8001134 <__udivmoddi4+0x29c>
 8000f20:	42a7      	cmp	r7, r4
 8000f22:	f240 8107 	bls.w	8001134 <__udivmoddi4+0x29c>
 8000f26:	4464      	add	r4, ip
 8000f28:	3802      	subs	r0, #2
 8000f2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f2e:	1be4      	subs	r4, r4, r7
 8000f30:	2600      	movs	r6, #0
 8000f32:	b11d      	cbz	r5, 8000f3c <__udivmoddi4+0xa4>
 8000f34:	40d4      	lsrs	r4, r2
 8000f36:	2300      	movs	r3, #0
 8000f38:	e9c5 4300 	strd	r4, r3, [r5]
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d909      	bls.n	8000f5a <__udivmoddi4+0xc2>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	f000 80ef 	beq.w	800112a <__udivmoddi4+0x292>
 8000f4c:	2600      	movs	r6, #0
 8000f4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000f52:	4630      	mov	r0, r6
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	fab3 f683 	clz	r6, r3
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d14a      	bne.n	8000ff8 <__udivmoddi4+0x160>
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d302      	bcc.n	8000f6c <__udivmoddi4+0xd4>
 8000f66:	4282      	cmp	r2, r0
 8000f68:	f200 80f9 	bhi.w	800115e <__udivmoddi4+0x2c6>
 8000f6c:	1a84      	subs	r4, r0, r2
 8000f6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000f72:	2001      	movs	r0, #1
 8000f74:	469e      	mov	lr, r3
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d0e0      	beq.n	8000f3c <__udivmoddi4+0xa4>
 8000f7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f7e:	e7dd      	b.n	8000f3c <__udivmoddi4+0xa4>
 8000f80:	b902      	cbnz	r2, 8000f84 <__udivmoddi4+0xec>
 8000f82:	deff      	udf	#255	; 0xff
 8000f84:	fab2 f282 	clz	r2, r2
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	f040 8092 	bne.w	80010b2 <__udivmoddi4+0x21a>
 8000f8e:	eba1 010c 	sub.w	r1, r1, ip
 8000f92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f96:	fa1f fe8c 	uxth.w	lr, ip
 8000f9a:	2601      	movs	r6, #1
 8000f9c:	0c20      	lsrs	r0, r4, #16
 8000f9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fa2:	fb07 1113 	mls	r1, r7, r3, r1
 8000fa6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000faa:	fb0e f003 	mul.w	r0, lr, r3
 8000fae:	4288      	cmp	r0, r1
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x12c>
 8000fb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fba:	d202      	bcs.n	8000fc2 <__udivmoddi4+0x12a>
 8000fbc:	4288      	cmp	r0, r1
 8000fbe:	f200 80cb 	bhi.w	8001158 <__udivmoddi4+0x2c0>
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	1a09      	subs	r1, r1, r0
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000fd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x156>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fe4:	d202      	bcs.n	8000fec <__udivmoddi4+0x154>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	f200 80bb 	bhi.w	8001162 <__udivmoddi4+0x2ca>
 8000fec:	4608      	mov	r0, r1
 8000fee:	eba4 040e 	sub.w	r4, r4, lr
 8000ff2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ff6:	e79c      	b.n	8000f32 <__udivmoddi4+0x9a>
 8000ff8:	f1c6 0720 	rsb	r7, r6, #32
 8000ffc:	40b3      	lsls	r3, r6
 8000ffe:	fa22 fc07 	lsr.w	ip, r2, r7
 8001002:	ea4c 0c03 	orr.w	ip, ip, r3
 8001006:	fa20 f407 	lsr.w	r4, r0, r7
 800100a:	fa01 f306 	lsl.w	r3, r1, r6
 800100e:	431c      	orrs	r4, r3
 8001010:	40f9      	lsrs	r1, r7
 8001012:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001016:	fa00 f306 	lsl.w	r3, r0, r6
 800101a:	fbb1 f8f9 	udiv	r8, r1, r9
 800101e:	0c20      	lsrs	r0, r4, #16
 8001020:	fa1f fe8c 	uxth.w	lr, ip
 8001024:	fb09 1118 	mls	r1, r9, r8, r1
 8001028:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800102c:	fb08 f00e 	mul.w	r0, r8, lr
 8001030:	4288      	cmp	r0, r1
 8001032:	fa02 f206 	lsl.w	r2, r2, r6
 8001036:	d90b      	bls.n	8001050 <__udivmoddi4+0x1b8>
 8001038:	eb1c 0101 	adds.w	r1, ip, r1
 800103c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001040:	f080 8088 	bcs.w	8001154 <__udivmoddi4+0x2bc>
 8001044:	4288      	cmp	r0, r1
 8001046:	f240 8085 	bls.w	8001154 <__udivmoddi4+0x2bc>
 800104a:	f1a8 0802 	sub.w	r8, r8, #2
 800104e:	4461      	add	r1, ip
 8001050:	1a09      	subs	r1, r1, r0
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb1 f0f9 	udiv	r0, r1, r9
 8001058:	fb09 1110 	mls	r1, r9, r0, r1
 800105c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001060:	fb00 fe0e 	mul.w	lr, r0, lr
 8001064:	458e      	cmp	lr, r1
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x1e2>
 8001068:	eb1c 0101 	adds.w	r1, ip, r1
 800106c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001070:	d26c      	bcs.n	800114c <__udivmoddi4+0x2b4>
 8001072:	458e      	cmp	lr, r1
 8001074:	d96a      	bls.n	800114c <__udivmoddi4+0x2b4>
 8001076:	3802      	subs	r0, #2
 8001078:	4461      	add	r1, ip
 800107a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800107e:	fba0 9402 	umull	r9, r4, r0, r2
 8001082:	eba1 010e 	sub.w	r1, r1, lr
 8001086:	42a1      	cmp	r1, r4
 8001088:	46c8      	mov	r8, r9
 800108a:	46a6      	mov	lr, r4
 800108c:	d356      	bcc.n	800113c <__udivmoddi4+0x2a4>
 800108e:	d053      	beq.n	8001138 <__udivmoddi4+0x2a0>
 8001090:	b15d      	cbz	r5, 80010aa <__udivmoddi4+0x212>
 8001092:	ebb3 0208 	subs.w	r2, r3, r8
 8001096:	eb61 010e 	sbc.w	r1, r1, lr
 800109a:	fa01 f707 	lsl.w	r7, r1, r7
 800109e:	fa22 f306 	lsr.w	r3, r2, r6
 80010a2:	40f1      	lsrs	r1, r6
 80010a4:	431f      	orrs	r7, r3
 80010a6:	e9c5 7100 	strd	r7, r1, [r5]
 80010aa:	2600      	movs	r6, #0
 80010ac:	4631      	mov	r1, r6
 80010ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b2:	f1c2 0320 	rsb	r3, r2, #32
 80010b6:	40d8      	lsrs	r0, r3
 80010b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010bc:	fa21 f303 	lsr.w	r3, r1, r3
 80010c0:	4091      	lsls	r1, r2
 80010c2:	4301      	orrs	r1, r0
 80010c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010c8:	fa1f fe8c 	uxth.w	lr, ip
 80010cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80010d0:	fb07 3610 	mls	r6, r7, r0, r3
 80010d4:	0c0b      	lsrs	r3, r1, #16
 80010d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010da:	fb00 f60e 	mul.w	r6, r0, lr
 80010de:	429e      	cmp	r6, r3
 80010e0:	fa04 f402 	lsl.w	r4, r4, r2
 80010e4:	d908      	bls.n	80010f8 <__udivmoddi4+0x260>
 80010e6:	eb1c 0303 	adds.w	r3, ip, r3
 80010ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80010ee:	d22f      	bcs.n	8001150 <__udivmoddi4+0x2b8>
 80010f0:	429e      	cmp	r6, r3
 80010f2:	d92d      	bls.n	8001150 <__udivmoddi4+0x2b8>
 80010f4:	3802      	subs	r0, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	1b9b      	subs	r3, r3, r6
 80010fa:	b289      	uxth	r1, r1
 80010fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8001100:	fb07 3316 	mls	r3, r7, r6, r3
 8001104:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001108:	fb06 f30e 	mul.w	r3, r6, lr
 800110c:	428b      	cmp	r3, r1
 800110e:	d908      	bls.n	8001122 <__udivmoddi4+0x28a>
 8001110:	eb1c 0101 	adds.w	r1, ip, r1
 8001114:	f106 38ff 	add.w	r8, r6, #4294967295
 8001118:	d216      	bcs.n	8001148 <__udivmoddi4+0x2b0>
 800111a:	428b      	cmp	r3, r1
 800111c:	d914      	bls.n	8001148 <__udivmoddi4+0x2b0>
 800111e:	3e02      	subs	r6, #2
 8001120:	4461      	add	r1, ip
 8001122:	1ac9      	subs	r1, r1, r3
 8001124:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001128:	e738      	b.n	8000f9c <__udivmoddi4+0x104>
 800112a:	462e      	mov	r6, r5
 800112c:	4628      	mov	r0, r5
 800112e:	e705      	b.n	8000f3c <__udivmoddi4+0xa4>
 8001130:	4606      	mov	r6, r0
 8001132:	e6e3      	b.n	8000efc <__udivmoddi4+0x64>
 8001134:	4618      	mov	r0, r3
 8001136:	e6f8      	b.n	8000f2a <__udivmoddi4+0x92>
 8001138:	454b      	cmp	r3, r9
 800113a:	d2a9      	bcs.n	8001090 <__udivmoddi4+0x1f8>
 800113c:	ebb9 0802 	subs.w	r8, r9, r2
 8001140:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001144:	3801      	subs	r0, #1
 8001146:	e7a3      	b.n	8001090 <__udivmoddi4+0x1f8>
 8001148:	4646      	mov	r6, r8
 800114a:	e7ea      	b.n	8001122 <__udivmoddi4+0x28a>
 800114c:	4620      	mov	r0, r4
 800114e:	e794      	b.n	800107a <__udivmoddi4+0x1e2>
 8001150:	4640      	mov	r0, r8
 8001152:	e7d1      	b.n	80010f8 <__udivmoddi4+0x260>
 8001154:	46d0      	mov	r8, sl
 8001156:	e77b      	b.n	8001050 <__udivmoddi4+0x1b8>
 8001158:	3b02      	subs	r3, #2
 800115a:	4461      	add	r1, ip
 800115c:	e732      	b.n	8000fc4 <__udivmoddi4+0x12c>
 800115e:	4630      	mov	r0, r6
 8001160:	e709      	b.n	8000f76 <__udivmoddi4+0xde>
 8001162:	4464      	add	r4, ip
 8001164:	3802      	subs	r0, #2
 8001166:	e742      	b.n	8000fee <__udivmoddi4+0x156>

08001168 <__aeabi_idiv0>:
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_d2uiz>:
 800116c:	004a      	lsls	r2, r1, #1
 800116e:	d211      	bcs.n	8001194 <__aeabi_d2uiz+0x28>
 8001170:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001174:	d211      	bcs.n	800119a <__aeabi_d2uiz+0x2e>
 8001176:	d50d      	bpl.n	8001194 <__aeabi_d2uiz+0x28>
 8001178:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800117c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001180:	d40e      	bmi.n	80011a0 <__aeabi_d2uiz+0x34>
 8001182:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800118e:	fa23 f002 	lsr.w	r0, r3, r2
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800119e:	d102      	bne.n	80011a6 <__aeabi_d2uiz+0x3a>
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	4770      	bx	lr
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	4770      	bx	lr

080011ac <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011ac:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_CRC_Init+0x24>)
{
 80011ae:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_CRC_Init+0x28>)
 80011b2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011b4:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011b6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011ba:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011bc:	2301      	movs	r3, #1
 80011be:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011c0:	f000 fd8e 	bl	8001ce0 <HAL_CRC_Init>
 80011c4:	b118      	cbz	r0, 80011ce <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80011ca:	f000 ba66 	b.w	800169a <Error_Handler>
}
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	2000097c 	.word	0x2000097c
 80011d4:	40023000 	.word	0x40023000

080011d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80011d8:	6802      	ldr	r2, [r0, #0]
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_CRC_MspInit+0x24>)
 80011dc:	429a      	cmp	r2, r3
{
 80011de:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 80011e0:	d10a      	bne.n	80011f8 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011e2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80011e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ec:	649a      	str	r2, [r3, #72]	; 0x48
 80011ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80011f8:	b002      	add	sp, #8
 80011fa:	4770      	bx	lr
 80011fc:	40023000 	.word	0x40023000

08001200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001204:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	2214      	movs	r2, #20
 8001208:	2100      	movs	r1, #0
 800120a:	a807      	add	r0, sp, #28
 800120c:	f00a fbf4 	bl	800b9f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001210:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <MX_GPIO_Init+0x1d4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8001212:	4e71      	ldr	r6, [pc, #452]	; (80013d8 <MX_GPIO_Init+0x1d8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001214:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8001216:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80013dc <MX_GPIO_Init+0x1dc>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800121a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80013e0 <MX_GPIO_Init+0x1e0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800121e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 80013e4 <MX_GPIO_Init+0x1e4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001222:	f042 0210 	orr.w	r2, r2, #16
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c
 8001228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800122a:	f002 0210 	and.w	r2, r2, #16
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001234:	f042 0204 	orr.w	r2, r2, #4
 8001238:	64da      	str	r2, [r3, #76]	; 0x4c
 800123a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800123c:	f002 0204 	and.w	r2, r2, #4
 8001240:	9202      	str	r2, [sp, #8]
 8001242:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800124a:	64da      	str	r2, [r3, #76]	; 0x4c
 800124c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001252:	9203      	str	r2, [sp, #12]
 8001254:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001258:	f042 0201 	orr.w	r2, r2, #1
 800125c:	64da      	str	r2, [r3, #76]	; 0x4c
 800125e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001260:	f002 0201 	and.w	r2, r2, #1
 8001264:	9204      	str	r2, [sp, #16]
 8001266:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800126a:	f042 0202 	orr.w	r2, r2, #2
 800126e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001272:	f002 0202 	and.w	r2, r2, #2
 8001276:	9205      	str	r2, [sp, #20]
 8001278:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800127c:	f042 0208 	orr.w	r2, r2, #8
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800128a:	4630      	mov	r0, r6
 800128c:	2200      	movs	r2, #0
 800128e:	f240 1109 	movw	r1, #265	; 0x109
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8001294:	f000 feaa 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8001298:	4648      	mov	r0, r9
 800129a:	2200      	movs	r2, #0
 800129c:	210c      	movs	r1, #12
 800129e:	f000 fea5 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012a2:	4640      	mov	r0, r8
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012aa:	f000 fe9f 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80012ae:	4640      	mov	r0, r8
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b6:	f000 fe99 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80012ba:	4658      	mov	r0, fp
 80012bc:	2200      	movs	r2, #0
 80012be:	2180      	movs	r1, #128	; 0x80

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c0:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80012c4:	f000 fe92 	bl	8001fec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2208      	movs	r2, #8
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80012ce:	a907      	add	r1, sp, #28
 80012d0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	e9cd 2507 	strd	r2, r5, [sp, #28]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012d6:	f44f 1790 	mov.w	r7, #1179648	; 0x120000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012da:	e9cd 4a09 	strd	r4, sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80012de:	f000 fda7 	bl	8001e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	a907      	add	r1, sp, #28
 80012e8:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ea:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f000 fd9e 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80012f4:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	a907      	add	r1, sp, #28
 80012f8:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f000 fd96 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8001304:	232f      	movs	r3, #47	; 0x2f
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	a907      	add	r1, sp, #28
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001310:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f000 fd8c 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001318:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800131a:	a907      	add	r1, sp, #28
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001320:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001326:	f000 fd83 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800132a:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8001330:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8001334:	4648      	mov	r0, r9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001338:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800133a:	f000 fd79 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800133e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8001346:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800134a:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8001350:	f000 fd6e 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8001354:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	e9cd 1507 	strd	r1, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	4640      	mov	r0, r8
 800135e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f000 fd64 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8001368:	2105      	movs	r1, #5
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800136a:	e9cd 1707 	strd	r1, r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	4658      	mov	r0, fp
 8001370:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	f000 fd5c 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8001378:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	e9cd 1507 	strd	r1, r5, [sp, #28]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8001380:	4658      	mov	r0, fp
 8001382:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f000 fd52 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800138c:	2208      	movs	r2, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 800138e:	a907      	add	r1, sp, #28
 8001390:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	e9cd 2507 	strd	r2, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 800139a:	f000 fd49 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 800139e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80013a2:	a907      	add	r1, sp, #28
 80013a4:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a6:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f000 fd40 	bl	8001e30 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80013b0:	a907      	add	r1, sp, #28
 80013b2:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f000 fd38 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80013c0:	a907      	add	r1, sp, #28
 80013c2:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013c4:	e9cd a707 	strd	sl, r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f000 fd31 	bl	8001e30 <HAL_GPIO_Init>

}
 80013ce:	b00d      	add	sp, #52	; 0x34
 80013d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48000400 	.word	0x48000400
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000c00 	.word	0x48000c00

080013e8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ea:	4812      	ldr	r0, [pc, #72]	; (8001434 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_I2C1_Init+0x50>)
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_I2C1_Init+0x54>)
 80013f0:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	2201      	movs	r2, #1
 80013f8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80013fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001404:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001406:	f001 fa0d 	bl	8002824 <HAL_I2C_Init>
 800140a:	b108      	cbz	r0, 8001410 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 800140c:	f000 f945 	bl	800169a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <MX_I2C1_Init+0x4c>)
 8001412:	2100      	movs	r1, #0
 8001414:	f001 fa57 	bl	80028c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001418:	b108      	cbz	r0, 800141e <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 800141a:	f000 f93e 	bl	800169a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_I2C1_Init+0x4c>)
 8001420:	2100      	movs	r1, #0
 8001422:	f001 fa76 	bl	8002912 <HAL_I2CEx_ConfigDigitalFilter>
 8001426:	b118      	cbz	r0, 8001430 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800142c:	f000 b935 	b.w	800169a <Error_Handler>
}
 8001430:	bd08      	pop	{r3, pc}
 8001432:	bf00      	nop
 8001434:	200009a0 	.word	0x200009a0
 8001438:	40005400 	.word	0x40005400
 800143c:	10909cec 	.word	0x10909cec

08001440 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001440:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001442:	4812      	ldr	r0, [pc, #72]	; (800148c <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x10909CEC;
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_I2C2_Init+0x50>)
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_I2C2_Init+0x54>)
 8001448:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144c:	2300      	movs	r3, #0
 800144e:	2201      	movs	r2, #1
 8001450:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
 8001454:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001458:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800145e:	f001 f9e1 	bl	8002824 <HAL_I2C_Init>
 8001462:	b108      	cbz	r0, 8001468 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8001464:	f000 f919 	bl	800169a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <MX_I2C2_Init+0x4c>)
 800146a:	2100      	movs	r1, #0
 800146c:	f001 fa2b 	bl	80028c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001470:	b108      	cbz	r0, 8001476 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 8001472:	f000 f912 	bl	800169a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_I2C2_Init+0x4c>)
 8001478:	2100      	movs	r1, #0
 800147a:	f001 fa4a 	bl	8002912 <HAL_I2CEx_ConfigDigitalFilter>
 800147e:	b118      	cbz	r0, 8001488 <MX_I2C2_Init+0x48>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001484:	f000 b909 	b.w	800169a <Error_Handler>
}
 8001488:	bd08      	pop	{r3, pc}
 800148a:	bf00      	nop
 800148c:	200009f4 	.word	0x200009f4
 8001490:	40005800 	.word	0x40005800
 8001494:	10909cec 	.word	0x10909cec

08001498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001498:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	2214      	movs	r2, #20
{
 800149c:	b0ac      	sub	sp, #176	; 0xb0
 800149e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	2100      	movs	r1, #0
 80014a2:	eb0d 0002 	add.w	r0, sp, r2
 80014a6:	f00a faa7 	bl	800b9f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014aa:	2288      	movs	r2, #136	; 0x88
 80014ac:	2100      	movs	r1, #0
 80014ae:	a80a      	add	r0, sp, #40	; 0x28
 80014b0:	f00a faa2 	bl	800b9f8 <memset>
  if(i2cHandle->Instance==I2C1)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <HAL_I2C_MspInit+0xd8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d12b      	bne.n	8001514 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014bc:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014be:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c0:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c2:	f002 f869 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	b108      	cbz	r0, 80014cc <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 80014c8:	f000 f8e7 	bl	800169a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4c29      	ldr	r4, [pc, #164]	; (8001574 <HAL_I2C_MspInit+0xdc>)
 80014ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80014d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e0:	20c0      	movs	r0, #192	; 0xc0
 80014e2:	2312      	movs	r3, #18
 80014e4:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	f04f 0c01 	mov.w	ip, #1
 80014ec:	2303      	movs	r3, #3
 80014ee:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	4821      	ldr	r0, [pc, #132]	; (8001578 <HAL_I2C_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f000 fc99 	bl	8001e30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001504:	65a3      	str	r3, [r4, #88]	; 0x58
 8001506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001510:	b02c      	add	sp, #176	; 0xb0
 8001512:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_I2C_MspInit+0xe4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d1fa      	bne.n	8001510 <HAL_I2C_MspInit+0x78>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800151a:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151c:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800151e:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f002 f83a 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	b108      	cbz	r0, 800152a <HAL_I2C_MspInit+0x92>
      Error_Handler();
 8001526:	f000 f8b8 	bl	800169a <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4c12      	ldr	r4, [pc, #72]	; (8001574 <HAL_I2C_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001536:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	9303      	str	r3, [sp, #12]
 800153e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001540:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001544:	2312      	movs	r3, #18
 8001546:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2101      	movs	r1, #1
 800154c:	2303      	movs	r3, #3
 800154e:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001552:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001556:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f000 fc6a 	bl	8001e30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800155c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800155e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001562:	65a3      	str	r3, [r4, #88]	; 0x58
 8001564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	9304      	str	r3, [sp, #16]
 800156c:	9b04      	ldr	r3, [sp, #16]
}
 800156e:	e7cf      	b.n	8001510 <HAL_I2C_MspInit+0x78>
 8001570:	40005400 	.word	0x40005400
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400
 800157c:	40005800 	.word	0x40005800

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b510      	push	{r4, lr}
 8001582:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001584:	2244      	movs	r2, #68	; 0x44
 8001586:	2100      	movs	r1, #0
 8001588:	a805      	add	r0, sp, #20
 800158a:	f00a fa35 	bl	800b9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158e:	2214      	movs	r2, #20
 8001590:	2100      	movs	r1, #0
 8001592:	4668      	mov	r0, sp
 8001594:	f00a fa30 	bl	800b9f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001598:	f44f 7000 	mov.w	r0, #512	; 0x200
 800159c:	f001 f9ee 	bl	800297c <HAL_PWREx_ControlVoltageScaling>
 80015a0:	4604      	mov	r4, r0
 80015a2:	b108      	cbz	r0, 80015a8 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <SystemClock_Config+0x26>
  HAL_PWR_EnableBkUpAccess();
 80015a8:	f001 f9d8 	bl	800295c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <SystemClock_Config+0x90>)
 80015ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80015b2:	f023 0318 	bic.w	r3, r3, #24
 80015b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80015ba:	231c      	movs	r3, #28
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015bc:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80015be:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015c0:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015c2:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015c6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015ca:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ce:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015d0:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015d4:	2428      	movs	r4, #40	; 0x28
 80015d6:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015da:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015de:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e2:	f001 fb11 	bl	8002c08 <HAL_RCC_OscConfig>
 80015e6:	b108      	cbz	r0, 80015ec <SystemClock_Config+0x6c>
 80015e8:	b672      	cpsid	i
  while (1)
 80015ea:	e7fe      	b.n	80015ea <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ec:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f0:	220f      	movs	r2, #15
 80015f2:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f4:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015f6:	2104      	movs	r1, #4
 80015f8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015fe:	f001 fd83 	bl	8003108 <HAL_RCC_ClockConfig>
 8001602:	b108      	cbz	r0, 8001608 <SystemClock_Config+0x88>
 8001604:	b672      	cpsid	i
  while (1)
 8001606:	e7fe      	b.n	8001606 <SystemClock_Config+0x86>
  HAL_RCCEx_EnableMSIPLLMode();
 8001608:	f002 fba8 	bl	8003d5c <HAL_RCCEx_EnableMSIPLLMode>
}
 800160c:	b016      	add	sp, #88	; 0x58
 800160e:	bd10      	pop	{r4, pc}
 8001610:	40021000 	.word	0x40021000

08001614 <PeriphCommonClock_Config>:
{
 8001614:	b500      	push	{lr}
 8001616:	b0a3      	sub	sp, #140	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	2268      	movs	r2, #104	; 0x68
 800161a:	2100      	movs	r1, #0
 800161c:	a808      	add	r0, sp, #32
 800161e:	f00a f9eb 	bl	800b9f8 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 8001622:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001626:	9300      	str	r3, [sp, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001628:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800162c:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800162e:	2301      	movs	r3, #1
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001630:	2018      	movs	r0, #24
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001632:	e9cd 3301 	strd	r3, r3, [sp, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001636:	2307      	movs	r3, #7
 8001638:	e9cd 0303 	strd	r0, r3, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800163c:	2302      	movs	r3, #2
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800163e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001642:	4668      	mov	r0, sp
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8001644:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001648:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164a:	f001 ffa5 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	b108      	cbz	r0, 8001654 <PeriphCommonClock_Config+0x40>
 8001650:	b672      	cpsid	i
  while (1)
 8001652:	e7fe      	b.n	8001652 <PeriphCommonClock_Config+0x3e>
}
 8001654:	b023      	add	sp, #140	; 0x8c
 8001656:	f85d fb04 	ldr.w	pc, [sp], #4

0800165a <main>:
{
 800165a:	b508      	push	{r3, lr}
  HAL_Init();
 800165c:	f000 fa8c 	bl	8001b78 <HAL_Init>
  SystemClock_Config();
 8001660:	f7ff ff8e 	bl	8001580 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001664:	f7ff ffd6 	bl	8001614 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8001668:	f7ff fdca 	bl	8001200 <MX_GPIO_Init>
  MX_CRC_Init();
 800166c:	f7ff fd9e 	bl	80011ac <MX_CRC_Init>
  MX_I2C1_Init();
 8001670:	f7ff feba 	bl	80013e8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001674:	f7ff fee4 	bl	8001440 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001678:	f000 f812 	bl	80016a0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800167c:	f000 f862 	bl	8001744 <MX_SAI1_Init>
  MX_SPI2_Init();
 8001680:	f000 f912 	bl	80018a8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001684:	f000 f9c0 	bl	8001a08 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8001688:	f004 fcd8 	bl	800603c <MX_USB_HOST_Init>
  MX_X_CUBE_AI_Init();
 800168c:	f006 f802 	bl	8007694 <MX_X_CUBE_AI_Init>
    MX_USB_HOST_Process();
 8001690:	f004 fcf4 	bl	800607c <MX_USB_HOST_Process>
  MX_X_CUBE_AI_Process();
 8001694:	f006 f805 	bl	80076a2 <MX_X_CUBE_AI_Process>
  while (1)
 8001698:	e7fa      	b.n	8001690 <main+0x36>

0800169a <Error_Handler>:
 800169a:	b672      	cpsid	i
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x2>
	...

080016a0 <MX_QUADSPI_Init>:
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 1;
 80016a2:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <MX_QUADSPI_Init+0x34>)
{
 80016a4:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e9c0 2300 	strd	r2, r3, [r0]
  hqspi.Init.FifoThreshold = 4;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80016ac:	2104      	movs	r1, #4
 80016ae:	2310      	movs	r3, #16
 80016b0:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hqspi.Init.FlashSize = 24;
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016b4:	f04f 0c18 	mov.w	ip, #24
 80016b8:	2300      	movs	r3, #0
 80016ba:	e9c0 c304 	strd	ip, r3, [r0, #16]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016be:	6183      	str	r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016c0:	f001 f9c2 	bl	8002a48 <HAL_QSPI_Init>
 80016c4:	b118      	cbz	r0, 80016ce <MX_QUADSPI_Init+0x2e>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80016c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80016ca:	f7ff bfe6 	b.w	800169a <Error_Handler>
}
 80016ce:	bd08      	pop	{r3, pc}
 80016d0:	20000a48 	.word	0x20000a48
 80016d4:	a0001000 	.word	0xa0001000

080016d8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80016d8:	b510      	push	{r4, lr}
 80016da:	4604      	mov	r4, r0
 80016dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	2214      	movs	r2, #20
 80016e0:	2100      	movs	r1, #0
 80016e2:	a803      	add	r0, sp, #12
 80016e4:	f00a f988 	bl	800b9f8 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80016e8:	6822      	ldr	r2, [r4, #0]
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_QSPI_MspInit+0x64>)
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d122      	bne.n	8001736 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016f0:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 80016f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016f8:	2103      	movs	r1, #3
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001702:	651a      	str	r2, [r3, #80]	; 0x50
 8001704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001706:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800170a:	9201      	str	r2, [sp, #4]
 800170c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001710:	f042 0210 	orr.w	r2, r2, #16
 8001714:	64da      	str	r2, [r3, #76]	; 0x4c
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8001724:	2302      	movs	r3, #2
 8001726:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800172a:	230a      	movs	r3, #10
 800172c:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001730:	a903      	add	r1, sp, #12
 8001732:	f000 fb7d 	bl	8001e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001736:	b008      	add	sp, #32
 8001738:	bd10      	pop	{r4, pc}
 800173a:	bf00      	nop
 800173c:	a0001000 	.word	0xa0001000
 8001740:	48001000 	.word	0x48001000

08001744 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001744:	4825      	ldr	r0, [pc, #148]	; (80017dc <MX_SAI1_Init+0x98>)
{
 8001746:	b508      	push	{r3, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <MX_SAI1_Init+0x9c>)
 800174a:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800174c:	2240      	movs	r2, #64	; 0x40
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800174e:	2300      	movs	r3, #0
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001750:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <MX_SAI1_Init+0xa0>)
 8001756:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockA1.FrameInit.FrameLength = 8;
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001758:	f04f 0e08 	mov.w	lr, #8
 800175c:	2201      	movs	r2, #1
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800175e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001762:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001766:	e9c0 e210 	strd	lr, r2, [r0, #64]	; 0x40
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800176a:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800176e:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001772:	e9c0 3216 	strd	r3, r2, [r0, #88]	; 0x58
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001776:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001778:	6043      	str	r3, [r0, #4]
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800177a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800177c:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800177e:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001780:	60c3      	str	r3, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001782:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001784:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001786:	f002 fb11 	bl	8003dac <HAL_SAI_Init>
 800178a:	b108      	cbz	r0, 8001790 <MX_SAI1_Init+0x4c>
  {
    Error_Handler();
 800178c:	f7ff ff85 	bl	800169a <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001790:	4815      	ldr	r0, [pc, #84]	; (80017e8 <MX_SAI1_Init+0xa4>)
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_SAI1_Init+0xa8>)
 8001794:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001796:	2203      	movs	r2, #3
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001798:	2300      	movs	r3, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800179a:	6042      	str	r2, [r0, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800179c:	2240      	movs	r2, #64	; 0x40
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800179e:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80017a2:	2108      	movs	r1, #8
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80017a4:	2201      	movs	r2, #1
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80017a6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80017aa:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80017ae:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80017b2:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80017b6:	e9c0 3216 	strd	r3, r2, [r0, #88]	; 0x58
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80017ba:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80017bc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80017be:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017c0:	6103      	str	r3, [r0, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80017c2:	6183      	str	r3, [r0, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80017c4:	60c3      	str	r3, [r0, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80017c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80017c8:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80017ca:	f002 faef 	bl	8003dac <HAL_SAI_Init>
 80017ce:	b118      	cbz	r0, 80017d8 <MX_SAI1_Init+0x94>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80017d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017d4:	f7ff bf61 	b.w	800169a <Error_Handler>
}
 80017d8:	bd08      	pop	{r3, pc}
 80017da:	bf00      	nop
 80017dc:	20000a90 	.word	0x20000a90
 80017e0:	40015404 	.word	0x40015404
 80017e4:	0002ee00 	.word	0x0002ee00
 80017e8:	20000b14 	.word	0x20000b14
 80017ec:	40015424 	.word	0x40015424

080017f0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80017f2:	6802      	ldr	r2, [r0, #0]
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_SAI_MspInit+0xa4>)
 80017f6:	429a      	cmp	r2, r3
{
 80017f8:	b089      	sub	sp, #36	; 0x24
 80017fa:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 80017fc:	d127      	bne.n	800184e <HAL_SAI_MspInit+0x5e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80017fe:	4826      	ldr	r0, [pc, #152]	; (8001898 <HAL_SAI_MspInit+0xa8>)
 8001800:	6803      	ldr	r3, [r0, #0]
 8001802:	b94b      	cbnz	r3, 8001818 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_SAI_MspInit+0xac>)
 8001806:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001808:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800180c:	6611      	str	r1, [r2, #96]	; 0x60
 800180e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001810:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001814:	9201      	str	r2, [sp, #4]
 8001816:	9a01      	ldr	r2, [sp, #4]
    }
    SAI1_client ++;
 8001818:	3301      	adds	r3, #1
 800181a:	6003      	str	r3, [r0, #0]
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2702      	movs	r7, #2
 800181e:	2374      	movs	r3, #116	; 0x74
 8001820:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001824:	481e      	ldr	r0, [pc, #120]	; (80018a0 <HAL_SAI_MspInit+0xb0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800182a:	260d      	movs	r6, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001832:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001834:	f000 fafc 	bl	8001e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001838:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800183c:	4818      	ldr	r0, [pc, #96]	; (80018a0 <HAL_SAI_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800183e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001840:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800184a:	f000 faf1 	bl	8001e30 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_SAI_MspInit+0xb4>)
 8001852:	429a      	cmp	r2, r3
 8001854:	d11c      	bne.n	8001890 <HAL_SAI_MspInit+0xa0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001856:	4810      	ldr	r0, [pc, #64]	; (8001898 <HAL_SAI_MspInit+0xa8>)
 8001858:	6803      	ldr	r3, [r0, #0]
 800185a:	b94b      	cbnz	r3, 8001870 <HAL_SAI_MspInit+0x80>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_SAI_MspInit+0xac>)
 800185e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001860:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8001864:	6611      	str	r1, [r2, #96]	; 0x60
 8001866:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001868:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800186c:	9202      	str	r2, [sp, #8]
 800186e:	9a02      	ldr	r2, [sp, #8]
      }
    SAI1_client ++;
 8001870:	3301      	adds	r3, #1
 8001872:	6003      	str	r3, [r0, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <HAL_SAI_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001886:	230d      	movs	r3, #13
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001888:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800188a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800188c:	f000 fad0 	bl	8001e30 <HAL_GPIO_Init>

    }
}
 8001890:	b009      	add	sp, #36	; 0x24
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001894:	40015404 	.word	0x40015404
 8001898:	20000a8c 	.word	0x20000a8c
 800189c:	40021000 	.word	0x40021000
 80018a0:	48001000 	.word	0x48001000
 80018a4:	40015424 	.word	0x40015424

080018a8 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018a8:	4810      	ldr	r0, [pc, #64]	; (80018ec <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <MX_SPI2_Init+0x48>)
{
 80018ac:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018b2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018bc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c4:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 80018c8:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018d2:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018d8:	2308      	movs	r3, #8
 80018da:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018dc:	f002 fb3c 	bl	8003f58 <HAL_SPI_Init>
 80018e0:	b118      	cbz	r0, 80018ea <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018e6:	f7ff bed8 	b.w	800169a <Error_Handler>
}
 80018ea:	bd08      	pop	{r3, pc}
 80018ec:	20000b98 	.word	0x20000b98
 80018f0:	40003800 	.word	0x40003800

080018f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018f4:	b510      	push	{r4, lr}
 80018f6:	4604      	mov	r4, r0
 80018f8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	2214      	movs	r2, #20
 80018fc:	2100      	movs	r1, #0
 80018fe:	a803      	add	r0, sp, #12
 8001900:	f00a f87a 	bl	800b9f8 <memset>
  if(spiHandle->Instance==SPI2)
 8001904:	6822      	ldr	r2, [r4, #0]
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_SPI_MspInit+0x5c>)
 8001908:	429a      	cmp	r2, r3
 800190a:	d11f      	bne.n	800194c <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800190c:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001910:	2103      	movs	r1, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001912:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001914:	480f      	ldr	r0, [pc, #60]	; (8001954 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800191a:	659a      	str	r2, [r3, #88]	; 0x58
 800191c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800191e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001922:	9201      	str	r2, [sp, #4]
 8001924:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001928:	f042 0208 	orr.w	r2, r2, #8
 800192c:	64da      	str	r2, [r3, #76]	; 0x4c
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	221a      	movs	r2, #26
 800193a:	2302      	movs	r3, #2
 800193c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001940:	2305      	movs	r3, #5
 8001942:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001946:	a903      	add	r1, sp, #12
 8001948:	f000 fa72 	bl	8001e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800194c:	b008      	add	sp, #32
 800194e:	bd10      	pop	{r4, pc}
 8001950:	40003800 	.word	0x40003800
 8001954:	48000c00 	.word	0x48000c00

08001958 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_MspInit+0x2c>)
 800195a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	661a      	str	r2, [r3, #96]	; 0x60
 8001962:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001964:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	f002 0201 	and.w	r2, r2, #1
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001970:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001974:	659a      	str	r2, [r3, #88]	; 0x58
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001980:	b002      	add	sp, #8
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000

08001988 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler>

0800198a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler>

0800198c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <MemManage_Handler>

0800198e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler>

08001990 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler>

08001992 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 b904 	b.w	8001ba4 <HAL_IncTick>

0800199c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800199c:	4801      	ldr	r0, [pc, #4]	; (80019a4 <USART2_IRQHandler+0x8>)
 800199e:	f002 bb79 	b.w	8004094 <HAL_UART_IRQHandler>
 80019a2:	bf00      	nop
 80019a4:	20000c00 	.word	0x20000c00

080019a8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <OTG_FS_IRQHandler+0x8>)
 80019aa:	f000 bc1b 	b.w	80021e4 <HAL_HCD_IRQHandler>
 80019ae:	bf00      	nop
 80019b0:	20001064 	.word	0x20001064

080019b4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <_sbrk+0x30>)
 80019b6:	6811      	ldr	r1, [r2, #0]
{
 80019b8:	b510      	push	{r4, lr}
 80019ba:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80019bc:	b909      	cbnz	r1, 80019c2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <_sbrk+0x34>)
 80019c0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	6810      	ldr	r0, [r2, #0]
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <_sbrk+0x38>)
 80019c6:	4c0a      	ldr	r4, [pc, #40]	; (80019f0 <_sbrk+0x3c>)
 80019c8:	4403      	add	r3, r0
 80019ca:	1b09      	subs	r1, r1, r4
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d906      	bls.n	80019de <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80019d0:	f009 fdfc 	bl	800b5cc <__errno>
 80019d4:	230c      	movs	r3, #12
 80019d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80019dc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80019de:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80019e0:	e7fc      	b.n	80019dc <_sbrk+0x28>
 80019e2:	bf00      	nop
 80019e4:	20000bfc 	.word	0x20000bfc
 80019e8:	200024a0 	.word	0x200024a0
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000800 	.word	0x00000800

080019f4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <SystemInit+0x10>)
 80019f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <MX_USART2_UART_Init+0x38>)
{
 8001a0c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001a0e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a12:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a18:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a1a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a26:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a28:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a2a:	f003 f80e 	bl	8004a4a <HAL_UART_Init>
 8001a2e:	b118      	cbz	r0, 8001a38 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a34:	f7ff be31 	b.w	800169a <Error_Handler>
}
 8001a38:	bd08      	pop	{r3, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000c00 	.word	0x20000c00
 8001a40:	40004400 	.word	0x40004400

08001a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a44:	b510      	push	{r4, lr}
 8001a46:	b0aa      	sub	sp, #168	; 0xa8
 8001a48:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	2214      	movs	r2, #20
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	a803      	add	r0, sp, #12
 8001a50:	f009 ffd2 	bl	800b9f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	2288      	movs	r2, #136	; 0x88
 8001a56:	2100      	movs	r1, #0
 8001a58:	a808      	add	r0, sp, #32
 8001a5a:	f009 ffcd 	bl	800b9f8 <memset>
  if(uartHandle->Instance==USART2)
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_UART_MspInit+0x88>)
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d130      	bne.n	8001ac8 <HAL_UART_MspInit+0x84>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a66:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a68:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a6a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f001 fd94 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	b108      	cbz	r0, 8001a76 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001a72:	f7ff fe12 	bl	800169a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a78:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58
 8001a82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a84:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a8e:	f042 0208 	orr.w	r2, r2, #8
 8001a92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2260      	movs	r2, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aae:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab4:	f000 f9bc 	bl	8001e30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2026      	movs	r0, #38	; 0x26
 8001abc:	4611      	mov	r1, r2
 8001abe:	f000 f8bb 	bl	8001c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ac2:	2026      	movs	r0, #38	; 0x26
 8001ac4:	f000 f8ea 	bl	8001c9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ac8:	b02a      	add	sp, #168	; 0xa8
 8001aca:	bd10      	pop	{r4, pc}
 8001acc:	40004400 	.word	0x40004400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48000c00 	.word	0x48000c00

08001ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001adc:	f7ff ff8a 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	; (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	; (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b06:	f009 ff31 	bl	800b96c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0a:	f7ff fda6 	bl	800165a <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000944 	.word	0x20000944
  ldr r2, =_sidata
 8001b1c:	080a8e88 	.word	0x080a8e88
  ldr r2, =_sbss
 8001b20:	20000960 	.word	0x20000960
  ldr r4, =_ebss
 8001b24:	200024a0 	.word	0x200024a0

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_InitTick+0x40>)
{
 8001b30:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001b32:	7818      	ldrb	r0, [r3, #0]
 8001b34:	b908      	cbnz	r0, 8001b3a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_InitTick+0x44>)
 8001b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b40:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b44:	6810      	ldr	r0, [r2, #0]
 8001b46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b4a:	f000 f8b5 	bl	8001cb8 <HAL_SYSTICK_Config>
 8001b4e:	4604      	mov	r4, r0
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b54:	2d0f      	cmp	r5, #15
 8001b56:	d8ee      	bhi.n	8001b36 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f86a 	bl	8001c38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_InitTick+0x48>)
 8001b66:	4620      	mov	r0, r4
 8001b68:	601d      	str	r5, [r3, #0]
  return status;
 8001b6a:	e7e5      	b.n	8001b38 <HAL_InitTick+0xc>
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000008 	.word	0x20000008

08001b78 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_Init+0x28>)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001b80:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b82:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b86:	f000 f845 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff ffce 	bl	8001b2c <HAL_InitTick>
 8001b90:	4604      	mov	r4, r0
 8001b92:	b918      	cbnz	r0, 8001b9c <HAL_Init+0x24>
    HAL_MspInit();
 8001b94:	f7ff fee0 	bl	8001958 <HAL_MspInit>
}
 8001b98:	4620      	mov	r0, r4
 8001b9a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001b9c:	2401      	movs	r4, #1
 8001b9e:	e7fb      	b.n	8001b98 <HAL_Init+0x20>
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <HAL_IncTick+0x10>)
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <HAL_IncTick+0x14>)
 8001ba8:	6811      	ldr	r1, [r2, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	440b      	add	r3, r1
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000c84 	.word	0x20000c84
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bbc:	4b01      	ldr	r3, [pc, #4]	; (8001bc4 <HAL_GetTick+0x8>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000c84 	.word	0x20000c84

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fff6 	bl	8001bbc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001bd2:	bf1c      	itt	ne
 8001bd4:	4b05      	ldrne	r3, [pc, #20]	; (8001bec <HAL_Delay+0x24>)
 8001bd6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001bda:	bf18      	it	ne
 8001bdc:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	f7ff ffed 	bl	8001bbc <HAL_GetTick>
 8001be2:	1b43      	subs	r3, r0, r5
 8001be4:	42a3      	cmp	r3, r4
 8001be6:	d3fa      	bcc.n	8001bde <HAL_Delay+0x16>
  {
  }
}
 8001be8:	bd38      	pop	{r3, r4, r5, pc}
 8001bea:	bf00      	nop
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001bf0:	4800      	ldr	r0, [pc, #0]	; (8001bf4 <HAL_GetHalVersion+0x4>)
 8001bf2:	4770      	bx	lr
 8001bf4:	010d0300 	.word	0x010d0300

08001bf8 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001bf8:	4b01      	ldr	r3, [pc, #4]	; (8001c00 <HAL_GetREVID+0x8>)
 8001bfa:	6818      	ldr	r0, [r3, #0]
}
 8001bfc:	0c00      	lsrs	r0, r0, #16
 8001bfe:	4770      	bx	lr
 8001c00:	e0042000 	.word	0xe0042000

08001c04 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GetDEVID+0xc>)
 8001c06:	6818      	ldr	r0, [r3, #0]
}
 8001c08:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e0042000 	.word	0xe0042000

08001c14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c16:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c1c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c24:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c30:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3a:	b530      	push	{r4, r5, lr}
 8001c3c:	68dc      	ldr	r4, [r3, #12]
 8001c3e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c42:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	2d04      	cmp	r5, #4
 8001c4a:	bf28      	it	cs
 8001c4c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c54:	bf8c      	ite	hi
 8001c56:	3c03      	subhi	r4, #3
 8001c58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5a:	fa03 f505 	lsl.w	r5, r3, r5
 8001c5e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c62:	40a3      	lsls	r3, r4
 8001c64:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	bfac      	ite	ge
 8001c72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	4a08      	ldrlt	r2, [pc, #32]	; (8001c98 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	bfb8      	it	lt
 8001c7e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	bfaa      	itet	ge
 8001c86:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c90:	bd30      	pop	{r4, r5, pc}
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	e000ed14 	.word	0xe000ed14

08001c9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	db08      	blt.n	8001cb2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	0942      	lsrs	r2, r0, #5
 8001ca4:	f000 001f 	and.w	r0, r0, #31
 8001ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8001cac:	4b01      	ldr	r3, [pc, #4]	; (8001cb4 <HAL_NVIC_EnableIRQ+0x18>)
 8001cae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	3801      	subs	r0, #1
 8001cba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001cbe:	d20b      	bcs.n	8001cd8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	21f0      	movs	r1, #240	; 0xf0
 8001cca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cce:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001cd8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ce0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	b908      	cbnz	r0, 8001cea <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001ce8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cea:	7f43      	ldrb	r3, [r0, #29]
 8001cec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cf0:	b913      	cbnz	r3, 8001cf8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001cf2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001cf4:	f7ff fa70 	bl	80011d8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001cfc:	7923      	ldrb	r3, [r4, #4]
 8001cfe:	b9e3      	cbnz	r3, 8001d3a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_CRC_Init+0x70>)
 8001d04:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	f022 0218 	bic.w	r2, r2, #24
 8001d0c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d0e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d10:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d12:	b9d2      	cbnz	r2, 8001d4a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d18:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	6961      	ldr	r1, [r4, #20]
 8001d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69a1      	ldr	r1, [r4, #24]
 8001d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001d32:	2301      	movs	r3, #1
 8001d34:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001d36:	2000      	movs	r0, #0
 8001d38:	e7d6      	b.n	8001ce8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d3a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f000 f808 	bl	8001d54 <HAL_CRCEx_Polynomial_Set>
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d0e2      	beq.n	8001d0e <HAL_CRC_Init+0x2e>
 8001d48:	e7cd      	b.n	8001ce6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d4a:	6922      	ldr	r2, [r4, #16]
 8001d4c:	e7e4      	b.n	8001d18 <HAL_CRC_Init+0x38>
 8001d4e:	bf00      	nop
 8001d50:	04c11db7 	.word	0x04c11db7

08001d54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d54:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d56:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	d31c      	bcc.n	8001d96 <HAL_CRCEx_Polynomial_Set+0x42>
 8001d5c:	fa21 f403 	lsr.w	r4, r1, r3
 8001d60:	07e4      	lsls	r4, r4, #31
 8001d62:	d5f9      	bpl.n	8001d58 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001d64:	2a10      	cmp	r2, #16
 8001d66:	d012      	beq.n	8001d8e <HAL_CRCEx_Polynomial_Set+0x3a>
 8001d68:	d804      	bhi.n	8001d74 <HAL_CRCEx_Polynomial_Set+0x20>
 8001d6a:	b13a      	cbz	r2, 8001d7c <HAL_CRCEx_Polynomial_Set+0x28>
 8001d6c:	2a08      	cmp	r2, #8
 8001d6e:	d010      	beq.n	8001d92 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001d70:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001d72:	e00b      	b.n	8001d8c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001d74:	2a18      	cmp	r2, #24
 8001d76:	d1fb      	bne.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001d78:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001d7a:	d8f9      	bhi.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d7c:	6800      	ldr	r0, [r0, #0]
 8001d7e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d80:	6883      	ldr	r3, [r0, #8]
 8001d82:	f023 0318 	bic.w	r3, r3, #24
 8001d86:	431a      	orrs	r2, r3
 8001d88:	6082      	str	r2, [r0, #8]
 8001d8a:	2000      	movs	r0, #0
}
 8001d8c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001d8e:	2b07      	cmp	r3, #7
 8001d90:	e7f3      	b.n	8001d7a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	e7f1      	b.n	8001d7a <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	d1ea      	bne.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001d9a:	e7ef      	b.n	8001d7c <HAL_CRCEx_Polynomial_Set+0x28>

08001d9c <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d006      	beq.n	8001db2 <HAL_DMA_Abort+0x16>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da4:	2304      	movs	r3, #4
 8001da6:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da8:	2300      	movs	r3, #0
 8001daa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db2:	6803      	ldr	r3, [r0, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f022 020e 	bic.w	r2, r2, #14
 8001dba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc4:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f003 031c 	and.w	r3, r3, #28
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	604b      	str	r3, [r1, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001dda:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return status;
 8001dde:	4618      	mov	r0, r3
  }
}
 8001de0:	4770      	bx	lr

08001de2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de2:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001de8:	2a02      	cmp	r2, #2
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	2204      	movs	r2, #4
 8001dee:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001df0:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001df2:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df4:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8001df6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df8:	6811      	ldr	r1, [r2, #0]
 8001dfa:	f021 010e 	bic.w	r1, r1, #14
 8001dfe:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	f021 0101 	bic.w	r1, r1, #1
 8001e06:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e08:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	f002 021c 	and.w	r2, r2, #28
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001e18:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e1e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001e22:	b113      	cbz	r3, 8001e2a <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8001e24:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	4620      	mov	r0, r4
 8001e28:	e7e3      	b.n	8001df2 <HAL_DMA_Abort_IT+0x10>
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	e7e1      	b.n	8001df2 <HAL_DMA_Abort_IT+0x10>
	...

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e34:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001fe8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e38:	4c69      	ldr	r4, [pc, #420]	; (8001fe0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001e3a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3c:	680a      	ldr	r2, [r1, #0]
 8001e3e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001e42:	d102      	bne.n	8001e4a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001e44:	b003      	add	sp, #12
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e4a:	f04f 0e01 	mov.w	lr, #1
 8001e4e:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001e52:	ea1e 0202 	ands.w	r2, lr, r2
 8001e56:	f000 8090 	beq.w	8001f7a <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e5a:	684d      	ldr	r5, [r1, #4]
 8001e5c:	f005 0603 	and.w	r6, r5, #3
 8001e60:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e64:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e68:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e70:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e74:	f200 8083 	bhi.w	8001f7e <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001e78:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e7a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7e:	68cf      	ldr	r7, [r1, #12]
 8001e80:	fa07 f708 	lsl.w	r7, r7, r8
 8001e84:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001e88:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e8a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e90:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001e94:	409f      	lsls	r7, r3
 8001e96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001e9a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e9c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e9e:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea2:	688f      	ldr	r7, [r1, #8]
 8001ea4:	fa07 f708 	lsl.w	r7, r7, r8
 8001ea8:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001eae:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb0:	d071      	beq.n	8001f96 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001eb2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb4:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ebc:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebe:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001ec2:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec4:	d059      	beq.n	8001f7a <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001eca:	f046 0601 	orr.w	r6, r6, #1
 8001ece:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001ed2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001ed6:	f023 0703 	bic.w	r7, r3, #3
 8001eda:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ede:	f006 0601 	and.w	r6, r6, #1
 8001ee2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001ee6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ee8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eec:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001eee:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ef4:	f04f 0c0f 	mov.w	ip, #15
 8001ef8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001efc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f00:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f04:	d05f      	beq.n	8001fc6 <HAL_GPIO_Init+0x196>
 8001f06:	4e37      	ldr	r6, [pc, #220]	; (8001fe4 <HAL_GPIO_Init+0x1b4>)
 8001f08:	42b0      	cmp	r0, r6
 8001f0a:	d05e      	beq.n	8001fca <HAL_GPIO_Init+0x19a>
 8001f0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f10:	42b0      	cmp	r0, r6
 8001f12:	d05c      	beq.n	8001fce <HAL_GPIO_Init+0x19e>
 8001f14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f18:	42b0      	cmp	r0, r6
 8001f1a:	d05a      	beq.n	8001fd2 <HAL_GPIO_Init+0x1a2>
 8001f1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f20:	42b0      	cmp	r0, r6
 8001f22:	d058      	beq.n	8001fd6 <HAL_GPIO_Init+0x1a6>
 8001f24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f28:	42b0      	cmp	r0, r6
 8001f2a:	d056      	beq.n	8001fda <HAL_GPIO_Init+0x1aa>
 8001f2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f30:	42b0      	cmp	r0, r6
 8001f32:	bf0c      	ite	eq
 8001f34:	2606      	moveq	r6, #6
 8001f36:	2607      	movne	r6, #7
 8001f38:	fa06 f60e 	lsl.w	r6, r6, lr
 8001f3c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f40:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001f42:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001f44:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f46:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001f4a:	bf0c      	ite	eq
 8001f4c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001f4e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001f50:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001f52:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f54:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001f58:	bf0c      	ite	eq
 8001f5a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001f5c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001f5e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001f60:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f62:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001f66:	bf0c      	ite	eq
 8001f68:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001f6a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001f6c:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001f6e:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f70:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001f72:	bf54      	ite	pl
 8001f74:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001f76:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001f78:	6026      	str	r6, [r4, #0]
    position++;
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	e75e      	b.n	8001e3c <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f7e:	2e03      	cmp	r6, #3
 8001f80:	d18c      	bne.n	8001e9c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001f82:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f84:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f88:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001f8c:	409f      	lsls	r7, r3
 8001f8e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001f92:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	e78d      	b.n	8001eb2 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001f96:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001f9a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f9e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001fa2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001faa:	f04f 0e0f 	mov.w	lr, #15
 8001fae:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001fb2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb6:	690f      	ldr	r7, [r1, #16]
 8001fb8:	fa07 f70b 	lsl.w	r7, r7, fp
 8001fbc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001fc0:	f8ca 7020 	str.w	r7, [sl, #32]
 8001fc4:	e775      	b.n	8001eb2 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	e7b6      	b.n	8001f38 <HAL_GPIO_Init+0x108>
 8001fca:	2601      	movs	r6, #1
 8001fcc:	e7b4      	b.n	8001f38 <HAL_GPIO_Init+0x108>
 8001fce:	2602      	movs	r6, #2
 8001fd0:	e7b2      	b.n	8001f38 <HAL_GPIO_Init+0x108>
 8001fd2:	2603      	movs	r6, #3
 8001fd4:	e7b0      	b.n	8001f38 <HAL_GPIO_Init+0x108>
 8001fd6:	2604      	movs	r6, #4
 8001fd8:	e7ae      	b.n	8001f38 <HAL_GPIO_Init+0x108>
 8001fda:	2605      	movs	r6, #5
 8001fdc:	e7ac      	b.n	8001f38 <HAL_GPIO_Init+0x108>
 8001fde:	bf00      	nop
 8001fe0:	40010400 	.word	0x40010400
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	b10a      	cbz	r2, 8001ff2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fee:	6181      	str	r1, [r0, #24]
 8001ff0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ffe:	f895 42f8 	ldrb.w	r4, [r5, #760]	; 0x2f8
{
 8002002:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
 8002006:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 800200a:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800200e:	2c01      	cmp	r4, #1
 8002010:	d025      	beq.n	800205e <HAL_HCD_HC_Init+0x68>
 8002012:	2401      	movs	r4, #1
 8002014:	f885 42f8 	strb.w	r4, [r5, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002018:	242c      	movs	r4, #44	; 0x2c
 800201a:	fb04 5401 	mla	r4, r4, r1, r5
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 800201e:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8002020:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002022:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8002026:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800202a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800202e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002032:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002036:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 800203a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800203e:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8002042:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8002046:	6828      	ldr	r0, [r5, #0]
 8002048:	f8cd e000 	str.w	lr, [sp]
 800204c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8002050:	f002 ff60 	bl	8004f14 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002054:	f885 72f8 	strb.w	r7, [r5, #760]	; 0x2f8

  return status;
}
 8002058:	b005      	add	sp, #20
 800205a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 800205e:	2002      	movs	r0, #2
 8002060:	e7fa      	b.n	8002058 <HAL_HCD_HC_Init+0x62>

08002062 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002062:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8002064:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002068:	2b01      	cmp	r3, #1
{
 800206a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800206c:	d009      	beq.n	8002082 <HAL_HCD_HC_Halt+0x20>
 800206e:	2301      	movs	r3, #1
 8002070:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002074:	6800      	ldr	r0, [r0, #0]
 8002076:	f003 f84a 	bl	800510e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800207a:	2000      	movs	r0, #0
 800207c:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 8002080:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002082:	2002      	movs	r0, #2
 8002084:	e7fc      	b.n	8002080 <HAL_HCD_HC_Halt+0x1e>

08002086 <HAL_HCD_Init>:
{
 8002086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 800208a:	4606      	mov	r6, r0
{
 800208c:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 800208e:	2800      	cmp	r0, #0
 8002090:	d043      	beq.n	800211a <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002092:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 8002096:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002098:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800209c:	b91b      	cbnz	r3, 80020a6 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 800209e:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 80020a2:	f003 fff1 	bl	8006088 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80020a6:	2303      	movs	r3, #3
 80020a8:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 80020ae:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020b0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 80020b4:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 80020b8:	bf08      	it	eq
 80020ba:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 80020bc:	f002 fdbe 	bl	8004c3c <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c2:	466d      	mov	r5, sp
 80020c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d2:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020d6:	4637      	mov	r7, r6
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020d8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80020dc:	6830      	ldr	r0, [r6, #0]
 80020de:	f002 fd6d 	bl	8004bbc <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020e2:	f857 0b10 	ldr.w	r0, [r7], #16
 80020e6:	2101      	movs	r1, #1
 80020e8:	f002 fdae 	bl	8004c48 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80020ee:	46ec      	mov	ip, sp
 80020f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80020f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002102:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002106:	6830      	ldr	r0, [r6, #0]
 8002108:	f002 fe50 	bl	8004dac <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800210c:	2301      	movs	r3, #1
 800210e:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  return HAL_OK;
 8002112:	2000      	movs	r0, #0
}
 8002114:	b00a      	add	sp, #40	; 0x28
 8002116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800211a:	2001      	movs	r0, #1
 800211c:	e7fa      	b.n	8002114 <HAL_HCD_Init+0x8e>
	...

08002120 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002120:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8002122:	262c      	movs	r6, #44	; 0x2c
 8002124:	fb06 0601 	mla	r6, r6, r1, r0
{
 8002128:	f89d 7010 	ldrb.w	r7, [sp, #16]
 800212c:	9d05      	ldr	r5, [sp, #20]
 800212e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8002132:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002136:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800213a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
 800213e:	b97f      	cbnz	r7, 8002160 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002140:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002142:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002144:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002148:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
  switch (ep_type)
 800214c:	d03b      	beq.n	80021c6 <HAL_HCD_HC_SubmitRequest+0xa6>
 800214e:	42bb      	cmp	r3, r7
 8002150:	d039      	beq.n	80021c6 <HAL_HCD_HC_SubmitRequest+0xa6>
 8002152:	2b01      	cmp	r3, #1
 8002154:	d11f      	bne.n	8002196 <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002156:	232c      	movs	r3, #44	; 0x2c
 8002158:	fb03 0301 	mla	r3, r3, r1, r0
 800215c:	2200      	movs	r2, #0
 800215e:	e02f      	b.n	80021c0 <HAL_HCD_HC_SubmitRequest+0xa0>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002160:	f04f 0c02 	mov.w	ip, #2
 8002164:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
 8002168:	2b03      	cmp	r3, #3
 800216a:	d814      	bhi.n	8002196 <HAL_HCD_HC_SubmitRequest+0x76>
 800216c:	a601      	add	r6, pc, #4	; (adr r6, 8002174 <HAL_HCD_HC_SubmitRequest+0x54>)
 800216e:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002185 	.word	0x08002185
 8002178:	08002157 	.word	0x08002157
 800217c:	080021c7 	.word	0x080021c7
 8002180:	080021c7 	.word	0x080021c7
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002184:	2f01      	cmp	r7, #1
 8002186:	d106      	bne.n	8002196 <HAL_HCD_HC_SubmitRequest+0x76>
 8002188:	b92a      	cbnz	r2, 8002196 <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
 800218a:	232c      	movs	r3, #44	; 0x2c
          hhcd->hc[ch_num].toggle_out = 1U;
 800218c:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
 8002190:	b994      	cbnz	r4, 80021b8 <HAL_HCD_HC_SubmitRequest+0x98>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002192:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002196:	222c      	movs	r2, #44	; 0x2c
 8002198:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 800219c:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
 800219e:	2400      	movs	r4, #0
  hhcd->hc[ch_num].ch_num = ch_num;
 80021a0:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021a4:	f8a3 4060 	strh.w	r4, [r3, #96]	; 0x60
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80021a8:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021aa:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
 80021ac:	651c      	str	r4, [r3, #80]	; 0x50
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80021ae:	6800      	ldr	r0, [r0, #0]
}
 80021b0:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80021b2:	3138      	adds	r1, #56	; 0x38
 80021b4:	f002 bf2a 	b.w	800500c <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021b8:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 80021bc:	2e00      	cmp	r6, #0
 80021be:	d1ea      	bne.n	8002196 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 80021c4:	e7e7      	b.n	8002196 <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
 80021c6:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021c8:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80021cc:	b92a      	cbnz	r2, 80021da <HAL_HCD_HC_SubmitRequest+0xba>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021ce:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 80021d2:	2e00      	cmp	r6, #0
 80021d4:	d0f4      	beq.n	80021c0 <HAL_HCD_HC_SubmitRequest+0xa0>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021d6:	2202      	movs	r2, #2
 80021d8:	e7f2      	b.n	80021c0 <HAL_HCD_HC_SubmitRequest+0xa0>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021da:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_HCD_HC_SubmitRequest+0xb6>
 80021e2:	e7ed      	b.n	80021c0 <HAL_HCD_HC_SubmitRequest+0xa0>

080021e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021e8:	6806      	ldr	r6, [r0, #0]
{
 80021ea:	b085      	sub	sp, #20
 80021ec:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021ee:	4630      	mov	r0, r6
 80021f0:	f002 fdd7 	bl	8004da2 <USB_GetMode>
 80021f4:	2801      	cmp	r0, #1
 80021f6:	f040 80f7 	bne.w	80023e8 <HAL_HCD_IRQHandler+0x204>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	f002 fdcd 	bl	8004d9a <USB_ReadInterrupts>
 8002200:	2800      	cmp	r0, #0
 8002202:	f000 80f1 	beq.w	80023e8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002206:	6820      	ldr	r0, [r4, #0]
 8002208:	f002 fdc7 	bl	8004d9a <USB_ReadInterrupts>
 800220c:	0283      	lsls	r3, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800220e:	bf48      	it	mi
 8002210:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002212:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002214:	bf44      	itt	mi
 8002216:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 800221a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800221c:	f002 fdbd 	bl	8004d9a <USB_ReadInterrupts>
 8002220:	02c7      	lsls	r7, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002222:	bf48      	it	mi
 8002224:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002226:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002228:	bf44      	itt	mi
 800222a:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800222e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002230:	f002 fdb3 	bl	8004d9a <USB_ReadInterrupts>
 8002234:	0145      	lsls	r5, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002236:	bf48      	it	mi
 8002238:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800223a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800223c:	bf44      	itt	mi
 800223e:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8002242:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002244:	f002 fda9 	bl	8004d9a <USB_ReadInterrupts>
 8002248:	0780      	lsls	r0, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800224a:	bf48      	it	mi
 800224c:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800224e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002250:	bf44      	itt	mi
 8002252:	2202      	movmi	r2, #2
 8002254:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002256:	f002 fda0 	bl	8004d9a <USB_ReadInterrupts>
 800225a:	0081      	lsls	r1, r0, #2
 800225c:	d515      	bpl.n	800228a <HAL_HCD_IRQHandler+0xa6>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002264:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002266:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 800226a:	07da      	lsls	r2, r3, #31
 800226c:	d40d      	bmi.n	800228a <HAL_HCD_IRQHandler+0xa6>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800226e:	2110      	movs	r1, #16
 8002270:	4630      	mov	r0, r6
 8002272:	f002 fd19 	bl	8004ca8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002276:	4630      	mov	r0, r6
 8002278:	f002 fd3c 	bl	8004cf4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	2101      	movs	r1, #1
 8002280:	f002 fdde 	bl	8004e40 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002284:	4620      	mov	r0, r4
 8002286:	f003 ff55 	bl	8006134 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800228a:	6820      	ldr	r0, [r4, #0]
 800228c:	f002 fd85 	bl	8004d9a <USB_ReadInterrupts>
 8002290:	01c3      	lsls	r3, r0, #7
 8002292:	d53d      	bpl.n	8002310 <HAL_HCD_IRQHandler+0x12c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002294:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002296:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800229a:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 800229c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80022a0:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80022a2:	9b03      	ldr	r3, [sp, #12]
 80022a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80022a8:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80022aa:	9b02      	ldr	r3, [sp, #8]
 80022ac:	079f      	lsls	r7, r3, #30
 80022ae:	d509      	bpl.n	80022c4 <HAL_HCD_IRQHandler+0xe0>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80022b0:	9b02      	ldr	r3, [sp, #8]
 80022b2:	07d8      	lsls	r0, r3, #31
 80022b4:	d502      	bpl.n	80022bc <HAL_HCD_IRQHandler+0xd8>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80022b6:	4620      	mov	r0, r4
 80022b8:	f003 ff38 	bl	800612c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80022bc:	9b03      	ldr	r3, [sp, #12]
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80022c4:	9b02      	ldr	r3, [sp, #8]
 80022c6:	0719      	lsls	r1, r3, #28
 80022c8:	d518      	bpl.n	80022fc <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80022d2:	9b02      	ldr	r3, [sp, #8]
 80022d4:	075a      	lsls	r2, r3, #29
 80022d6:	f140 8092 	bpl.w	80023fe <HAL_HCD_IRQHandler+0x21a>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80022da:	69a1      	ldr	r1, [r4, #24]
 80022dc:	2902      	cmp	r1, #2
 80022de:	f040 8086 	bne.w	80023ee <HAL_HCD_IRQHandler+0x20a>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80022e2:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80022e4:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80022e6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80022ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022ee:	bf18      	it	ne
 80022f0:	2101      	movne	r1, #1
 80022f2:	f002 fda5 	bl	8004e40 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f003 ff21 	bl	800613e <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80022fc:	9b02      	ldr	r3, [sp, #8]
 80022fe:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002300:	bf42      	ittt	mi
 8002302:	9b03      	ldrmi	r3, [sp, #12]
 8002304:	f043 0320 	orrmi.w	r3, r3, #32
 8002308:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800230a:	9b03      	ldr	r3, [sp, #12]
 800230c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	f002 fd42 	bl	8004d9a <USB_ReadInterrupts>
 8002316:	0707      	lsls	r7, r0, #28
 8002318:	d505      	bpl.n	8002326 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 800231a:	4620      	mov	r0, r4
 800231c:	f003 ff02 	bl	8006124 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	2208      	movs	r2, #8
 8002324:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002326:	6820      	ldr	r0, [r4, #0]
 8002328:	f002 fd37 	bl	8004d9a <USB_ReadInterrupts>
 800232c:	06c5      	lsls	r5, r0, #27
 800232e:	d544      	bpl.n	80023ba <HAL_HCD_IRQHandler+0x1d6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002330:	6827      	ldr	r7, [r4, #0]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f023 0310 	bic.w	r3, r3, #16
 8002338:	61bb      	str	r3, [r7, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 800233a:	6a3b      	ldr	r3, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800233c:	f3c3 4243 	ubfx	r2, r3, #17, #4
  switch (pktsts)
 8002340:	2a02      	cmp	r2, #2
 8002342:	d135      	bne.n	80023b0 <HAL_HCD_IRQHandler+0x1cc>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002344:	f3c3 190a 	ubfx	r9, r3, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002348:	f1b9 0f00 	cmp.w	r9, #0
 800234c:	d030      	beq.n	80023b0 <HAL_HCD_IRQHandler+0x1cc>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800234e:	f003 080f 	and.w	r8, r3, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002352:	252c      	movs	r5, #44	; 0x2c
 8002354:	fb05 4508 	mla	r5, r5, r8, r4
 8002358:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800235a:	b349      	cbz	r1, 80023b0 <HAL_HCD_IRQHandler+0x1cc>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800235c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800235e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8002360:	444b      	add	r3, r9
 8002362:	4293      	cmp	r3, r2
 8002364:	d84f      	bhi.n	8002406 <HAL_HCD_IRQHandler+0x222>
          (void)USB_ReadPacket(hhcd->Instance,
 8002366:	464a      	mov	r2, r9
 8002368:	4638      	mov	r0, r7
 800236a:	f002 fcf6 	bl	8004d5a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800236e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002370:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002374:	444b      	add	r3, r9
 8002376:	646b      	str	r3, [r5, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002378:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800237c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800237e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002382:	eb07 1848 	add.w	r8, r7, r8, lsl #5
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002386:	444b      	add	r3, r9
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002388:	4589      	cmp	r9, r1
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800238a:	652b      	str	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800238c:	f8d8 3010 	ldr.w	r3, [r8, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002390:	d10e      	bne.n	80023b0 <HAL_HCD_IRQHandler+0x1cc>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002392:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002396:	b15b      	cbz	r3, 80023b0 <HAL_HCD_IRQHandler+0x1cc>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002398:	59d3      	ldr	r3, [r2, r7]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800239a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800239e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023a2:	51d3      	str	r3, [r2, r7]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80023a4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80023a8:	f083 0301 	eor.w	r3, r3, #1
 80023ac:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	6993      	ldr	r3, [r2, #24]
 80023b4:	f043 0310 	orr.w	r3, r3, #16
 80023b8:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023ba:	6820      	ldr	r0, [r4, #0]
 80023bc:	f002 fced 	bl	8004d9a <USB_ReadInterrupts>
 80023c0:	0180      	lsls	r0, r0, #6
 80023c2:	d511      	bpl.n	80023e8 <HAL_HCD_IRQHandler+0x204>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023c4:	6820      	ldr	r0, [r4, #0]
 80023c6:	f002 fe9d 	bl	8005104 <USB_HC_ReadInterrupt>
 80023ca:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80023ce:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	f04f 0900 	mov.w	r9, #0
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023d6:	252c      	movs	r5, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023d8:	2702      	movs	r7, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023da:	68a3      	ldr	r3, [r4, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023dc:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023de:	454b      	cmp	r3, r9
 80023e0:	d815      	bhi.n	800240e <HAL_HCD_IRQHandler+0x22a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	6143      	str	r3, [r0, #20]
}
 80023e8:	b005      	add	sp, #20
 80023ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80023ee:	68e3      	ldr	r3, [r4, #12]
 80023f0:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 80023f2:	bf04      	itt	eq
 80023f4:	f64e 2260 	movweq	r2, #60000	; 0xea60
 80023f8:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 80023fc:	e77b      	b.n	80022f6 <HAL_HCD_IRQHandler+0x112>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80023fe:	4620      	mov	r0, r4
 8002400:	f003 fea1 	bl	8006146 <HAL_HCD_PortDisabled_Callback>
 8002404:	e77a      	b.n	80022fc <HAL_HCD_IRQHandler+0x118>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002406:	2304      	movs	r3, #4
 8002408:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 800240c:	e7d0      	b.n	80023b0 <HAL_HCD_IRQHandler+0x1cc>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800240e:	9a01      	ldr	r2, [sp, #4]
 8002410:	f009 030f 	and.w	r3, r9, #15
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	07d9      	lsls	r1, r3, #31
 800241a:	f140 808a 	bpl.w	8002532 <HAL_HCD_IRQHandler+0x34e>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800241e:	9b00      	ldr	r3, [sp, #0]
 8002420:	fa5f fa89 	uxtb.w	sl, r9
 8002424:	681a      	ldr	r2, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002426:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 800242a:	eb06 1b4a 	add.w	fp, r6, sl, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800242e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002432:	ea4f 184a 	mov.w	r8, sl, lsl #5
 8002436:	f8db 2008 	ldr.w	r2, [fp, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800243a:	f000 80e6 	beq.w	800260a <HAL_HCD_IRQHandler+0x426>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800243e:	0752      	lsls	r2, r2, #29
 8002440:	d507      	bpl.n	8002452 <HAL_HCD_IRQHandler+0x26e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002442:	2204      	movs	r2, #4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002444:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002448:	f04f 0c06 	mov.w	ip, #6
 800244c:	fb05 420a 	mla	r2, r5, sl, r4
 8002450:	e00b      	b.n	800246a <HAL_HCD_IRQHandler+0x286>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002452:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002456:	05d3      	lsls	r3, r2, #23
 8002458:	d50d      	bpl.n	8002476 <HAL_HCD_IRQHandler+0x292>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800245a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245e:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002462:	f04f 0c07 	mov.w	ip, #7
 8002466:	fb05 420a 	mla	r2, r5, sl, r4
    hhcd->hc[ch_num].state = HC_XACTERR;
 800246a:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246e:	4651      	mov	r1, sl
 8002470:	f002 fe4d 	bl	800510e <USB_HC_Halt>
 8002474:	e006      	b.n	8002484 <HAL_HCD_IRQHandler+0x2a0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002476:	f8db 2008 	ldr.w	r2, [fp, #8]
 800247a:	0691      	lsls	r1, r2, #26
 800247c:	d510      	bpl.n	80024a0 <HAL_HCD_IRQHandler+0x2bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800247e:	2220      	movs	r2, #32
 8002480:	f8cb 2008 	str.w	r2, [fp, #8]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002484:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002488:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 800248c:	d027      	beq.n	80024de <HAL_HCD_IRQHandler+0x2fa>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248e:	6820      	ldr	r0, [r4, #0]
 8002490:	4651      	mov	r1, sl
 8002492:	f002 fe3c 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002496:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800249a:	f8cb 2008 	str.w	r2, [fp, #8]
 800249e:	e048      	b.n	8002532 <HAL_HCD_IRQHandler+0x34e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024a0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80024a4:	0712      	lsls	r2, r2, #28
 80024a6:	d507      	bpl.n	80024b8 <HAL_HCD_IRQHandler+0x2d4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024a8:	2208      	movs	r2, #8
 80024aa:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80024ae:	f04f 0c05 	mov.w	ip, #5
 80024b2:	fb05 420a 	mla	r2, r5, sl, r4
 80024b6:	e7d8      	b.n	800246a <HAL_HCD_IRQHandler+0x286>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024b8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80024bc:	0553      	lsls	r3, r2, #21
 80024be:	d508      	bpl.n	80024d2 <HAL_HCD_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c4:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024c8:	f04f 0c08 	mov.w	ip, #8
 80024cc:	fb05 420a 	mla	r2, r5, sl, r4
 80024d0:	e7cb      	b.n	800246a <HAL_HCD_IRQHandler+0x286>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024d2:	f8db 2008 	ldr.w	r2, [fp, #8]
 80024d6:	0611      	lsls	r1, r2, #24
 80024d8:	d5d4      	bpl.n	8002484 <HAL_HCD_IRQHandler+0x2a0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	e7b2      	b.n	8002444 <HAL_HCD_IRQHandler+0x260>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024de:	f8db 2008 	ldr.w	r2, [fp, #8]
 80024e2:	07d2      	lsls	r2, r2, #31
 80024e4:	d53a      	bpl.n	800255c <HAL_HCD_IRQHandler+0x378>
    hhcd->hc[ch_num].state = HC_XFRC;
 80024e6:	fb05 400a 	mla	r0, r5, sl, r4
 80024ea:	2201      	movs	r2, #1
 80024ec:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024f0:	65c3      	str	r3, [r0, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024f2:	f8cb 2008 	str.w	r2, [fp, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f6:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 80024fa:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 80024fe:	d11e      	bne.n	800253e <HAL_HCD_IRQHandler+0x35a>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002500:	6820      	ldr	r0, [r4, #0]
 8002502:	4651      	mov	r1, sl
 8002504:	f002 fe03 	bl	800510e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002508:	2210      	movs	r2, #16
 800250a:	f8cb 2008 	str.w	r2, [fp, #8]
    if (hhcd->Init.dma_enable == 1U)
 800250e:	6923      	ldr	r3, [r4, #16]
 8002510:	2b01      	cmp	r3, #1
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002512:	fb05 410a 	mla	r1, r5, sl, r4
    if (hhcd->Init.dma_enable == 1U)
 8002516:	d106      	bne.n	8002526 <HAL_HCD_IRQHandler+0x342>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002518:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 800251c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800251e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002522:	07d8      	lsls	r0, r3, #31
 8002524:	d505      	bpl.n	8002532 <HAL_HCD_IRQHandler+0x34e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002526:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002532:	9b00      	ldr	r3, [sp, #0]
 8002534:	3320      	adds	r3, #32
 8002536:	f109 0901 	add.w	r9, r9, #1
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	e74d      	b.n	80023da <HAL_HCD_IRQHandler+0x1f6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800253e:	2a01      	cmp	r2, #1
 8002540:	d1e5      	bne.n	800250e <HAL_HCD_IRQHandler+0x32a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002542:	f858 3006 	ldr.w	r3, [r8, r6]
 8002546:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800254a:	f848 3006 	str.w	r3, [r8, r6]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800254e:	4651      	mov	r1, sl
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002550:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002554:	4620      	mov	r0, r4
 8002556:	f003 fdf1 	bl	800613c <HAL_HCD_HC_NotifyURBChange_Callback>
 800255a:	e7d8      	b.n	800250e <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800255c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002560:	f013 0302 	ands.w	r3, r3, #2
 8002564:	d036      	beq.n	80025d4 <HAL_HCD_IRQHandler+0x3f0>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002566:	fb05 400a 	mla	r0, r5, sl, r4
 800256a:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
 800256e:	2a01      	cmp	r2, #1
 8002570:	d10c      	bne.n	800258c <HAL_HCD_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002572:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002576:	fb05 430a 	mla	r3, r5, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800257a:	f8cb 7008 	str.w	r7, [fp, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800257e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002582:	4651      	mov	r1, sl
 8002584:	4620      	mov	r0, r4
 8002586:	f003 fdd9 	bl	800613c <HAL_HCD_HC_NotifyURBChange_Callback>
 800258a:	e7d2      	b.n	8002532 <HAL_HCD_IRQHandler+0x34e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800258c:	2a05      	cmp	r2, #5
 800258e:	d0f0      	beq.n	8002572 <HAL_HCD_IRQHandler+0x38e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002590:	2a06      	cmp	r2, #6
 8002592:	d001      	beq.n	8002598 <HAL_HCD_IRQHandler+0x3b4>
 8002594:	2a08      	cmp	r2, #8
 8002596:	d109      	bne.n	80025ac <HAL_HCD_IRQHandler+0x3c8>
      hhcd->hc[ch_num].ErrCnt++;
 8002598:	fb05 400a 	mla	r0, r5, sl, r4
 800259c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800259e:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025a0:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 80025a2:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025a4:	d904      	bls.n	80025b0 <HAL_HCD_IRQHandler+0x3cc>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	65c3      	str	r3, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025aa:	e011      	b.n	80025d0 <HAL_HCD_IRQHandler+0x3ec>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025ac:	2a03      	cmp	r2, #3
 80025ae:	d10a      	bne.n	80025c6 <HAL_HCD_IRQHandler+0x3e2>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025b0:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b4:	f858 2006 	ldr.w	r2, [r8, r6]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025c0:	f848 2006 	str.w	r2, [r8, r6]
 80025c4:	e7d7      	b.n	8002576 <HAL_HCD_IRQHandler+0x392>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025c6:	2a07      	cmp	r2, #7
 80025c8:	d1d5      	bne.n	8002576 <HAL_HCD_IRQHandler+0x392>
      hhcd->hc[ch_num].ErrCnt++;
 80025ca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80025cc:	3201      	adds	r2, #1
 80025ce:	65c2      	str	r2, [r0, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025d0:	2204      	movs	r2, #4
 80025d2:	e7ce      	b.n	8002572 <HAL_HCD_IRQHandler+0x38e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025d4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80025d8:	06d2      	lsls	r2, r2, #27
 80025da:	d5aa      	bpl.n	8002532 <HAL_HCD_IRQHandler+0x34e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025dc:	fb05 4e0a 	mla	lr, r5, sl, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	6820      	ldr	r0, [r4, #0]
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025e2:	f89e 203f 	ldrb.w	r2, [lr, #63]	; 0x3f
 80025e6:	2a03      	cmp	r2, #3
 80025e8:	d106      	bne.n	80025f8 <HAL_HCD_IRQHandler+0x414>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ea:	f8ce 305c 	str.w	r3, [lr, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ee:	4651      	mov	r1, sl
 80025f0:	f002 fd8d 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025f4:	2210      	movs	r2, #16
 80025f6:	e750      	b.n	800249a <HAL_HCD_IRQHandler+0x2b6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025f8:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 80025fc:	d1fa      	bne.n	80025f4 <HAL_HCD_IRQHandler+0x410>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025fe:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
      hhcd->hc[ch_num].state = HC_NAK;
 8002602:	2203      	movs	r2, #3
 8002604:	f88e 2061 	strb.w	r2, [lr, #97]	; 0x61
 8002608:	e7f1      	b.n	80025ee <HAL_HCD_IRQHandler+0x40a>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800260a:	f012 0204 	ands.w	r2, r2, #4
 800260e:	d008      	beq.n	8002622 <HAL_HCD_IRQHandler+0x43e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002610:	2204      	movs	r2, #4
 8002612:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002616:	fb05 430a 	mla	r3, r5, sl, r4
 800261a:	2206      	movs	r2, #6
    hhcd->hc[ch_num].state = HC_STALL;
 800261c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8002620:	e012      	b.n	8002648 <HAL_HCD_IRQHandler+0x464>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002622:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002626:	069b      	lsls	r3, r3, #26
 8002628:	d512      	bpl.n	8002650 <HAL_HCD_IRQHandler+0x46c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800262a:	2320      	movs	r3, #32
 800262c:	f8cb 3008 	str.w	r3, [fp, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002630:	fb05 430a 	mla	r3, r5, sl, r4
 8002634:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
 8002638:	f1bc 0f01 	cmp.w	ip, #1
 800263c:	f47f af79 	bne.w	8002532 <HAL_HCD_IRQHandler+0x34e>
      hhcd->hc[ch_num].do_ping = 0U;
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002644:	f883 7060 	strb.w	r7, [r3, #96]	; 0x60
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002648:	4651      	mov	r1, sl
 800264a:	f002 fd60 	bl	800510e <USB_HC_Halt>
 800264e:	e770      	b.n	8002532 <HAL_HCD_IRQHandler+0x34e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002650:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002654:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8002658:	d004      	beq.n	8002664 <HAL_HCD_IRQHandler+0x480>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	f8cb 2008 	str.w	r2, [fp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	e7f1      	b.n	8002648 <HAL_HCD_IRQHandler+0x464>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002664:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002668:	f012 0201 	ands.w	r2, r2, #1
 800266c:	d013      	beq.n	8002696 <HAL_HCD_IRQHandler+0x4b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800266e:	fb05 420a 	mla	r2, r5, sl, r4
 8002672:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002674:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002678:	0659      	lsls	r1, r3, #25
      hhcd->hc[ch_num].do_ping = 1U;
 800267a:	bf41      	itttt	mi
 800267c:	f04f 0c01 	movmi.w	ip, #1
 8002680:	f882 c03d 	strbmi.w	ip, [r2, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002684:	2240      	movmi	r2, #64	; 0x40
 8002686:	f8cb 2008 	strmi.w	r2, [fp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800268a:	2201      	movs	r2, #1
 800268c:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002690:	fb05 430a 	mla	r3, r5, sl, r4
 8002694:	e7c2      	b.n	800261c <HAL_HCD_IRQHandler+0x438>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002696:	f8db 3008 	ldr.w	r3, [fp, #8]
 800269a:	065b      	lsls	r3, r3, #25
 800269c:	d510      	bpl.n	80026c0 <HAL_HCD_IRQHandler+0x4dc>
    hhcd->hc[ch_num].state = HC_NYET;
 800269e:	fb05 4c0a 	mla	ip, r5, sl, r4
 80026a2:	f04f 0e04 	mov.w	lr, #4
 80026a6:	f88c e061 	strb.w	lr, [ip, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 80026aa:	f04f 0e01 	mov.w	lr, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ae:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    hhcd->hc[ch_num].do_ping = 1U;
 80026b2:	f88c e03d 	strb.w	lr, [ip, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b6:	4651      	mov	r1, sl
 80026b8:	f002 fd29 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	e6ec      	b.n	800249a <HAL_HCD_IRQHandler+0x2b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026c0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80026c4:	0711      	lsls	r1, r2, #28
 80026c6:	d506      	bpl.n	80026d6 <HAL_HCD_IRQHandler+0x4f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026c8:	2208      	movs	r2, #8
 80026ca:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026ce:	fb05 430a 	mla	r3, r5, sl, r4
 80026d2:	2205      	movs	r2, #5
 80026d4:	e7a2      	b.n	800261c <HAL_HCD_IRQHandler+0x438>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026d6:	f8db 2008 	ldr.w	r2, [fp, #8]
 80026da:	06d2      	lsls	r2, r2, #27
 80026dc:	d508      	bpl.n	80026f0 <HAL_HCD_IRQHandler+0x50c>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026de:	fb05 420a 	mla	r2, r5, sl, r4
 80026e2:	2300      	movs	r3, #0
    hhcd->hc[ch_num].state = HC_NAK;
 80026e4:	f04f 0c03 	mov.w	ip, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e8:	65d3      	str	r3, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 80026ea:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ee:	e77e      	b.n	80025ee <HAL_HCD_IRQHandler+0x40a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026f0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80026f4:	0613      	lsls	r3, r2, #24
 80026f6:	d50a      	bpl.n	800270e <HAL_HCD_IRQHandler+0x52a>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026f8:	fb05 420a 	mla	r2, r5, sl, r4
 80026fc:	f04f 0c06 	mov.w	ip, #6
 8002700:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002704:	4651      	mov	r1, sl
 8002706:	f002 fd02 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	e6c5      	b.n	800249a <HAL_HCD_IRQHandler+0x2b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800270e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002712:	0551      	lsls	r1, r2, #21
 8002714:	d50b      	bpl.n	800272e <HAL_HCD_IRQHandler+0x54a>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002716:	fb05 420a 	mla	r2, r5, sl, r4
 800271a:	f04f 0c08 	mov.w	ip, #8
 800271e:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002722:	4651      	mov	r1, sl
 8002724:	f002 fcf3 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272c:	e6b5      	b.n	800249a <HAL_HCD_IRQHandler+0x2b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800272e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002732:	0792      	lsls	r2, r2, #30
 8002734:	f57f aefd 	bpl.w	8002532 <HAL_HCD_IRQHandler+0x34e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002738:	fb05 420a 	mla	r2, r5, sl, r4
 800273c:	f892 0061 	ldrb.w	r0, [r2, #97]	; 0x61
 8002740:	2801      	cmp	r0, #1
 8002742:	d121      	bne.n	8002788 <HAL_HCD_IRQHandler+0x5a4>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002744:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002748:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 800274c:	3802      	subs	r0, #2
 800274e:	2801      	cmp	r0, #1
 8002750:	f63f af11 	bhi.w	8002576 <HAL_HCD_IRQHandler+0x392>
        if (hhcd->Init.dma_enable == 0U)
 8002754:	6920      	ldr	r0, [r4, #16]
 8002756:	b930      	cbnz	r0, 8002766 <HAL_HCD_IRQHandler+0x582>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002758:	f892 0055 	ldrb.w	r0, [r2, #85]	; 0x55
 800275c:	f080 0001 	eor.w	r0, r0, #1
 8002760:	f882 0055 	strb.w	r0, [r2, #85]	; 0x55
 8002764:	e707      	b.n	8002576 <HAL_HCD_IRQHandler+0x392>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002766:	2801      	cmp	r0, #1
 8002768:	f47f af05 	bne.w	8002576 <HAL_HCD_IRQHandler+0x392>
 800276c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800276e:	2800      	cmp	r0, #0
 8002770:	f43f af01 	beq.w	8002576 <HAL_HCD_IRQHandler+0x392>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002774:	f8b2 c040 	ldrh.w	ip, [r2, #64]	; 0x40
 8002778:	3801      	subs	r0, #1
 800277a:	4460      	add	r0, ip
 800277c:	fbb0 f0fc 	udiv	r0, r0, ip
          if ((num_packets & 1U) != 0U)
 8002780:	07c3      	lsls	r3, r0, #31
 8002782:	f57f aef8 	bpl.w	8002576 <HAL_HCD_IRQHandler+0x392>
 8002786:	e7e7      	b.n	8002758 <HAL_HCD_IRQHandler+0x574>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002788:	2803      	cmp	r0, #3
 800278a:	d102      	bne.n	8002792 <HAL_HCD_IRQHandler+0x5ae>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800278c:	f882 7060 	strb.w	r7, [r2, #96]	; 0x60
 8002790:	e6f1      	b.n	8002576 <HAL_HCD_IRQHandler+0x392>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002792:	2804      	cmp	r0, #4
 8002794:	d0fa      	beq.n	800278c <HAL_HCD_IRQHandler+0x5a8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002796:	2805      	cmp	r0, #5
 8002798:	d102      	bne.n	80027a0 <HAL_HCD_IRQHandler+0x5bc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800279a:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
 800279e:	e6ea      	b.n	8002576 <HAL_HCD_IRQHandler+0x392>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027a0:	2806      	cmp	r0, #6
 80027a2:	f43f aef9 	beq.w	8002598 <HAL_HCD_IRQHandler+0x3b4>
 80027a6:	2808      	cmp	r0, #8
 80027a8:	f47f aee5 	bne.w	8002576 <HAL_HCD_IRQHandler+0x392>
 80027ac:	e6f4      	b.n	8002598 <HAL_HCD_IRQHandler+0x3b4>

080027ae <HAL_HCD_Start>:
{
 80027ae:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80027b0:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 80027b4:	2b01      	cmp	r3, #1
{
 80027b6:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80027b8:	d00c      	beq.n	80027d4 <HAL_HCD_Start+0x26>
 80027ba:	2101      	movs	r1, #1
 80027bc:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027c0:	6800      	ldr	r0, [r0, #0]
 80027c2:	f002 fb77 	bl	8004eb4 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 80027c6:	6820      	ldr	r0, [r4, #0]
 80027c8:	f002 fa32 	bl	8004c30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80027d2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80027d4:	2002      	movs	r0, #2
 80027d6:	e7fc      	b.n	80027d2 <HAL_HCD_Start+0x24>

080027d8 <HAL_HCD_Stop>:
{
 80027d8:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80027da:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 80027de:	2b01      	cmp	r3, #1
{
 80027e0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80027e2:	d009      	beq.n	80027f8 <HAL_HCD_Stop+0x20>
 80027e4:	2301      	movs	r3, #1
 80027e6:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80027ea:	6800      	ldr	r0, [r0, #0]
 80027ec:	f002 fceb 	bl	80051c6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80027f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80027f8:	2002      	movs	r0, #2
 80027fa:	e7fc      	b.n	80027f6 <HAL_HCD_Stop+0x1e>

080027fc <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80027fc:	6800      	ldr	r0, [r0, #0]
 80027fe:	f002 bb3b 	b.w	8004e78 <USB_ResetPort>

08002802 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002802:	232c      	movs	r3, #44	; 0x2c
 8002804:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002808:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 800280c:	4770      	bx	lr

0800280e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800280e:	232c      	movs	r3, #44	; 0x2c
 8002810:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002814:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8002816:	4770      	bx	lr

08002818 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002818:	6800      	ldr	r0, [r0, #0]
 800281a:	f002 bb76 	b.w	8004f0a <USB_GetCurrentFrame>

0800281e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800281e:	6800      	ldr	r0, [r0, #0]
 8002820:	f002 bb68 	b.w	8004ef4 <USB_GetHostSpeed>

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002826:	4604      	mov	r4, r0
 8002828:	2800      	cmp	r0, #0
 800282a:	d04a      	beq.n	80028c2 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002830:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002834:	b91b      	cbnz	r3, 800283e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800283a:	f7fe fe2d 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800283e:	2324      	movs	r3, #36	; 0x24
 8002840:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800284e:	6862      	ldr	r2, [r4, #4]
 8002850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800285c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800285e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002862:	2901      	cmp	r1, #1
 8002864:	d124      	bne.n	80028b0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002876:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002880:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002884:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002886:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002888:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800288c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800288e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80028a0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 80028ae:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028b4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028b8:	bf04      	itt	eq
 80028ba:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80028be:	605a      	streq	r2, [r3, #4]
 80028c0:	e7d4      	b.n	800286c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	e7f3      	b.n	80028ae <HAL_I2C_Init+0x8a>

080028c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028c6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	b2dc      	uxtb	r4, r3
 80028d0:	d11d      	bne.n	800290e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d019      	beq.n	800290e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028da:	2324      	movs	r3, #36	; 0x24
 80028dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e0:	6803      	ldr	r3, [r0, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4311      	orrs	r1, r2
 80028f6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002906:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800290a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800290c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800290e:	2002      	movs	r0, #2
 8002910:	e7fc      	b.n	800290c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002912 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002912:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002918:	2b20      	cmp	r3, #32
 800291a:	b2dc      	uxtb	r4, r3
 800291c:	d11c      	bne.n	8002958 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002922:	2b01      	cmp	r3, #1
 8002924:	d018      	beq.n	8002958 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002926:	2324      	movs	r3, #36	; 0x24
 8002928:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800292c:	6803      	ldr	r3, [r0, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002936:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002938:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800293c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002940:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002950:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002954:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002956:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002958:	2002      	movs	r0, #2
 800295a:	e7fc      	b.n	8002956 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800295c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295c:	4a02      	ldr	r2, [pc, #8]	; (8002968 <HAL_PWR_EnableBkUpAccess+0xc>)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]
}
 8002966:	4770      	bx	lr
 8002968:	40007000 	.word	0x40007000

0800296c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800296c:	4b02      	ldr	r3, [pc, #8]	; (8002978 <HAL_PWREx_GetVoltageRange+0xc>)
 800296e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002970:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40007000 	.word	0x40007000

0800297c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800297c:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800297e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002980:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002988:	d11d      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800298a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298e:	d101      	bne.n	8002994 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002990:	2000      	movs	r0, #0
 8002992:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002994:	6813      	ldr	r3, [r2, #0]
 8002996:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800299a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2132      	movs	r1, #50	; 0x32
 80029a6:	434b      	muls	r3, r1
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b0:	6951      	ldr	r1, [r2, #20]
 80029b2:	0549      	lsls	r1, r1, #21
 80029b4:	d500      	bpl.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
 80029b6:	b923      	cbnz	r3, 80029c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b8:	6953      	ldr	r3, [r2, #20]
 80029ba:	055b      	lsls	r3, r3, #21
 80029bc:	d5e8      	bpl.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 80029be:	2003      	movs	r0, #3
}
 80029c0:	4770      	bx	lr
        wait_loop_index--;
 80029c2:	3b01      	subs	r3, #1
 80029c4:	e7f4      	b.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ca:	bf1f      	itttt	ne
 80029cc:	6813      	ldrne	r3, [r2, #0]
 80029ce:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80029d2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80029d6:	6013      	strne	r3, [r2, #0]
 80029d8:	e7da      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x14>
 80029da:	bf00      	nop
 80029dc:	40007000 	.word	0x40007000
 80029e0:	20000000 	.word	0x20000000
 80029e4:	000f4240 	.word	0x000f4240

080029e8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029e8:	4a02      	ldr	r2, [pc, #8]	; (80029f4 <HAL_PWREx_EnableVddUSB+0xc>)
 80029ea:	6853      	ldr	r3, [r2, #4]
 80029ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f0:	6053      	str	r3, [r2, #4]
}
 80029f2:	4770      	bx	lr
 80029f4:	40007000 	.word	0x40007000

080029f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80029f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029fc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002a00:	4604      	mov	r4, r0
 8002a02:	460e      	mov	r6, r1
 8002a04:	4615      	mov	r5, r2
 8002a06:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a08:	6822      	ldr	r2, [r4, #0]
 8002a0a:	6893      	ldr	r3, [r2, #8]
 8002a0c:	4233      	tst	r3, r6
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	42ab      	cmp	r3, r5
 8002a16:	d101      	bne.n	8002a1c <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002a18:	2000      	movs	r0, #0
 8002a1a:	e012      	b.n	8002a42 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002a1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002a20:	d0f3      	beq.n	8002a0a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7ff f8cb 	bl	8001bbc <HAL_GetTick>
 8002a26:	1bc0      	subs	r0, r0, r7
 8002a28:	4540      	cmp	r0, r8
 8002a2a:	d802      	bhi.n	8002a32 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8002a2c:	f1b8 0f00 	cmp.w	r8, #0
 8002a30:	d1ea      	bne.n	8002a08 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a32:	2304      	movs	r3, #4
 8002a34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002a40:	2001      	movs	r0, #1
}
 8002a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a48 <HAL_QSPI_Init>:
{
 8002a48:	b530      	push	{r4, r5, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a4e:	f7ff f8b5 	bl	8001bbc <HAL_GetTick>
 8002a52:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d043      	beq.n	8002ae0 <HAL_QSPI_Init+0x98>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002a58:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002a5c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002a60:	b94a      	cbnz	r2, 8002a76 <HAL_QSPI_Init+0x2e>
 8002a62:	9003      	str	r0, [sp, #12]
    hqspi->Lock = HAL_UNLOCKED;
 8002a64:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7fe fe35 	bl	80016d8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	9b03      	ldr	r3, [sp, #12]
 8002a74:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	68a1      	ldr	r1, [r4, #8]
 8002a7a:	6802      	ldr	r2, [r0, #0]
 8002a7c:	3901      	subs	r1, #1
 8002a7e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002a82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a86:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a8a:	9200      	str	r2, [sp, #0]
 8002a8c:	2120      	movs	r1, #32
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff ffb1 	bl	80029f8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002a96:	b9f0      	cbnz	r0, 8002ad6 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	6865      	ldr	r5, [r4, #4]
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	68e3      	ldr	r3, [r4, #12]
 8002aa0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002aa4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002aa8:	f021 0110 	bic.w	r1, r1, #16
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002ab0:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6921      	ldr	r1, [r4, #16]
 8002ab8:	6855      	ldr	r5, [r2, #4]
 8002aba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002abe:	4909      	ldr	r1, [pc, #36]	; (8002ae4 <HAL_QSPI_Init+0x9c>)
 8002ac0:	4029      	ands	r1, r5
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ace:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ad0:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ad2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002adc:	b005      	add	sp, #20
 8002ade:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	e7fb      	b.n	8002adc <HAL_QSPI_Init+0x94>
 8002ae4:	ffe0f8fe 	.word	0xffe0f8fe

08002ae8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aea:	4d1e      	ldr	r5, [pc, #120]	; (8002b64 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002aec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002aee:	00da      	lsls	r2, r3, #3
{
 8002af0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002af2:	d518      	bpl.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002af4:	f7ff ff3a 	bl	800296c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002afc:	d123      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002afe:	2c80      	cmp	r4, #128	; 0x80
 8002b00:	d929      	bls.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b02:	2ca0      	cmp	r4, #160	; 0xa0
 8002b04:	bf8c      	ite	hi
 8002b06:	2002      	movhi	r0, #2
 8002b08:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002b0c:	6813      	ldr	r3, [r2, #0]
 8002b0e:	f023 0307 	bic.w	r3, r3, #7
 8002b12:	4303      	orrs	r3, r0
 8002b14:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002b1c:	1a18      	subs	r0, r3, r0
 8002b1e:	bf18      	it	ne
 8002b20:	2001      	movne	r0, #1
 8002b22:	b003      	add	sp, #12
 8002b24:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002b38:	f7ff ff18 	bl	800296c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b42:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b44:	e7d8      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002b46:	2c80      	cmp	r4, #128	; 0x80
 8002b48:	d807      	bhi.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002b4a:	d008      	beq.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002b4c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002b50:	4258      	negs	r0, r3
 8002b52:	4158      	adcs	r0, r3
 8002b54:	e7d9      	b.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b56:	2000      	movs	r0, #0
 8002b58:	e7d7      	b.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	e7d5      	b.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b5e:	2002      	movs	r0, #2
 8002b60:	e7d3      	b.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40022000 	.word	0x40022000

08002b6c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002b6e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b72:	f012 020c 	ands.w	r2, r2, #12
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x18>
 8002b78:	2a0c      	cmp	r2, #12
 8002b7a:	d115      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b7c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b80:	2901      	cmp	r1, #1
 8002b82:	d118      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b84:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002b86:	481d      	ldr	r0, [pc, #116]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b88:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b8a:	bf55      	itete	pl
 8002b8c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b90:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b92:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b96:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002b9a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b9e:	b34a      	cbz	r2, 8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ba0:	2a0c      	cmp	r2, #12
 8002ba2:	d009      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x4c>
 8002ba4:	2000      	movs	r0, #0
  return sysclockfreq;
 8002ba6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ba8:	2a04      	cmp	r2, #4
 8002baa:	d022      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bac:	2a08      	cmp	r2, #8
 8002bae:	4814      	ldr	r0, [pc, #80]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bb0:	bf18      	it	ne
 8002bb2:	2000      	movne	r0, #0
 8002bb4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bb6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002bbe:	2a02      	cmp	r2, #2
 8002bc0:	d015      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x82>
 8002bc2:	490f      	ldr	r1, [pc, #60]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	2a03      	cmp	r2, #3
 8002bc6:	bf08      	it	eq
 8002bc8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bca:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002bd2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd4:	68d8      	ldr	r0, [r3, #12]
 8002bd6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bda:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bde:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002be0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be2:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002be4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002be8:	fbb2 f0f0 	udiv	r0, r2, r0
 8002bec:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf0:	e7eb      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002bf2:	4804      	ldr	r0, [pc, #16]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	0800f81c 	.word	0x0800f81c
 8002c00:	007a1200 	.word	0x007a1200
 8002c04:	00f42400 	.word	0x00f42400

08002c08 <HAL_RCC_OscConfig>:
{
 8002c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	b918      	cbnz	r0, 8002c18 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002c10:	2001      	movs	r0, #1
}
 8002c12:	b003      	add	sp, #12
 8002c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c18:	4c92      	ldr	r4, [pc, #584]	; (8002e64 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c1a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c1e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c20:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c22:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c26:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c2a:	d53d      	bpl.n	8002ca8 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c2c:	b11e      	cbz	r6, 8002c36 <HAL_RCC_OscConfig+0x2e>
 8002c2e:	2e0c      	cmp	r6, #12
 8002c30:	d166      	bne.n	8002d00 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c32:	2f01      	cmp	r7, #1
 8002c34:	d164      	bne.n	8002d00 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	0798      	lsls	r0, r3, #30
 8002c3a:	d502      	bpl.n	8002c42 <HAL_RCC_OscConfig+0x3a>
 8002c3c:	69ab      	ldr	r3, [r5, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0e6      	beq.n	8002c10 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	6a28      	ldr	r0, [r5, #32]
 8002c46:	0719      	lsls	r1, r3, #28
 8002c48:	bf56      	itet	pl
 8002c4a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002c4e:	6823      	ldrmi	r3, [r4, #0]
 8002c50:	091b      	lsrpl	r3, r3, #4
 8002c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c56:	4298      	cmp	r0, r3
 8002c58:	d93b      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c5a:	f7ff ff45 	bl	8002ae8 <RCC_SetFlashLatencyFromMSIRange>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d1d6      	bne.n	8002c10 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	6a2a      	ldr	r2, [r5, #32]
 8002c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c72:	4313      	orrs	r3, r2
 8002c74:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c76:	6863      	ldr	r3, [r4, #4]
 8002c78:	69ea      	ldr	r2, [r5, #28]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c82:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c84:	f7ff ff72 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002c88:	68a3      	ldr	r3, [r4, #8]
 8002c8a:	4a77      	ldr	r2, [pc, #476]	; (8002e68 <HAL_RCC_OscConfig+0x260>)
 8002c8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	40d8      	lsrs	r0, r3
 8002c98:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x264>)
 8002c9a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002c9c:	4b74      	ldr	r3, [pc, #464]	; (8002e70 <HAL_RCC_OscConfig+0x268>)
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	f7fe ff44 	bl	8001b2c <HAL_InitTick>
        if(status != HAL_OK)
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d1b4      	bne.n	8002c12 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	07d8      	lsls	r0, r3, #31
 8002cac:	d45f      	bmi.n	8002d6e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	682b      	ldr	r3, [r5, #0]
 8002cb0:	0799      	lsls	r1, r3, #30
 8002cb2:	f100 809e 	bmi.w	8002df2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	0718      	lsls	r0, r3, #28
 8002cba:	f100 80db 	bmi.w	8002e74 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbe:	682b      	ldr	r3, [r5, #0]
 8002cc0:	0759      	lsls	r1, r3, #29
 8002cc2:	f100 8101 	bmi.w	8002ec8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 816a 	bne.w	8002fa2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002cce:	2000      	movs	r0, #0
 8002cd0:	e79f      	b.n	8002c12 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce0:	4303      	orrs	r3, r0
 8002ce2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce4:	6863      	ldr	r3, [r4, #4]
 8002ce6:	69ea      	ldr	r2, [r5, #28]
 8002ce8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002cf0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf2:	2e00      	cmp	r6, #0
 8002cf4:	d1c6      	bne.n	8002c84 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf6:	f7ff fef7 	bl	8002ae8 <RCC_SetFlashLatencyFromMSIRange>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d0c2      	beq.n	8002c84 <HAL_RCC_OscConfig+0x7c>
 8002cfe:	e787      	b.n	8002c10 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d00:	69ab      	ldr	r3, [r5, #24]
 8002d02:	b31b      	cbz	r3, 8002d4c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d0c:	f7fe ff56 	bl	8001bbc <HAL_GetTick>
 8002d10:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	079a      	lsls	r2, r3, #30
 8002d16:	d511      	bpl.n	8002d3c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	6a2a      	ldr	r2, [r5, #32]
 8002d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	69ea      	ldr	r2, [r5, #28]
 8002d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d38:	6063      	str	r3, [r4, #4]
 8002d3a:	e7b5      	b.n	8002ca8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d3c:	f7fe ff3e 	bl	8001bbc <HAL_GetTick>
 8002d40:	eba0 0008 	sub.w	r0, r0, r8
 8002d44:	2802      	cmp	r0, #2
 8002d46:	d9e4      	bls.n	8002d12 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002d48:	2003      	movs	r0, #3
 8002d4a:	e762      	b.n	8002c12 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d54:	f7fe ff32 	bl	8001bbc <HAL_GetTick>
 8002d58:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	079b      	lsls	r3, r3, #30
 8002d5e:	d5a3      	bpl.n	8002ca8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d60:	f7fe ff2c 	bl	8001bbc <HAL_GetTick>
 8002d64:	eba0 0008 	sub.w	r0, r0, r8
 8002d68:	2802      	cmp	r0, #2
 8002d6a:	d9f6      	bls.n	8002d5a <HAL_RCC_OscConfig+0x152>
 8002d6c:	e7ec      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d6e:	2e08      	cmp	r6, #8
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_OscConfig+0x172>
 8002d72:	2e0c      	cmp	r6, #12
 8002d74:	d108      	bne.n	8002d88 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d76:	2f03      	cmp	r7, #3
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	039a      	lsls	r2, r3, #14
 8002d7e:	d596      	bpl.n	8002cae <HAL_RCC_OscConfig+0xa6>
 8002d80:	686b      	ldr	r3, [r5, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d193      	bne.n	8002cae <HAL_RCC_OscConfig+0xa6>
 8002d86:	e743      	b.n	8002c10 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	686b      	ldr	r3, [r5, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d110      	bne.n	8002db2 <HAL_RCC_OscConfig+0x1aa>
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d98:	f7fe ff10 	bl	8001bbc <HAL_GetTick>
 8002d9c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	039b      	lsls	r3, r3, #14
 8002da2:	d484      	bmi.n	8002cae <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe ff0a 	bl	8001bbc <HAL_GetTick>
 8002da8:	eba0 0008 	sub.w	r0, r0, r8
 8002dac:	2864      	cmp	r0, #100	; 0x64
 8002dae:	d9f6      	bls.n	8002d9e <HAL_RCC_OscConfig+0x196>
 8002db0:	e7ca      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db6:	d104      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x1ba>
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbe:	6023      	str	r3, [r4, #0]
 8002dc0:	e7e6      	b.n	8002d90 <HAL_RCC_OscConfig+0x188>
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dc8:	6022      	str	r2, [r4, #0]
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fef1 	bl	8001bbc <HAL_GetTick>
 8002dda:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	0398      	lsls	r0, r3, #14
 8002de0:	f57f af65 	bpl.w	8002cae <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe feea 	bl	8001bbc <HAL_GetTick>
 8002de8:	eba0 0008 	sub.w	r0, r0, r8
 8002dec:	2864      	cmp	r0, #100	; 0x64
 8002dee:	d9f5      	bls.n	8002ddc <HAL_RCC_OscConfig+0x1d4>
 8002df0:	e7aa      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002df2:	2e04      	cmp	r6, #4
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1f6>
 8002df6:	2e0c      	cmp	r6, #12
 8002df8:	d110      	bne.n	8002e1c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dfa:	2f02      	cmp	r7, #2
 8002dfc:	d10e      	bne.n	8002e1c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	0559      	lsls	r1, r3, #21
 8002e02:	d503      	bpl.n	8002e0c <HAL_RCC_OscConfig+0x204>
 8002e04:	68eb      	ldr	r3, [r5, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f43f af02 	beq.w	8002c10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	6863      	ldr	r3, [r4, #4]
 8002e0e:	692a      	ldr	r2, [r5, #16]
 8002e10:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002e14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e18:	6063      	str	r3, [r4, #4]
 8002e1a:	e74c      	b.n	8002cb6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1c:	68eb      	ldr	r3, [r5, #12]
 8002e1e:	b17b      	cbz	r3, 8002e40 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e28:	f7fe fec8 	bl	8001bbc <HAL_GetTick>
 8002e2c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	055a      	lsls	r2, r3, #21
 8002e32:	d4eb      	bmi.n	8002e0c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fe fec2 	bl	8001bbc <HAL_GetTick>
 8002e38:	1bc0      	subs	r0, r0, r7
 8002e3a:	2802      	cmp	r0, #2
 8002e3c:	d9f7      	bls.n	8002e2e <HAL_RCC_OscConfig+0x226>
 8002e3e:	e783      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e48:	f7fe feb8 	bl	8001bbc <HAL_GetTick>
 8002e4c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	055b      	lsls	r3, r3, #21
 8002e52:	f57f af30 	bpl.w	8002cb6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e56:	f7fe feb1 	bl	8001bbc <HAL_GetTick>
 8002e5a:	1bc0      	subs	r0, r0, r7
 8002e5c:	2802      	cmp	r0, #2
 8002e5e:	d9f6      	bls.n	8002e4e <HAL_RCC_OscConfig+0x246>
 8002e60:	e772      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	0800f804 	.word	0x0800f804
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e74:	696b      	ldr	r3, [r5, #20]
 8002e76:	b19b      	cbz	r3, 8002ea0 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002e78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002e84:	f7fe fe9a 	bl	8001bbc <HAL_GetTick>
 8002e88:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e8a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002e8e:	079a      	lsls	r2, r3, #30
 8002e90:	f53f af15 	bmi.w	8002cbe <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fe fe92 	bl	8001bbc <HAL_GetTick>
 8002e98:	1bc0      	subs	r0, r0, r7
 8002e9a:	2802      	cmp	r0, #2
 8002e9c:	d9f5      	bls.n	8002e8a <HAL_RCC_OscConfig+0x282>
 8002e9e:	e753      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002eac:	f7fe fe86 	bl	8001bbc <HAL_GetTick>
 8002eb0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002eb6:	079b      	lsls	r3, r3, #30
 8002eb8:	f57f af01 	bpl.w	8002cbe <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fe7e 	bl	8001bbc <HAL_GetTick>
 8002ec0:	1bc0      	subs	r0, r0, r7
 8002ec2:	2802      	cmp	r0, #2
 8002ec4:	d9f5      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x2aa>
 8002ec6:	e73f      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002eca:	00df      	lsls	r7, r3, #3
 8002ecc:	d429      	bmi.n	8002f22 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ee0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee4:	4f85      	ldr	r7, [pc, #532]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	05d8      	lsls	r0, r3, #23
 8002eea:	d51d      	bpl.n	8002f28 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eec:	68ab      	ldr	r3, [r5, #8]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12b      	bne.n	8002f4a <HAL_RCC_OscConfig+0x342>
 8002ef2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002efe:	f7fe fe5d 	bl	8001bbc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f06:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f0c:	079a      	lsls	r2, r3, #30
 8002f0e:	d542      	bpl.n	8002f96 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002f10:	f1b8 0f00 	cmp.w	r8, #0
 8002f14:	f43f aed7 	beq.w	8002cc6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f20:	e6d1      	b.n	8002cc6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	f04f 0800 	mov.w	r8, #0
 8002f26:	e7dd      	b.n	8002ee4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002f30:	f7fe fe44 	bl	8001bbc <HAL_GetTick>
 8002f34:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	05d9      	lsls	r1, r3, #23
 8002f3a:	d4d7      	bmi.n	8002eec <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7fe fe3e 	bl	8001bbc <HAL_GetTick>
 8002f40:	eba0 0009 	sub.w	r0, r0, r9
 8002f44:	2802      	cmp	r0, #2
 8002f46:	d9f6      	bls.n	8002f36 <HAL_RCC_OscConfig+0x32e>
 8002f48:	e6fe      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x354>
 8002f4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002f5a:	e7ca      	b.n	8002ef2 <HAL_RCC_OscConfig+0x2ea>
 8002f5c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002f68:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f6c:	f022 0204 	bic.w	r2, r2, #4
 8002f70:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1c2      	bne.n	8002efe <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002f78:	f7fe fe20 	bl	8001bbc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f80:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f86:	079b      	lsls	r3, r3, #30
 8002f88:	d5c2      	bpl.n	8002f10 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fe17 	bl	8001bbc <HAL_GetTick>
 8002f8e:	1bc0      	subs	r0, r0, r7
 8002f90:	4548      	cmp	r0, r9
 8002f92:	d9f6      	bls.n	8002f82 <HAL_RCC_OscConfig+0x37a>
 8002f94:	e6d8      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fe11 	bl	8001bbc <HAL_GetTick>
 8002f9a:	1bc0      	subs	r0, r0, r7
 8002f9c:	4548      	cmp	r0, r9
 8002f9e:	d9b3      	bls.n	8002f08 <HAL_RCC_OscConfig+0x300>
 8002fa0:	e6d2      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	f040 808f 	bne.w	80030c6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002fa8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002fac:	f003 0103 	and.w	r1, r3, #3
 8002fb0:	4291      	cmp	r1, r2
 8002fb2:	d124      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002fb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fba:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002fc0:	d11d      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002fc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002fcc:	d117      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fce:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002fd0:	3a07      	subs	r2, #7
 8002fd2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002fd6:	bf18      	it	ne
 8002fd8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fda:	4291      	cmp	r1, r2
 8002fdc:	d10f      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fde:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002fe6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fe8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ff0:	0852      	lsrs	r2, r2, #1
 8002ff2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002ff6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002ffc:	d04a      	beq.n	8003094 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ffe:	2e0c      	cmp	r6, #12
 8003000:	f43f ae06 	beq.w	8002c10 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	015f      	lsls	r7, r3, #5
 8003008:	f53f ae02 	bmi.w	8002c10 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	00de      	lsls	r6, r3, #3
 8003010:	f53f adfe 	bmi.w	8002c10 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800301c:	f7fe fdce 	bl	8001bbc <HAL_GetTick>
 8003020:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	0198      	lsls	r0, r3, #6
 8003026:	d42f      	bmi.n	8003088 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	68e2      	ldr	r2, [r4, #12]
 800302a:	4b35      	ldr	r3, [pc, #212]	; (8003100 <HAL_RCC_OscConfig+0x4f8>)
 800302c:	4013      	ands	r3, r2
 800302e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003030:	4313      	orrs	r3, r2
 8003032:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003038:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800303a:	3a01      	subs	r2, #1
 800303c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003040:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003042:	0912      	lsrs	r2, r2, #4
 8003044:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003048:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800304a:	0852      	lsrs	r2, r2, #1
 800304c:	3a01      	subs	r2, #1
 800304e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003052:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003054:	0852      	lsrs	r2, r2, #1
 8003056:	3a01      	subs	r2, #1
 8003058:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800305c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003064:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003066:	68e3      	ldr	r3, [r4, #12]
 8003068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800306e:	f7fe fda5 	bl	8001bbc <HAL_GetTick>
 8003072:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	0199      	lsls	r1, r3, #6
 8003078:	f53f ae29 	bmi.w	8002cce <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fd9e 	bl	8001bbc <HAL_GetTick>
 8003080:	1b40      	subs	r0, r0, r5
 8003082:	2802      	cmp	r0, #2
 8003084:	d9f6      	bls.n	8003074 <HAL_RCC_OscConfig+0x46c>
 8003086:	e65f      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fd98 	bl	8001bbc <HAL_GetTick>
 800308c:	1b80      	subs	r0, r0, r6
 800308e:	2802      	cmp	r0, #2
 8003090:	d9c7      	bls.n	8003022 <HAL_RCC_OscConfig+0x41a>
 8003092:	e659      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	019a      	lsls	r2, r3, #6
 8003098:	f53f ae19 	bmi.w	8002cce <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a4:	68e3      	ldr	r3, [r4, #12]
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80030ac:	f7fe fd86 	bl	8001bbc <HAL_GetTick>
 80030b0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	f53f ae0a 	bmi.w	8002cce <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fd7f 	bl	8001bbc <HAL_GetTick>
 80030be:	1b40      	subs	r0, r0, r5
 80030c0:	2802      	cmp	r0, #2
 80030c2:	d9f6      	bls.n	80030b2 <HAL_RCC_OscConfig+0x4aa>
 80030c4:	e640      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c6:	2e0c      	cmp	r6, #12
 80030c8:	f43f ada2 	beq.w	8002c10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030d4:	f7fe fd72 	bl	8001bbc <HAL_GetTick>
 80030d8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80030e0:	d105      	bne.n	80030ee <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030e2:	68e1      	ldr	r1, [r4, #12]
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_RCC_OscConfig+0x4fc>)
 80030e6:	400a      	ands	r2, r1
 80030e8:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80030ea:	4618      	mov	r0, r3
 80030ec:	e591      	b.n	8002c12 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe fd65 	bl	8001bbc <HAL_GetTick>
 80030f2:	1b40      	subs	r0, r0, r5
 80030f4:	2802      	cmp	r0, #2
 80030f6:	d9f0      	bls.n	80030da <HAL_RCC_OscConfig+0x4d2>
 80030f8:	e626      	b.n	8002d48 <HAL_RCC_OscConfig+0x140>
 80030fa:	bf00      	nop
 80030fc:	40007000 	.word	0x40007000
 8003100:	f99d808c 	.word	0xf99d808c
 8003104:	feeefffc 	.word	0xfeeefffc

08003108 <HAL_RCC_ClockConfig>:
{
 8003108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800310c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800310e:	4604      	mov	r4, r0
 8003110:	b910      	cbnz	r0, 8003118 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003112:	2001      	movs	r0, #1
}
 8003114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4a4b      	ldr	r2, [pc, #300]	; (8003248 <HAL_RCC_ClockConfig+0x140>)
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	428b      	cmp	r3, r1
 8003122:	d32c      	bcc.n	800317e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	6820      	ldr	r0, [r4, #0]
 8003126:	0786      	lsls	r6, r0, #30
 8003128:	d434      	bmi.n	8003194 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	07c1      	lsls	r1, r0, #31
 800312c:	d43f      	bmi.n	80031ae <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312e:	6821      	ldr	r1, [r4, #0]
 8003130:	078a      	lsls	r2, r1, #30
 8003132:	d468      	bmi.n	8003206 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4a44      	ldr	r2, [pc, #272]	; (8003248 <HAL_RCC_ClockConfig+0x140>)
 8003136:	6813      	ldr	r3, [r2, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	42ab      	cmp	r3, r5
 800313e:	d86f      	bhi.n	8003220 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	f011 0f04 	tst.w	r1, #4
 8003144:	4d41      	ldr	r5, [pc, #260]	; (800324c <HAL_RCC_ClockConfig+0x144>)
 8003146:	d177      	bne.n	8003238 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	070b      	lsls	r3, r1, #28
 800314a:	d506      	bpl.n	800315a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314c:	68ab      	ldr	r3, [r5, #8]
 800314e:	6922      	ldr	r2, [r4, #16]
 8003150:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003154:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003158:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800315a:	f7ff fd07 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 800315e:	68ab      	ldr	r3, [r5, #8]
 8003160:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <HAL_RCC_ClockConfig+0x148>)
 8003162:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	40d8      	lsrs	r0, r3
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_RCC_ClockConfig+0x14c>)
 8003174:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <HAL_RCC_ClockConfig+0x150>)
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	f7fe bcd7 	b.w	8001b2c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	6813      	ldr	r3, [r2, #0]
 8003180:	f023 0307 	bic.w	r3, r3, #7
 8003184:	430b      	orrs	r3, r1
 8003186:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	428b      	cmp	r3, r1
 8003190:	d1bf      	bne.n	8003112 <HAL_RCC_ClockConfig+0xa>
 8003192:	e7c7      	b.n	8003124 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003194:	4a2d      	ldr	r2, [pc, #180]	; (800324c <HAL_RCC_ClockConfig+0x144>)
 8003196:	68a6      	ldr	r6, [r4, #8]
 8003198:	6891      	ldr	r1, [r2, #8]
 800319a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800319e:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	bf81      	itttt	hi
 80031a2:	6893      	ldrhi	r3, [r2, #8]
 80031a4:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 80031a8:	4333      	orrhi	r3, r6
 80031aa:	6093      	strhi	r3, [r2, #8]
 80031ac:	e7bd      	b.n	800312a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ae:	6862      	ldr	r2, [r4, #4]
 80031b0:	4e26      	ldr	r6, [pc, #152]	; (800324c <HAL_RCC_ClockConfig+0x144>)
 80031b2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b4:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b6:	d11a      	bne.n	80031ee <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031bc:	d0a9      	beq.n	8003112 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031be:	68b3      	ldr	r3, [r6, #8]
 80031c0:	f023 0303 	bic.w	r3, r3, #3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80031c8:	f7fe fcf8 	bl	8001bbc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80031d0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	68b3      	ldr	r3, [r6, #8]
 80031d4:	6862      	ldr	r2, [r4, #4]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031de:	d0a6      	beq.n	800312e <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe fcec 	bl	8001bbc <HAL_GetTick>
 80031e4:	1bc0      	subs	r0, r0, r7
 80031e6:	4540      	cmp	r0, r8
 80031e8:	d9f3      	bls.n	80031d2 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80031ea:	2003      	movs	r0, #3
 80031ec:	e792      	b.n	8003114 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	2a02      	cmp	r2, #2
 80031f0:	d102      	bne.n	80031f8 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031f6:	e7e1      	b.n	80031bc <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031f8:	b912      	cbnz	r2, 8003200 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031fa:	f013 0f02 	tst.w	r3, #2
 80031fe:	e7dd      	b.n	80031bc <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003200:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003204:	e7da      	b.n	80031bc <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <HAL_RCC_ClockConfig+0x144>)
 8003208:	68a6      	ldr	r6, [r4, #8]
 800320a:	6890      	ldr	r0, [r2, #8]
 800320c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8003210:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003212:	bf3f      	itttt	cc
 8003214:	6893      	ldrcc	r3, [r2, #8]
 8003216:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800321a:	4333      	orrcc	r3, r6
 800321c:	6093      	strcc	r3, [r2, #8]
 800321e:	e789      	b.n	8003134 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	432b      	orrs	r3, r5
 8003228:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	6813      	ldr	r3, [r2, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	42ab      	cmp	r3, r5
 8003232:	f47f af6e 	bne.w	8003112 <HAL_RCC_ClockConfig+0xa>
 8003236:	e783      	b.n	8003140 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003238:	68ab      	ldr	r3, [r5, #8]
 800323a:	68e2      	ldr	r2, [r4, #12]
 800323c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003240:	4313      	orrs	r3, r2
 8003242:	60ab      	str	r3, [r5, #8]
 8003244:	e780      	b.n	8003148 <HAL_RCC_ClockConfig+0x40>
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000
 800324c:	40021000 	.word	0x40021000
 8003250:	0800f804 	.word	0x0800f804
 8003254:	20000000 	.word	0x20000000
 8003258:	20000008 	.word	0x20000008

0800325c <HAL_RCC_GetHCLKFreq>:
}
 800325c:	4b01      	ldr	r3, [pc, #4]	; (8003264 <HAL_RCC_GetHCLKFreq+0x8>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x18>)
 800326a:	4a06      	ldr	r2, [pc, #24]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003276:	6810      	ldr	r0, [r2, #0]
 8003278:	f003 031f 	and.w	r3, r3, #31
}
 800327c:	40d8      	lsrs	r0, r3
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	0800f814 	.word	0x0800f814
 8003288:	20000000 	.word	0x20000000

0800328c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800328e:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800329a:	6810      	ldr	r0, [r2, #0]
 800329c:	f003 031f 	and.w	r3, r3, #31
}
 80032a0:	40d8      	lsrs	r0, r3
 80032a2:	4770      	bx	lr
 80032a4:	40021000 	.word	0x40021000
 80032a8:	0800f814 	.word	0x0800f814
 80032ac:	20000000 	.word	0x20000000

080032b0 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80032b0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80032b4:	4a33      	ldr	r2, [pc, #204]	; (8003384 <RCCEx_GetSAIxPeriphCLKFreq+0xd4>)
 80032b6:	d108      	bne.n	80032ca <RCCEx_GetSAIxPeriphCLKFreq+0x1a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80032b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80032c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032c4:	d129      	bne.n	800331a <RCCEx_GetSAIxPeriphCLKFreq+0x6a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80032c6:	4830      	ldr	r0, [pc, #192]	; (8003388 <RCCEx_GetSAIxPeriphCLKFreq+0xd8>)
 80032c8:	4770      	bx	lr
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80032ca:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80032ce:	d128      	bne.n	8003322 <RCCEx_GetSAIxPeriphCLKFreq+0x72>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80032d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032d4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80032d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032dc:	d0f3      	beq.n	80032c6 <RCCEx_GetSAIxPeriphCLKFreq+0x16>
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80032de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032e2:	d149      	bne.n	8003378 <RCCEx_GetSAIxPeriphCLKFreq+0xc8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80032e4:	6810      	ldr	r0, [r2, #0]
 80032e6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80032ea:	d04a      	beq.n	8003382 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
 80032ec:	68d0      	ldr	r0, [r2, #12]
 80032ee:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 80032f2:	d046      	beq.n	8003382 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80032f4:	68d0      	ldr	r0, [r2, #12]
 80032f6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80032fa:	3001      	adds	r0, #1
 80032fc:	fbb1 f0f0 	udiv	r0, r1, r0
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003300:	68d1      	ldr	r1, [r2, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003302:	68d3      	ldr	r3, [r2, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003304:	f3c1 2106 	ubfx	r1, r1, #8, #7
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8003308:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800330c:	bf14      	ite	ne
 800330e:	2311      	movne	r3, #17
 8003310:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003312:	4348      	muls	r0, r1
 8003314:	fbb0 f0f3 	udiv	r0, r0, r3
 8003318:	4770      	bx	lr
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800331a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800331e:	d0e1      	beq.n	80032e4 <RCCEx_GetSAIxPeriphCLKFreq+0x34>
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003320:	b993      	cbnz	r3, 8003348 <RCCEx_GetSAIxPeriphCLKFreq+0x98>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003322:	6810      	ldr	r0, [r2, #0]
 8003324:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8003328:	d02b      	beq.n	8003382 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
 800332a:	6910      	ldr	r0, [r2, #16]
 800332c:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8003330:	d027      	beq.n	8003382 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003332:	68d3      	ldr	r3, [r2, #12]
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003334:	6910      	ldr	r0, [r2, #16]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003336:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800333a:	3301      	adds	r3, #1
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800333c:	f3c0 2006 	ubfx	r0, r0, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003340:	fbb1 f1f3 	udiv	r1, r1, r3
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003344:	6913      	ldr	r3, [r2, #16]
 8003346:	e7df      	b.n	8003308 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334c:	d112      	bne.n	8003374 <RCCEx_GetSAIxPeriphCLKFreq+0xc4>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800334e:	6810      	ldr	r0, [r2, #0]
 8003350:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8003354:	d015      	beq.n	8003382 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
 8003356:	6950      	ldr	r0, [r2, #20]
 8003358:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800335c:	d011      	beq.n	8003382 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800335e:	68d3      	ldr	r3, [r2, #12]
 8003360:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003364:	3301      	adds	r3, #1
 8003366:	fbb1 f0f3 	udiv	r0, r1, r3
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800336a:	6951      	ldr	r1, [r2, #20]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800336c:	6953      	ldr	r3, [r2, #20]
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800336e:	f3c1 2106 	ubfx	r1, r1, #8, #7
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8003372:	e7c9      	b.n	8003308 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 8003374:	2000      	movs	r0, #0
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003376:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0d2      	beq.n	8003322 <RCCEx_GetSAIxPeriphCLKFreq+0x72>
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003380:	e7e4      	b.n	800334c <RCCEx_GetSAIxPeriphCLKFreq+0x9c>
}
 8003382:	4770      	bx	lr
 8003384:	40021000 	.word	0x40021000
 8003388:	001fff68 	.word	0x001fff68

0800338c <RCCEx_PLLSAI1_Config>:
{
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800338e:	4c43      	ldr	r4, [pc, #268]	; (800349c <RCCEx_PLLSAI1_Config+0x110>)
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003390:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003392:	68e2      	ldr	r2, [r4, #12]
{
 8003394:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003396:	0790      	lsls	r0, r2, #30
{
 8003398:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800339a:	d029      	beq.n	80033f0 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800339c:	68e2      	ldr	r2, [r4, #12]
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d178      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 80033a6:	2a00      	cmp	r2, #0
 80033a8:	d076      	beq.n	8003498 <RCCEx_PLLSAI1_Config+0x10c>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033aa:	68e3      	ldr	r3, [r4, #12]
       ||
 80033ac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80033b2:	3301      	adds	r3, #1
       ||
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d16f      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0x10c>
    __HAL_RCC_PLLSAI1_DISABLE();
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033be:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80033c0:	f7fe fbfc 	bl	8001bbc <HAL_GetTick>
 80033c4:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	011a      	lsls	r2, r3, #4
 80033ca:	d430      	bmi.n	800342e <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033cc:	68ab      	ldr	r3, [r5, #8]
 80033ce:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80033d0:	b3a6      	cbz	r6, 800343c <RCCEx_PLLSAI1_Config+0xb0>
      else if(Divider == DIVIDER_Q_UPDATE)
 80033d2:	2e01      	cmp	r6, #1
 80033d4:	d14d      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d6:	692a      	ldr	r2, [r5, #16]
 80033d8:	6921      	ldr	r1, [r4, #16]
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	1e53      	subs	r3, r2, #1
 80033de:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80033e2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80033e6:	433a      	orrs	r2, r7
 80033e8:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80033ec:	6122      	str	r2, [r4, #16]
 80033ee:	e030      	b.n	8003452 <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d011      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x8c>
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d013      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x94>
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d14d      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003402:	d049      	beq.n	8003498 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003404:	68e0      	ldr	r0, [r4, #12]
 8003406:	686a      	ldr	r2, [r5, #4]
 8003408:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800340c:	3a01      	subs	r2, #1
 800340e:	4318      	orrs	r0, r3
 8003410:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003414:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8003416:	e7cf      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003418:	6822      	ldr	r2, [r4, #0]
 800341a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800341e:	e7f0      	b.n	8003402 <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003420:	6822      	ldr	r2, [r4, #0]
 8003422:	0391      	lsls	r1, r2, #14
 8003424:	d4ee      	bmi.n	8003404 <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800342c:	e7e9      	b.n	8003402 <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800342e:	f7fe fbc5 	bl	8001bbc <HAL_GetTick>
 8003432:	1bc0      	subs	r0, r0, r7
 8003434:	2802      	cmp	r0, #2
 8003436:	d9c6      	bls.n	80033c6 <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8003438:	2003      	movs	r0, #3
}
 800343a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800343c:	6921      	ldr	r1, [r4, #16]
 800343e:	68eb      	ldr	r3, [r5, #12]
 8003440:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8003444:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	4339      	orrs	r1, r7
 800344c:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8003450:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003458:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800345a:	f7fe fbaf 	bl	8001bbc <HAL_GetTick>
 800345e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	d512      	bpl.n	800348c <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003466:	6923      	ldr	r3, [r4, #16]
 8003468:	69aa      	ldr	r2, [r5, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	6123      	str	r3, [r4, #16]
 800346e:	2000      	movs	r0, #0
  return status;
 8003470:	e7e3      	b.n	800343a <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003472:	696b      	ldr	r3, [r5, #20]
 8003474:	6922      	ldr	r2, [r4, #16]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	1e59      	subs	r1, r3, #1
 800347a:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800347e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003482:	433b      	orrs	r3, r7
 8003484:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003488:	6123      	str	r3, [r4, #16]
 800348a:	e7e2      	b.n	8003452 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800348c:	f7fe fb96 	bl	8001bbc <HAL_GetTick>
 8003490:	1b80      	subs	r0, r0, r6
 8003492:	2802      	cmp	r0, #2
 8003494:	d9e4      	bls.n	8003460 <RCCEx_PLLSAI1_Config+0xd4>
 8003496:	e7cf      	b.n	8003438 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 8003498:	2001      	movs	r0, #1
 800349a:	e7ce      	b.n	800343a <RCCEx_PLLSAI1_Config+0xae>
 800349c:	40021000 	.word	0x40021000

080034a0 <RCCEx_PLLSAI2_Config>:
{
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a2:	4c3c      	ldr	r4, [pc, #240]	; (8003594 <RCCEx_PLLSAI2_Config+0xf4>)
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034a4:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a6:	68e2      	ldr	r2, [r4, #12]
{
 80034a8:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034aa:	0790      	lsls	r0, r2, #30
{
 80034ac:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ae:	d027      	beq.n	8003500 <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034b0:	68e2      	ldr	r2, [r4, #12]
 80034b2:	f002 0203 	and.w	r2, r2, #3
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d169      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xee>
       ||
 80034ba:	2a00      	cmp	r2, #0
 80034bc:	d067      	beq.n	800358e <RCCEx_PLLSAI2_Config+0xee>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034be:	68e3      	ldr	r3, [r4, #12]
       ||
 80034c0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80034c6:	3301      	adds	r3, #1
       ||
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d160      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xee>
    __HAL_RCC_PLLSAI2_DISABLE();
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80034d4:	f7fe fb72 	bl	8001bbc <HAL_GetTick>
 80034d8:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	009a      	lsls	r2, r3, #2
 80034de:	d42e      	bmi.n	800353e <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034e0:	68ab      	ldr	r3, [r5, #8]
 80034e2:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80034e4:	b396      	cbz	r6, 800354c <RCCEx_PLLSAI2_Config+0xac>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034e6:	6963      	ldr	r3, [r4, #20]
 80034e8:	6929      	ldr	r1, [r5, #16]
 80034ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034ee:	0849      	lsrs	r1, r1, #1
 80034f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034f4:	3901      	subs	r1, #1
 80034f6:	4303      	orrs	r3, r0
 80034f8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80034fc:	6163      	str	r3, [r4, #20]
 80034fe:	e030      	b.n	8003562 <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8003500:	2b02      	cmp	r3, #2
 8003502:	d011      	beq.n	8003528 <RCCEx_PLLSAI2_Config+0x88>
 8003504:	2b03      	cmp	r3, #3
 8003506:	d013      	beq.n	8003530 <RCCEx_PLLSAI2_Config+0x90>
 8003508:	2b01      	cmp	r3, #1
 800350a:	d140      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800350c:	6822      	ldr	r2, [r4, #0]
 800350e:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003512:	d03c      	beq.n	800358e <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003514:	68e0      	ldr	r0, [r4, #12]
 8003516:	686a      	ldr	r2, [r5, #4]
 8003518:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800351c:	3a01      	subs	r2, #1
 800351e:	4318      	orrs	r0, r3
 8003520:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003524:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8003526:	e7d1      	b.n	80034cc <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800352e:	e7f0      	b.n	8003512 <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	0391      	lsls	r1, r2, #14
 8003534:	d4ee      	bmi.n	8003514 <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800353c:	e7e9      	b.n	8003512 <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800353e:	f7fe fb3d 	bl	8001bbc <HAL_GetTick>
 8003542:	1bc0      	subs	r0, r0, r7
 8003544:	2802      	cmp	r0, #2
 8003546:	d9c8      	bls.n	80034da <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 8003548:	2003      	movs	r0, #3
}
 800354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800354c:	6962      	ldr	r2, [r4, #20]
 800354e:	68eb      	ldr	r3, [r5, #12]
 8003550:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8003554:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	4302      	orrs	r2, r0
 800355c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8003560:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800356a:	f7fe fb27 	bl	8001bbc <HAL_GetTick>
 800356e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	d505      	bpl.n	8003582 <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003576:	6963      	ldr	r3, [r4, #20]
 8003578:	696a      	ldr	r2, [r5, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	6163      	str	r3, [r4, #20]
 800357e:	2000      	movs	r0, #0
  return status;
 8003580:	e7e3      	b.n	800354a <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003582:	f7fe fb1b 	bl	8001bbc <HAL_GetTick>
 8003586:	1b80      	subs	r0, r0, r6
 8003588:	2802      	cmp	r0, #2
 800358a:	d9f1      	bls.n	8003570 <RCCEx_PLLSAI2_Config+0xd0>
 800358c:	e7dc      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 800358e:	2001      	movs	r0, #1
 8003590:	e7db      	b.n	800354a <RCCEx_PLLSAI2_Config+0xaa>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003598:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800359c:	6806      	ldr	r6, [r0, #0]
 800359e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80035a2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035a4:	d009      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80035a6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80035a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80035ac:	d022      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035ae:	d813      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80035b0:	b331      	cbz	r1, 8003600 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80035b2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80035b6:	d02a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035b8:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	04d8      	lsls	r0, r3, #19
 80035be:	d509      	bpl.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80035c0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80035c2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80035c6:	d02c      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80035c8:	d826      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80035ca:	b381      	cbz	r1, 800362e <HAL_RCCEx_PeriphCLKConfig+0x96>
 80035cc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80035d0:	d070      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80035d2:	2601      	movs	r6, #1
 80035d4:	4635      	mov	r5, r6
 80035d6:	e039      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80035d8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80035dc:	d1ec      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035de:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80035e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80035ea:	430b      	orrs	r3, r1
 80035ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80035f0:	2600      	movs	r6, #0
 80035f2:	e7e2      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035f4:	4a35      	ldr	r2, [pc, #212]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035f6:	68d3      	ldr	r3, [r2, #12]
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80035fe:	e7ee      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003600:	3004      	adds	r0, #4
 8003602:	f7ff fec3 	bl	800338c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003606:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003608:	2800      	cmp	r0, #0
 800360a:	d1d6      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x22>
 800360c:	e7e7      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800360e:	2100      	movs	r1, #0
 8003610:	3020      	adds	r0, #32
 8003612:	f7ff ff45 	bl	80034a0 <RCCEx_PLLSAI2_Config>
 8003616:	e7f6      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003618:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800361c:	d1d9      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800361e:	4635      	mov	r5, r6
 8003620:	e009      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003622:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003624:	68d3      	ldr	r3, [r2, #12]
 8003626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362a:	60d3      	str	r3, [r2, #12]
      break;
 800362c:	e7f7      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800362e:	1d20      	adds	r0, r4, #4
 8003630:	f7ff feac 	bl	800338c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003634:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003636:	2d00      	cmp	r5, #0
 8003638:	d142      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800363a:	4a24      	ldr	r2, [pc, #144]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800363c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800363e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003642:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003646:	430b      	orrs	r3, r1
 8003648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	0399      	lsls	r1, r3, #14
 8003650:	f140 815e 	bpl.w	8003910 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003654:	4f1d      	ldr	r7, [pc, #116]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003658:	00da      	lsls	r2, r3, #3
 800365a:	d433      	bmi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003662:	65bb      	str	r3, [r7, #88]	; 0x58
 8003664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800366e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003672:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80036d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003676:	f8d9 3000 	ldr.w	r3, [r9]
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8003682:	f7fe fa9b 	bl	8001bbc <HAL_GetTick>
 8003686:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003688:	f8d9 3000 	ldr.w	r3, [r9]
 800368c:	05db      	lsls	r3, r3, #23
 800368e:	d521      	bpl.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8003690:	bb3d      	cbnz	r5, 80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003696:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800369a:	f040 810f 	bne.w	80038bc <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036a2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80036a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036b0:	4635      	mov	r5, r6
 80036b2:	e016      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036b4:	2100      	movs	r1, #0
 80036b6:	f104 0020 	add.w	r0, r4, #32
 80036ba:	f7ff fef1 	bl	80034a0 <RCCEx_PLLSAI2_Config>
 80036be:	e7b9      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80036c0:	462e      	mov	r6, r5
 80036c2:	e7c3      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80036c4:	f04f 0800 	mov.w	r8, #0
 80036c8:	e7d3      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fe fa72 	bl	8001bbc <HAL_GetTick>
 80036d8:	eba0 000a 	sub.w	r0, r0, sl
 80036dc:	2802      	cmp	r0, #2
 80036de:	d9d3      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80036e0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80036e2:	f1b8 0f00 	cmp.w	r8, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ee:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	07da      	lsls	r2, r3, #31
 80036f4:	d508      	bpl.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f6:	499d      	ldr	r1, [pc, #628]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80036f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80036fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80036fe:	f022 0203 	bic.w	r2, r2, #3
 8003702:	4302      	orrs	r2, r0
 8003704:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003708:	079f      	lsls	r7, r3, #30
 800370a:	d508      	bpl.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800370c:	4997      	ldr	r1, [pc, #604]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800370e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003710:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003714:	f022 020c 	bic.w	r2, r2, #12
 8003718:	4302      	orrs	r2, r0
 800371a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800371e:	075e      	lsls	r6, r3, #29
 8003720:	d508      	bpl.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003722:	4992      	ldr	r1, [pc, #584]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003724:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003726:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800372a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800372e:	4302      	orrs	r2, r0
 8003730:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003734:	0718      	lsls	r0, r3, #28
 8003736:	d508      	bpl.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003738:	498c      	ldr	r1, [pc, #560]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800373a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800373c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003740:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003744:	4302      	orrs	r2, r0
 8003746:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800374a:	06d9      	lsls	r1, r3, #27
 800374c:	d508      	bpl.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800374e:	4987      	ldr	r1, [pc, #540]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003750:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003752:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800375a:	4302      	orrs	r2, r0
 800375c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003760:	069a      	lsls	r2, r3, #26
 8003762:	d508      	bpl.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003764:	4981      	ldr	r1, [pc, #516]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003766:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003768:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800376c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003770:	4302      	orrs	r2, r0
 8003772:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003776:	059f      	lsls	r7, r3, #22
 8003778:	d508      	bpl.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800377a:	497c      	ldr	r1, [pc, #496]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800377c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800377e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003782:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003786:	4302      	orrs	r2, r0
 8003788:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800378c:	055e      	lsls	r6, r3, #21
 800378e:	d508      	bpl.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003790:	4976      	ldr	r1, [pc, #472]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003792:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003794:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003798:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800379c:	4302      	orrs	r2, r0
 800379e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a2:	0658      	lsls	r0, r3, #25
 80037a4:	d508      	bpl.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a6:	4971      	ldr	r1, [pc, #452]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80037a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80037aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80037b2:	4302      	orrs	r2, r0
 80037b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b8:	0619      	lsls	r1, r3, #24
 80037ba:	d508      	bpl.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037bc:	496b      	ldr	r1, [pc, #428]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80037be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037c4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80037c8:	4302      	orrs	r2, r0
 80037ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ce:	05da      	lsls	r2, r3, #23
 80037d0:	d508      	bpl.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d2:	4966      	ldr	r1, [pc, #408]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80037d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037da:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80037de:	4302      	orrs	r2, r0
 80037e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037e4:	049b      	lsls	r3, r3, #18
 80037e6:	d510      	bpl.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037e8:	4a60      	ldr	r2, [pc, #384]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80037ea:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80037ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037f0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80037f4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037fe:	f040 8089 	bne.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003802:	68d3      	ldr	r3, [r2, #12]
 8003804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003808:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	031f      	lsls	r7, r3, #12
 800380e:	d510      	bpl.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003812:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003814:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003818:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800381c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800381e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003822:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003826:	f040 8081 	bne.w	800392c <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382a:	68d3      	ldr	r3, [r2, #12]
 800382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003830:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	035e      	lsls	r6, r3, #13
 8003836:	d50f      	bpl.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003838:	4a4c      	ldr	r2, [pc, #304]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800383a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800383c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003840:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003844:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003846:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800384a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800384e:	d179      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003850:	68d3      	ldr	r3, [r2, #12]
 8003852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003856:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	0458      	lsls	r0, r3, #17
 800385c:	d512      	bpl.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800385e:	4943      	ldr	r1, [pc, #268]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003860:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003862:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003866:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800386a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800386c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003874:	d171      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003876:	2102      	movs	r1, #2
 8003878:	1d20      	adds	r0, r4, #4
 800387a:	f7ff fd87 	bl	800338c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800387e:	2800      	cmp	r0, #0
 8003880:	bf18      	it	ne
 8003882:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	0411      	lsls	r1, r2, #16
 8003888:	d508      	bpl.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800388a:	4938      	ldr	r1, [pc, #224]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800388c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800388e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003892:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003896:	4303      	orrs	r3, r0
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800389c:	03d3      	lsls	r3, r2, #15
 800389e:	d509      	bpl.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038a0:	4a32      	ldr	r2, [pc, #200]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80038a2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80038a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ae:	430b      	orrs	r3, r1
 80038b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80038b4:	4628      	mov	r0, r5
 80038b6:	b002      	add	sp, #8
 80038b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038bc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80038c0:	4293      	cmp	r3, r2
 80038c2:	f43f aeec 	beq.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038da:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038e2:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80038e8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ec:	f57f aed7 	bpl.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80038f0:	f7fe f964 	bl	8001bbc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80038f8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038fe:	0799      	lsls	r1, r3, #30
 8003900:	f53f aecd 	bmi.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fe f95a 	bl	8001bbc <HAL_GetTick>
 8003908:	1b40      	subs	r0, r0, r5
 800390a:	4548      	cmp	r0, r9
 800390c:	d9f5      	bls.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x362>
 800390e:	e6e7      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003910:	4635      	mov	r5, r6
 8003912:	e6ed      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003914:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003918:	f47f af77 	bne.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800391c:	2101      	movs	r1, #1
 800391e:	1d20      	adds	r0, r4, #4
 8003920:	f7ff fd34 	bl	800338c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003924:	2800      	cmp	r0, #0
 8003926:	bf18      	it	ne
 8003928:	4605      	movne	r5, r0
 800392a:	e76e      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800392c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003930:	f47f af7f 	bne.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003934:	2101      	movs	r1, #1
 8003936:	1d20      	adds	r0, r4, #4
 8003938:	f7ff fd28 	bl	800338c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800393c:	2800      	cmp	r0, #0
 800393e:	bf18      	it	ne
 8003940:	4605      	movne	r5, r0
 8003942:	e776      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003944:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003948:	d186      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800394a:	2101      	movs	r1, #1
 800394c:	1d20      	adds	r0, r4, #4
 800394e:	f7ff fd1d 	bl	800338c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003952:	2800      	cmp	r0, #0
 8003954:	bf18      	it	ne
 8003956:	4605      	movne	r5, r0
 8003958:	e77e      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800395a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800395e:	d191      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003960:	2102      	movs	r1, #2
 8003962:	f104 0020 	add.w	r0, r4, #32
 8003966:	f7ff fd9b 	bl	80034a0 <RCCEx_PLLSAI2_Config>
 800396a:	e788      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003970:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
{
 8003974:	b430      	push	{r4, r5}
 8003976:	4dab      	ldr	r5, [pc, #684]	; (8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003978:	d11b      	bne.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800397a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	d07f      	beq.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8003988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d157      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003994:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
        frequency = LSE_VALUE;
 8003998:	f010 0002 	ands.w	r0, r0, #2
 800399c:	bf18      	it	ne
 800399e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80039a2:	e0f4      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039a4:	6828      	ldr	r0, [r5, #0]
        frequency = HSE_VALUE / 32U;
 80039a6:	4ba0      	ldr	r3, [pc, #640]	; (8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80039a8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
            frequency = HSI_VALUE;
 80039ac:	bf18      	it	ne
 80039ae:	4618      	movne	r0, r3
 80039b0:	e0ed      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b2:	68eb      	ldr	r3, [r5, #12]
 80039b4:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d02c      	beq.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d031      	beq.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d134      	bne.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80039c4:	6829      	ldr	r1, [r5, #0]
 80039c6:	f011 0102 	ands.w	r1, r1, #2
 80039ca:	d00c      	beq.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	4a97      	ldr	r2, [pc, #604]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80039d0:	0719      	lsls	r1, r3, #28
 80039d2:	bf4b      	itete	mi
 80039d4:	682b      	ldrmi	r3, [r5, #0]
 80039d6:	f8d5 3094 	ldrpl.w	r3, [r5, #148]	; 0x94
 80039da:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 80039de:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80039e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    switch(PeriphClk)
 80039e6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80039ea:	f000 818e 	beq.w	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80039ee:	d82b      	bhi.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80039f0:	2810      	cmp	r0, #16
 80039f2:	f000 812f 	beq.w	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80039f6:	d81c      	bhi.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 80039f8:	3801      	subs	r0, #1
 80039fa:	2807      	cmp	r0, #7
 80039fc:	d822      	bhi.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 80039fe:	2807      	cmp	r0, #7
 8003a00:	d820      	bhi.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8003a02:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003a06:	00e0      	.short	0x00e0
 8003a08:	001f00ef 	.word	0x001f00ef
 8003a0c:	001f0101 	.word	0x001f0101
 8003a10:	001f001f 	.word	0x001f001f
 8003a14:	0119      	.short	0x0119
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a16:	6829      	ldr	r1, [r5, #0]
        pllvco = HSI_VALUE;
 8003a18:	4b85      	ldr	r3, [pc, #532]	; (8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003a1a:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
        pllvco = HSE_VALUE;
 8003a1e:	bf18      	it	ne
 8003a20:	4619      	movne	r1, r3
 8003a22:	e7e0      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a24:	6829      	ldr	r1, [r5, #0]
        pllvco = HSE_VALUE;
 8003a26:	4b83      	ldr	r3, [pc, #524]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003a28:	f411 3100 	ands.w	r1, r1, #131072	; 0x20000
 8003a2c:	e7f7      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
    switch(pll_oscsource)
 8003a2e:	2100      	movs	r1, #0
 8003a30:	e7d9      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    switch(PeriphClk)
 8003a32:	2840      	cmp	r0, #64	; 0x40
 8003a34:	f000 814e 	beq.w	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8003a38:	2880      	cmp	r0, #128	; 0x80
 8003a3a:	f000 815b 	beq.w	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003a3e:	2820      	cmp	r0, #32
 8003a40:	f000 8118 	beq.w	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8003a44:	2000      	movs	r0, #0
  return(frequency);
 8003a46:	e0a2      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
    switch(PeriphClk)
 8003a48:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003a4c:	f000 808a 	beq.w	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003a50:	d822      	bhi.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8003a52:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003a56:	f000 8166 	beq.w	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003a5a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003a5e:	f000 8081 	beq.w	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003a62:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003a66:	d1ed      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003a68:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003a6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 8003a70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a74:	f000 816b 	beq.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003a78:	f200 8152 	bhi.w	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8136 	beq.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003a82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a86:	d1dd      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003a88:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
              frequency = LSI_VALUE;
 8003a8c:	f010 0002 	ands.w	r0, r0, #2
 8003a90:	bf18      	it	ne
 8003a92:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8003a96:	e07a      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
    switch(PeriphClk)
 8003a98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003a9c:	f000 8153 	beq.w	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8003aa0:	d82e      	bhi.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8003aa2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003aa6:	d036      	beq.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8003aa8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003aac:	d1ca      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003aae:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        switch(srcclk)
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	f000 80ea 	beq.w	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003abe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ac2:	f000 809c 	beq.w	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aca:	d1bb      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003acc:	6828      	ldr	r0, [r5, #0]
 8003ace:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8003ad2:	d05c      	beq.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
 8003ad4:	6928      	ldr	r0, [r5, #16]
 8003ad6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003ada:	d058      	beq.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003adc:	692b      	ldr	r3, [r5, #16]
 8003ade:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ae2:	434b      	muls	r3, r1
 8003ae4:	68e9      	ldr	r1, [r5, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003ae6:	6928      	ldr	r0, [r5, #16]
 8003ae8:	f3c0 6041 	ubfx	r0, r0, #25, #2
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003aec:	f3c1 1102 	ubfx	r1, r1, #4, #3
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003af0:	3001      	adds	r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003af2:	3101      	adds	r1, #1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003af4:	0040      	lsls	r0, r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003af6:	fbb3 f3f1 	udiv	r3, r3, r1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003afa:	fbb3 f0f0 	udiv	r0, r3, r0
 8003afe:	e046      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
    switch(PeriphClk)
 8003b00:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003b04:	f000 80e1 	beq.w	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
 8003b08:	d39c      	bcc.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8003b0a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8003b0e:	d002      	beq.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8003b10:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8003b14:	d196      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003b16:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003b1a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 8003b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b22:	d036      	beq.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8003b24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b28:	d01f      	beq.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
 8003b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b2e:	d189      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003b30:	6828      	ldr	r0, [r5, #0]
 8003b32:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8003b36:	d02a      	beq.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003b38:	6928      	ldr	r0, [r5, #16]
 8003b3a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8003b3e:	d026      	beq.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003b40:	692a      	ldr	r2, [r5, #16]
 8003b42:	f3c2 2206 	ubfx	r2, r2, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b46:	434a      	muls	r2, r1
 8003b48:	68e9      	ldr	r1, [r5, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003b4a:	6928      	ldr	r0, [r5, #16]
 8003b4c:	f3c0 5041 	ubfx	r0, r0, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b50:	f3c1 1102 	ubfx	r1, r1, #4, #3
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003b54:	3001      	adds	r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b56:	3101      	adds	r1, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003b58:	0040      	lsls	r0, r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b5a:	fbb2 f2f1 	udiv	r2, r2, r1
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003b5e:	fbb2 f0f0 	udiv	r0, r2, r0
 8003b62:	e014      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
}
 8003b64:	bc30      	pop	{r4, r5}
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003b66:	f7ff bba3 	b.w	80032b0 <RCCEx_GetSAIxPeriphCLKFreq>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003b6a:	6828      	ldr	r0, [r5, #0]
 8003b6c:	f010 0002 	ands.w	r0, r0, #2
 8003b70:	d00d      	beq.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003b72:	682b      	ldr	r3, [r5, #0]
 8003b74:	071a      	lsls	r2, r3, #28
 8003b76:	bf4c      	ite	mi
 8003b78:	682b      	ldrmi	r3, [r5, #0]
 8003b7a:	f8d5 3094 	ldrpl.w	r3, [r5, #148]	; 0x94
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003b80:	bf4c      	ite	mi
 8003b82:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8003b86:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8003b8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 8003b8e:	bc30      	pop	{r4, r5}
 8003b90:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003b92:	6828      	ldr	r0, [r5, #0]
 8003b94:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8003b98:	d0f9      	beq.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003b9a:	68e8      	ldr	r0, [r5, #12]
 8003b9c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8003ba0:	d0f5      	beq.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003ba2:	68ec      	ldr	r4, [r5, #12]
 8003ba4:	f3c4 2406 	ubfx	r4, r4, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ba8:	434c      	muls	r4, r1
 8003baa:	68e9      	ldr	r1, [r5, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003bac:	68e8      	ldr	r0, [r5, #12]
 8003bae:	f3c0 5041 	ubfx	r0, r0, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003bb2:	f3c1 1102 	ubfx	r1, r1, #4, #3
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003bb6:	3001      	adds	r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003bb8:	3101      	adds	r1, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003bba:	0040      	lsls	r0, r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003bbc:	fbb4 f4f1 	udiv	r4, r4, r1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003bc0:	fbb4 f0f0 	udiv	r0, r4, r0
 8003bc4:	e7e3      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003bc6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003bca:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f000 80bd 	beq.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	f43f aedd 	beq.w	8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d00f      	beq.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
}
 8003bde:	bc30      	pop	{r4, r5}
          frequency = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7ff bb54 	b.w	800328c <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003be4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003be8:	f003 030c 	and.w	r3, r3, #12
        switch(srcclk)
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f000 80ae 	beq.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003bf2:	d807      	bhi.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d07a      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	f47f af23 	bne.w	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 8003bfe:	bc30      	pop	{r4, r5}
          frequency = HAL_RCC_GetSysClockFreq();
 8003c00:	f7fe bfb4 	b.w	8002b6c <HAL_RCC_GetSysClockFreq>
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	e6c4      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003c08:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003c0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	f000 809c 	beq.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003c16:	d803      	bhi.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d068      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	e7ec      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003c20:	2b30      	cmp	r3, #48	; 0x30
 8003c22:	e6b6      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8003c24:	40021000 	.word	0x40021000
 8003c28:	0003d090 	.word	0x0003d090
 8003c2c:	0800f81c 	.word	0x0800f81c
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	007a1200 	.word	0x007a1200
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003c38:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003c3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	f000 8084 	beq.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003c46:	d803      	bhi.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d050      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	e7d4      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003c50:	2bc0      	cmp	r3, #192	; 0xc0
 8003c52:	e69e      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003c54:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
        switch(srcclk)
 8003c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c60:	d075      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003c62:	d804      	bhi.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d042      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6c:	e7c5      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c72:	e68e      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003c74:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 8003c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c80:	d065      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003c82:	d803      	bhi.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8003c84:	b39b      	cbz	r3, 8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8a:	e7b6      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003c8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c90:	e67f      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003c92:	6828      	ldr	r0, [r5, #0]
 8003c94:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8003c98:	f43f af79 	beq.w	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
 8003c9c:	6968      	ldr	r0, [r5, #20]
 8003c9e:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003ca2:	f43f af74 	beq.w	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003ca6:	6968      	ldr	r0, [r5, #20]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ca8:	68eb      	ldr	r3, [r5, #12]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003caa:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cae:	4341      	muls	r1, r0
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003cb0:	6968      	ldr	r0, [r5, #20]
 8003cb2:	f3c0 6041 	ubfx	r0, r0, #25, #2
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cb6:	f3c3 1302 	ubfx	r3, r3, #4, #3
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003cba:	3001      	adds	r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cbc:	3301      	adds	r3, #1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003cbe:	0040      	lsls	r0, r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cc0:	fbb1 f1f3 	udiv	r1, r1, r3
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003cc4:	fbb1 f0f0 	udiv	r0, r1, r0
 8003cc8:	e761      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003cca:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	da85      	bge.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8003cd2:	e794      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003cd4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003cd8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d08d      	beq.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	d032      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f aeab 	bne.w	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 8003cee:	bc30      	pop	{r4, r5}
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7ff baba 	b.w	8003268 <HAL_RCC_GetPCLK1Freq>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003cf4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 8003cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d00:	f43f af7d 	beq.w	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d08:	e7ed      	b.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003d0a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d16:	f43f af72 	beq.w	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1e:	e7e2      	b.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8003d20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d24:	e635      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003d26:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003d2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 8003d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d32:	d00c      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8003d34:	d804      	bhi.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0d9      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3e:	e6a2      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8003d40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d44:	e625      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003d46:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
        switch(srcclk)
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	d5cf      	bpl.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d4e:	6828      	ldr	r0, [r5, #0]
            frequency = HSI_VALUE;
 8003d50:	4b01      	ldr	r3, [pc, #4]	; (8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8003d52:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003d56:	e629      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003d58:	00f42400 	.word	0x00f42400

08003d5c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d5c:	4a02      	ldr	r2, [pc, #8]	; (8003d68 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	6013      	str	r3, [r2, #0]
}
 8003d66:	4770      	bx	lr
 8003d68:	40021000 	.word	0x40021000

08003d6c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003d6e:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003d76:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8003d7a:	680b      	ldr	r3, [r1, #0]
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003d80:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8003d82:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8003d84:	b93a      	cbnz	r2, 8003d96 <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003d86:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003d92:	2003      	movs	r0, #3
      break;
 8003d94:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003d96:	680b      	ldr	r3, [r1, #0]
 8003d98:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 8003d9c:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003da0:	d1f0      	bne.n	8003d84 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	4618      	mov	r0, r3

  return status;
}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000000 	.word	0x20000000

08003dac <HAL_SAI_Init>:
{
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8003dae:	4604      	mov	r4, r0
 8003db0:	b910      	cbnz	r0, 8003db8 <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 8003db2:	2501      	movs	r5, #1
}
 8003db4:	4628      	mov	r0, r5
 8003db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 8003db8:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8003dbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dc0:	b91b      	cbnz	r3, 8003dca <HAL_SAI_Init+0x1e>
    hsai->Lock = HAL_UNLOCKED;
 8003dc2:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8003dc6:	f7fd fd13 	bl	80017f0 <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff ffce 	bl	8003d6c <SAI_Disable>
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d1ed      	bne.n	8003db2 <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  switch (hsai->Init.SynchroExt)
 8003ddc:	68e3      	ldr	r3, [r4, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	f000 809c 	beq.w	8003f1c <HAL_SAI_Init+0x170>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	bf14      	ite	ne
 8003de8:	2300      	movne	r3, #0
 8003dea:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 8003dec:	68a2      	ldr	r2, [r4, #8]
 8003dee:	2a02      	cmp	r2, #2
 8003df0:	f000 8098 	beq.w	8003f24 <HAL_SAI_Init+0x178>
 8003df4:	2a03      	cmp	r2, #3
 8003df6:	f000 8093 	beq.w	8003f20 <HAL_SAI_Init+0x174>
 8003dfa:	2a01      	cmp	r2, #1
 8003dfc:	bf14      	ite	ne
 8003dfe:	2600      	movne	r6, #0
 8003e00:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	494f      	ldr	r1, [pc, #316]	; (8003f44 <HAL_SAI_Init+0x198>)
 8003e08:	484f      	ldr	r0, [pc, #316]	; (8003f48 <HAL_SAI_Init+0x19c>)
 8003e0a:	428a      	cmp	r2, r1
 8003e0c:	d003      	beq.n	8003e16 <HAL_SAI_Init+0x6a>
 8003e0e:	4f4f      	ldr	r7, [pc, #316]	; (8003f4c <HAL_SAI_Init+0x1a0>)
 8003e10:	42ba      	cmp	r2, r7
 8003e12:	f040 808a 	bne.w	8003f2a <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
 8003e16:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003e1a:	69e3      	ldr	r3, [r4, #28]
 8003e1c:	b1eb      	cbz	r3, 8003e5a <HAL_SAI_Init+0xae>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003e1e:	428a      	cmp	r2, r1
 8003e20:	d003      	beq.n	8003e2a <HAL_SAI_Init+0x7e>
 8003e22:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_SAI_Init+0x1a0>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	f040 8083 	bne.w	8003f30 <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003e2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003e2e:	f7ff fd9f 	bl	8003970 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003e32:	69e3      	ldr	r3, [r4, #28]
 8003e34:	220a      	movs	r2, #10
 8003e36:	025b      	lsls	r3, r3, #9
 8003e38:	4350      	muls	r0, r2
 8003e3a:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8003e3e:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10U) > 8U)
 8003e42:	fb02 0013 	mls	r0, r2, r3, r0
 8003e46:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 8003e48:	bf08      	it	eq
 8003e4a:	3301      	addeq	r3, #1
 8003e4c:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003e4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e50:	2b04      	cmp	r3, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003e52:	bf02      	ittt	eq
 8003e54:	6a23      	ldreq	r3, [r4, #32]
 8003e56:	085b      	lsreq	r3, r3, #1
 8003e58:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003e5a:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003e5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003e5e:	f033 0102 	bics.w	r1, r3, #2
 8003e62:	d168      	bne.n	8003f36 <HAL_SAI_Init+0x18a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	bf18      	it	ne
 8003e68:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	4838      	ldr	r0, [pc, #224]	; (8003f50 <HAL_SAI_Init+0x1a4>)
 8003e70:	6817      	ldr	r7, [r2, #0]
 8003e72:	4038      	ands	r0, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003e74:	6b27      	ldr	r7, [r4, #48]	; 0x30
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003e76:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003e78:	433b      	orrs	r3, r7
 8003e7a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8003e7c:	6810      	ldr	r0, [r2, #0]
 8003e7e:	433b      	orrs	r3, r7
 8003e80:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8003e82:	433b      	orrs	r3, r7
 8003e84:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003e86:	433b      	orrs	r3, r7
 8003e88:	6927      	ldr	r7, [r4, #16]
 8003e8a:	433b      	orrs	r3, r7
 8003e8c:	6967      	ldr	r7, [r4, #20]
 8003e8e:	433b      	orrs	r3, r7
 8003e90:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003e92:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003e94:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8003e98:	4333      	orrs	r3, r6
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003e9e:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003ea0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003ea2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ea6:	f023 030f 	bic.w	r3, r3, #15
 8003eaa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003eac:	69a3      	ldr	r3, [r4, #24]
 8003eae:	6851      	ldr	r1, [r2, #4]
 8003eb0:	4303      	orrs	r3, r0
 8003eb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003eb4:	4303      	orrs	r3, r0
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003eba:	6891      	ldr	r1, [r2, #8]
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_SAI_Init+0x1a8>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003ebe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003ec0:	400b      	ands	r3, r1
 8003ec2:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003ec4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003ec6:	6891      	ldr	r1, [r2, #8]
 8003ec8:	4303      	orrs	r3, r0
 8003eca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003ecc:	4303      	orrs	r3, r0
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003ed2:	3901      	subs	r1, #1
 8003ed4:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003ed6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003ed8:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003eda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ede:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003ee0:	68d3      	ldr	r3, [r2, #12]
 8003ee2:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8003ee6:	f023 030f 	bic.w	r3, r3, #15
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003ef0:	68d1      	ldr	r1, [r2, #12]
 8003ef2:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8003ef6:	4303      	orrs	r3, r0
 8003ef8:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003efa:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003f00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003f02:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003f04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f08:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003f0a:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8003f0c:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003f0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8003f12:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8003f16:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  return HAL_OK;
 8003f1a:	e74b      	b.n	8003db4 <HAL_SAI_Init+0x8>
  switch (hsai->Init.SynchroExt)
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	e765      	b.n	8003dec <HAL_SAI_Init+0x40>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003f20:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003f24:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003f28:	e76c      	b.n	8003e04 <HAL_SAI_Init+0x58>
    SAI2->GCR = tmpregisterGCR;
 8003f2a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8003f2e:	e774      	b.n	8003e1a <HAL_SAI_Init+0x6e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003f30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f34:	e77b      	b.n	8003e2e <HAL_SAI_Init+0x82>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003f36:	2a01      	cmp	r2, #1
 8003f38:	bf14      	ite	ne
 8003f3a:	2100      	movne	r1, #0
 8003f3c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8003f40:	e794      	b.n	8003e6c <HAL_SAI_Init+0xc0>
 8003f42:	bf00      	nop
 8003f44:	40015404 	.word	0x40015404
 8003f48:	40015000 	.word	0x40015000
 8003f4c:	40015424 	.word	0x40015424
 8003f50:	ff05c010 	.word	0xff05c010
 8003f54:	fff88000 	.word	0xfff88000

08003f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f58:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d05f      	beq.n	8004020 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d158      	bne.n	8004018 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f66:	6842      	ldr	r2, [r0, #4]
 8003f68:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003f6c:	d000      	beq.n	8003f70 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f6e:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f74:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003f78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f7c:	b923      	cbnz	r3, 8003f88 <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f7e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7fd fcb6 	bl	80018f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f88:	6825      	ldr	r5, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f8a:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003f92:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9c:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	d83f      	bhi.n	8004024 <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fa8:	d000      	beq.n	8003fac <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003faa:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	68a6      	ldr	r6, [r4, #8]
 8003fb0:	69a2      	ldr	r2, [r4, #24]
 8003fb2:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8003fb6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003fba:	4333      	orrs	r3, r6
 8003fbc:	6926      	ldr	r6, [r4, #16]
 8003fbe:	f006 0602 	and.w	r6, r6, #2
 8003fc2:	4333      	orrs	r3, r6
 8003fc4:	6966      	ldr	r6, [r4, #20]
 8003fc6:	f006 0601 	and.w	r6, r6, #1
 8003fca:	4333      	orrs	r3, r6
 8003fcc:	f402 7600 	and.w	r6, r2, #512	; 0x200
 8003fd0:	4333      	orrs	r3, r6
 8003fd2:	69e6      	ldr	r6, [r4, #28]
 8003fd4:	f006 0638 	and.w	r6, r6, #56	; 0x38
 8003fd8:	4333      	orrs	r3, r6
 8003fda:	6a26      	ldr	r6, [r4, #32]
 8003fdc:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8003fe0:	4333      	orrs	r3, r6
 8003fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fe4:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8003fe8:	4333      	orrs	r3, r6
 8003fea:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fec:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ff0:	f006 0608 	and.w	r6, r6, #8
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	4333      	orrs	r3, r6
 8003ffa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003ffe:	0c12      	lsrs	r2, r2, #16
 8004000:	4319      	orrs	r1, r3
 8004002:	f002 0204 	and.w	r2, r2, #4
 8004006:	430a      	orrs	r2, r1
 8004008:	4310      	orrs	r0, r2
 800400a:	6068      	str	r0, [r5, #4]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800400c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800400e:	2000      	movs	r0, #0
 8004010:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004012:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004016:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004018:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800401a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800401e:	e7a7      	b.n	8003f70 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004020:	2001      	movs	r0, #1
 8004022:	e7f8      	b.n	8004016 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004024:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004026:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800402a:	e7bd      	b.n	8003fa8 <HAL_SPI_Init+0x50>

0800402c <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	e852 3f00 	ldrex	r3, [r2]
 8004032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	2900      	cmp	r1, #0
 800403e:	d1f5      	bne.n	800402c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	f102 0308 	add.w	r3, r2, #8
 8004044:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	f102 0c08 	add.w	ip, r2, #8
 8004050:	e84c 3100 	strex	r1, r3, [ip]
 8004054:	2900      	cmp	r1, #0
 8004056:	d1f3      	bne.n	8004040 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004062:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	e842 3100 	strex	r1, r3, [r2]
 800406a:	2900      	cmp	r1, #0
 800406c:	d1f7      	bne.n	800405e <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	2320      	movs	r3, #32
 8004070:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	2300      	movs	r3, #0
 8004074:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004076:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004078:	4770      	bx	lr

0800407a <HAL_UART_TxCpltCallback>:
 800407a:	4770      	bx	lr

0800407c <HAL_UART_ErrorCallback>:
 800407c:	4770      	bx	lr

0800407e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004080:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004088:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800408c:	f7ff fff6 	bl	800407c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004090:	bd08      	pop	{r3, pc}

08004092 <HAL_UARTEx_RxEventCallback>:
}
 8004092:	4770      	bx	lr

08004094 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004094:	6803      	ldr	r3, [r0, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004098:	6819      	ldr	r1, [r3, #0]
{
 800409a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800409c:	f640 060f 	movw	r6, #2063	; 0x80f
 80040a0:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040a2:	689d      	ldr	r5, [r3, #8]
{
 80040a4:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80040a6:	d10b      	bne.n	80040c0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040a8:	0696      	lsls	r6, r2, #26
 80040aa:	f140 8088 	bpl.w	80041be <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ae:	068e      	lsls	r6, r1, #26
 80040b0:	f140 8085 	bpl.w	80041be <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 80040b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d07b      	beq.n	80041b2 <HAL_UART_IRQHandler+0x11e>
}
 80040ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80040be:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040c0:	4e95      	ldr	r6, [pc, #596]	; (8004318 <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040c2:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040c6:	400e      	ands	r6, r1
 80040c8:	4306      	orrs	r6, r0
 80040ca:	d078      	beq.n	80041be <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040cc:	07d5      	lsls	r5, r2, #31
 80040ce:	d509      	bpl.n	80040e4 <HAL_UART_IRQHandler+0x50>
 80040d0:	05ce      	lsls	r6, r1, #23
 80040d2:	d507      	bpl.n	80040e4 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040d4:	2501      	movs	r5, #1
 80040d6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040d8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80040dc:	f045 0501 	orr.w	r5, r5, #1
 80040e0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040e4:	0795      	lsls	r5, r2, #30
 80040e6:	d508      	bpl.n	80040fa <HAL_UART_IRQHandler+0x66>
 80040e8:	b138      	cbz	r0, 80040fa <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040ea:	2502      	movs	r5, #2
 80040ec:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ee:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80040f2:	f045 0504 	orr.w	r5, r5, #4
 80040f6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040fa:	0756      	lsls	r6, r2, #29
 80040fc:	d508      	bpl.n	8004110 <HAL_UART_IRQHandler+0x7c>
 80040fe:	b138      	cbz	r0, 8004110 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004100:	2504      	movs	r5, #4
 8004102:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004104:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004108:	f045 0502 	orr.w	r5, r5, #2
 800410c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004110:	0715      	lsls	r5, r2, #28
 8004112:	d50b      	bpl.n	800412c <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004114:	f001 0520 	and.w	r5, r1, #32
 8004118:	4328      	orrs	r0, r5
 800411a:	d007      	beq.n	800412c <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800411c:	2008      	movs	r0, #8
 800411e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004120:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004124:	f040 0008 	orr.w	r0, r0, #8
 8004128:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800412c:	0516      	lsls	r6, r2, #20
 800412e:	d50a      	bpl.n	8004146 <HAL_UART_IRQHandler+0xb2>
 8004130:	014d      	lsls	r5, r1, #5
 8004132:	d508      	bpl.n	8004146 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004134:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004138:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800413a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800413e:	f043 0320 	orr.w	r3, r3, #32
 8004142:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004146:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d031      	beq.n	80041b2 <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800414e:	0690      	lsls	r0, r2, #26
 8004150:	d505      	bpl.n	800415e <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004152:	068a      	lsls	r2, r1, #26
 8004154:	d503      	bpl.n	800415e <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8004156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004158:	b10b      	cbz	r3, 800415e <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 800415a:	4620      	mov	r0, r4
 800415c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800415e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004160:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004164:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004166:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8004170:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004172:	d01f      	beq.n	80041b4 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 8004174:	f7ff ff5a 	bl	800402c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	6893      	ldr	r3, [r2, #8]
 800417c:	065b      	lsls	r3, r3, #25
 800417e:	d515      	bpl.n	80041ac <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	f102 0308 	add.w	r3, r2, #8
 8004184:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	f102 0008 	add.w	r0, r2, #8
 8004190:	e840 3100 	strex	r1, r3, [r0]
 8004194:	2900      	cmp	r1, #0
 8004196:	d1f3      	bne.n	8004180 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 8004198:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800419a:	b138      	cbz	r0, 80041ac <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800419c:	4b5f      	ldr	r3, [pc, #380]	; (800431c <HAL_UART_IRQHandler+0x288>)
 800419e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041a0:	f7fd fe1f 	bl	8001de2 <HAL_DMA_Abort_IT>
 80041a4:	b128      	cbz	r0, 80041b2 <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80041a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80041aa:	e786      	b.n	80040ba <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7ff ff65 	bl	800407c <HAL_UART_ErrorCallback>
}
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80041b4:	f7ff ff62 	bl	800407c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80041bc:	e7f9      	b.n	80041b2 <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041be:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80041c0:	2801      	cmp	r0, #1
 80041c2:	d17e      	bne.n	80042c2 <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041c4:	06d6      	lsls	r6, r2, #27
 80041c6:	d57c      	bpl.n	80042c2 <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041c8:	06c8      	lsls	r0, r1, #27
 80041ca:	d57a      	bpl.n	80042c2 <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041cc:	2210      	movs	r2, #16
 80041ce:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	0651      	lsls	r1, r2, #25
 80041d4:	d546      	bpl.n	8004264 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80041d8:	6811      	ldr	r1, [r2, #0]
 80041da:	684a      	ldr	r2, [r1, #4]
 80041dc:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d0e7      	beq.n	80041b2 <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041e2:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 80041e6:	4290      	cmp	r0, r2
 80041e8:	d9e3      	bls.n	80041b2 <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 80041ea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041ee:	680a      	ldr	r2, [r1, #0]
 80041f0:	0692      	lsls	r2, r2, #26
 80041f2:	d42d      	bmi.n	8004250 <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	e843 2100 	strex	r1, r2, [r3]
 8004200:	2900      	cmp	r1, #0
 8004202:	d1f7      	bne.n	80041f4 <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	f103 0208 	add.w	r2, r3, #8
 8004208:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	f103 0008 	add.w	r0, r3, #8
 8004214:	e840 2100 	strex	r1, r2, [r0]
 8004218:	2900      	cmp	r1, #0
 800421a:	d1f3      	bne.n	8004204 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	f103 0208 	add.w	r2, r3, #8
 8004220:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	f103 0008 	add.w	r0, r3, #8
 800422c:	e840 2100 	strex	r1, r2, [r0]
 8004230:	2900      	cmp	r1, #0
 8004232:	d1f3      	bne.n	800421c <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 8004234:	2220      	movs	r2, #32
 8004236:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004238:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	e843 2100 	strex	r1, r2, [r3]
 8004246:	2900      	cmp	r1, #0
 8004248:	d1f7      	bne.n	800423a <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800424a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800424c:	f7fd fda6 	bl	8001d9c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004250:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004254:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004258:	1ac9      	subs	r1, r1, r3
 800425a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800425c:	4620      	mov	r0, r4
 800425e:	f7ff ff18 	bl	8004092 <HAL_UARTEx_RxEventCallback>
 8004262:	e7a6      	b.n	80041b2 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004264:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8004268:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800426a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800426e:	b289      	uxth	r1, r1
 8004270:	2900      	cmp	r1, #0
 8004272:	d09e      	beq.n	80041b2 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004274:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004278:	1a89      	subs	r1, r1, r2
 800427a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800427c:	2900      	cmp	r1, #0
 800427e:	d098      	beq.n	80041b2 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	e843 2000 	strex	r0, r2, [r3]
 800428c:	2800      	cmp	r0, #0
 800428e:	d1f7      	bne.n	8004280 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	f103 0208 	add.w	r2, r3, #8
 8004294:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	f103 0508 	add.w	r5, r3, #8
 80042a0:	e845 2000 	strex	r0, r2, [r5]
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d1f3      	bne.n	8004290 <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 80042a8:	2220      	movs	r2, #32
 80042aa:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 80042ac:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ae:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	e843 2000 	strex	r0, r2, [r3]
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1f7      	bne.n	80042b0 <HAL_UART_IRQHandler+0x21c>
 80042c0:	e7cc      	b.n	800425c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042c2:	02d6      	lsls	r6, r2, #11
 80042c4:	d509      	bpl.n	80042da <HAL_UART_IRQHandler+0x246>
 80042c6:	0268      	lsls	r0, r5, #9
 80042c8:	d507      	bpl.n	80042da <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80042ce:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80042d6:	f000 bc6f 	b.w	8004bb8 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042da:	0616      	lsls	r6, r2, #24
 80042dc:	d507      	bpl.n	80042ee <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042de:	060d      	lsls	r5, r1, #24
 80042e0:	d505      	bpl.n	80042ee <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 80042e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f43f af64 	beq.w	80041b2 <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 80042ea:	4620      	mov	r0, r4
 80042ec:	e6e5      	b.n	80040ba <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042ee:	0650      	lsls	r0, r2, #25
 80042f0:	f57f af5f 	bpl.w	80041b2 <HAL_UART_IRQHandler+0x11e>
 80042f4:	064a      	lsls	r2, r1, #25
 80042f6:	f57f af5c 	bpl.w	80041b2 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	e843 2100 	strex	r1, r2, [r3]
 8004306:	2900      	cmp	r1, #0
 8004308:	d1f7      	bne.n	80042fa <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800430a:	2320      	movs	r3, #32
 800430c:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800430e:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004310:	4620      	mov	r0, r4
 8004312:	f7ff feb2 	bl	800407a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004316:	e74c      	b.n	80041b2 <HAL_UART_IRQHandler+0x11e>
 8004318:	04000120 	.word	0x04000120
 800431c:	0800407f 	.word	0x0800407f

08004320 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004320:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004322:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004324:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004326:	2b22      	cmp	r3, #34	; 0x22
 8004328:	d144      	bne.n	80043b4 <UART_RxISR_8BIT+0x94>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800432a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800432c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8004330:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004332:	400b      	ands	r3, r1
 8004334:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8004336:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004338:	3301      	adds	r3, #1
 800433a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800433c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004340:	3b01      	subs	r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004348:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800434c:	b29b      	uxth	r3, r3
 800434e:	bb6b      	cbnz	r3, 80043ac <UART_RxISR_8BIT+0x8c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004350:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	e852 3f00 	ldrex	r3, [r2]
 8004356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800435e:	6803      	ldr	r3, [r0, #0]
 8004360:	2900      	cmp	r1, #0
 8004362:	d1f5      	bne.n	8004350 <UART_RxISR_8BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	f103 0208 	add.w	r2, r3, #8
 8004368:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	f103 0c08 	add.w	ip, r3, #8
 8004374:	e84c 2100 	strex	r1, r2, [ip]
 8004378:	2900      	cmp	r1, #0
 800437a:	d1f3      	bne.n	8004364 <UART_RxISR_8BIT+0x44>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437c:	2220      	movs	r2, #32
 800437e:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8004382:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	2a01      	cmp	r2, #1
 8004386:	d112      	bne.n	80043ae <UART_RxISR_8BIT+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	e843 2100 	strex	r1, r2, [r3]
 8004396:	2900      	cmp	r1, #0
 8004398:	d1f7      	bne.n	800438a <UART_RxISR_8BIT+0x6a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800439a:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800439c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043a0:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043a2:	bf44      	itt	mi
 80043a4:	2210      	movmi	r2, #16
 80043a6:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043a8:	f7ff fe73 	bl	8004092 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ac:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80043ae:	f002 fd73 	bl	8006e98 <HAL_UART_RxCpltCallback>
 80043b2:	e7fb      	b.n	80043ac <UART_RxISR_8BIT+0x8c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043b4:	8b13      	ldrh	r3, [r2, #24]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f043 0308 	orr.w	r3, r3, #8
 80043bc:	8313      	strh	r3, [r2, #24]
}
 80043be:	e7f5      	b.n	80043ac <UART_RxISR_8BIT+0x8c>

080043c0 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80043c2:	2a22      	cmp	r2, #34	; 0x22
{
 80043c4:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043c6:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c8:	d141      	bne.n	800444e <UART_RxISR_16BIT+0x8e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ca:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80043cc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80043d0:	4011      	ands	r1, r2
 80043d2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80043d4:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 80043d8:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80043da:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80043de:	3a01      	subs	r2, #1
 80043e0:	b292      	uxth	r2, r2
 80043e2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043e6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80043ea:	b292      	uxth	r2, r2
 80043ec:	bb5a      	cbnz	r2, 8004446 <UART_RxISR_16BIT+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	e843 2100 	strex	r1, r2, [r3]
 80043fa:	2900      	cmp	r1, #0
 80043fc:	d1f7      	bne.n	80043ee <UART_RxISR_16BIT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	f103 0208 	add.w	r2, r3, #8
 8004402:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	f103 0c08 	add.w	ip, r3, #8
 800440e:	e84c 2100 	strex	r1, r2, [ip]
 8004412:	2900      	cmp	r1, #0
 8004414:	d1f3      	bne.n	80043fe <UART_RxISR_16BIT+0x3e>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004416:	2220      	movs	r2, #32
 8004418:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441a:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800441c:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441e:	2a01      	cmp	r2, #1
 8004420:	d112      	bne.n	8004448 <UART_RxISR_16BIT+0x88>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004428:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	e843 2100 	strex	r1, r2, [r3]
 8004430:	2900      	cmp	r1, #0
 8004432:	d1f7      	bne.n	8004424 <UART_RxISR_16BIT+0x64>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004434:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800443a:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800443c:	bf44      	itt	mi
 800443e:	2210      	movmi	r2, #16
 8004440:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004442:	f7ff fe26 	bl	8004092 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004446:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8004448:	f002 fd26 	bl	8006e98 <HAL_UART_RxCpltCallback>
 800444c:	e7fb      	b.n	8004446 <UART_RxISR_16BIT+0x86>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800444e:	8b1a      	ldrh	r2, [r3, #24]
 8004450:	b292      	uxth	r2, r2
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	831a      	strh	r2, [r3, #24]
}
 8004458:	e7f5      	b.n	8004446 <UART_RxISR_16BIT+0x86>
	...

0800445c <UART_SetConfig>:
{
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004460:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004462:	6921      	ldr	r1, [r4, #16]
 8004464:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004466:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	69c0      	ldr	r0, [r0, #28]
 800446a:	430a      	orrs	r2, r1
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004470:	498f      	ldr	r1, [pc, #572]	; (80046b0 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004472:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004474:	4029      	ands	r1, r5
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68e1      	ldr	r1, [r4, #12]
 800447e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004486:	4a8b      	ldr	r2, [pc, #556]	; (80046b4 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004488:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800448a:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800448c:	bf1c      	itt	ne
 800448e:	6a22      	ldrne	r2, [r4, #32]
 8004490:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004498:	430a      	orrs	r2, r1
 800449a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449c:	4a86      	ldr	r2, [pc, #536]	; (80046b8 <UART_SetConfig+0x25c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d117      	bne.n	80044d2 <UART_SetConfig+0x76>
 80044a2:	4b86      	ldr	r3, [pc, #536]	; (80046bc <UART_SetConfig+0x260>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f200 80cf 	bhi.w	8004652 <UART_SetConfig+0x1f6>
 80044b4:	4a82      	ldr	r2, [pc, #520]	; (80046c0 <UART_SetConfig+0x264>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044bc:	f040 8099 	bne.w	80045f2 <UART_SetConfig+0x196>
    switch (clocksource)
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d822      	bhi.n	800450a <UART_SetConfig+0xae>
 80044c4:	e8df f003 	tbb	[pc, r3]
 80044c8:	2193c8d9 	.word	0x2193c8d9
 80044cc:	212121ce 	.word	0x212121ce
 80044d0:	dd          	.byte	0xdd
 80044d1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d2:	4a7c      	ldr	r2, [pc, #496]	; (80046c4 <UART_SetConfig+0x268>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d106      	bne.n	80044e6 <UART_SetConfig+0x8a>
 80044d8:	4b78      	ldr	r3, [pc, #480]	; (80046bc <UART_SetConfig+0x260>)
 80044da:	4a7b      	ldr	r2, [pc, #492]	; (80046c8 <UART_SetConfig+0x26c>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	e7e7      	b.n	80044b6 <UART_SetConfig+0x5a>
 80044e6:	4a79      	ldr	r2, [pc, #484]	; (80046cc <UART_SetConfig+0x270>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d119      	bne.n	8004520 <UART_SetConfig+0xc4>
 80044ec:	4b73      	ldr	r3, [pc, #460]	; (80046bc <UART_SetConfig+0x260>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	f000 80b7 	beq.w	800466a <UART_SetConfig+0x20e>
 80044fc:	d807      	bhi.n	800450e <UART_SetConfig+0xb2>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80b8 	beq.w	8004674 <UART_SetConfig+0x218>
 8004504:	2b10      	cmp	r3, #16
 8004506:	f000 80aa 	beq.w	800465e <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800450a:	2001      	movs	r0, #1
 800450c:	e04e      	b.n	80045ac <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800450e:	2b30      	cmp	r3, #48	; 0x30
 8004510:	d1fb      	bne.n	800450a <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004512:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004516:	f000 80b4 	beq.w	8004682 <UART_SetConfig+0x226>
 800451a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800451e:	e083      	b.n	8004628 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004520:	4a6b      	ldr	r2, [pc, #428]	; (80046d0 <UART_SetConfig+0x274>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10f      	bne.n	8004546 <UART_SetConfig+0xea>
 8004526:	4b65      	ldr	r3, [pc, #404]	; (80046bc <UART_SetConfig+0x260>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004530:	2b80      	cmp	r3, #128	; 0x80
 8004532:	f000 809a 	beq.w	800466a <UART_SetConfig+0x20e>
 8004536:	d804      	bhi.n	8004542 <UART_SetConfig+0xe6>
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 809b 	beq.w	8004674 <UART_SetConfig+0x218>
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	e7e1      	b.n	8004506 <UART_SetConfig+0xaa>
 8004542:	2bc0      	cmp	r3, #192	; 0xc0
 8004544:	e7e4      	b.n	8004510 <UART_SetConfig+0xb4>
 8004546:	4a63      	ldr	r2, [pc, #396]	; (80046d4 <UART_SetConfig+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d112      	bne.n	8004572 <UART_SetConfig+0x116>
 800454c:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <UART_SetConfig+0x260>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455a:	f000 8086 	beq.w	800466a <UART_SetConfig+0x20e>
 800455e:	d805      	bhi.n	800456c <UART_SetConfig+0x110>
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8087 	beq.w	8004674 <UART_SetConfig+0x218>
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	e7cc      	b.n	8004506 <UART_SetConfig+0xaa>
 800456c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004570:	e7ce      	b.n	8004510 <UART_SetConfig+0xb4>
 8004572:	4a50      	ldr	r2, [pc, #320]	; (80046b4 <UART_SetConfig+0x258>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d1c8      	bne.n	800450a <UART_SetConfig+0xae>
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <UART_SetConfig+0x260>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004586:	d015      	beq.n	80045b4 <UART_SetConfig+0x158>
 8004588:	d806      	bhi.n	8004598 <UART_SetConfig+0x13c>
 800458a:	b15b      	cbz	r3, 80045a4 <UART_SetConfig+0x148>
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	d1bb      	bne.n	800450a <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8004592:	f7fe faeb 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
        break;
 8004596:	e007      	b.n	80045a8 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800459c:	d1b5      	bne.n	800450a <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 800459e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80045a2:	e008      	b.n	80045b6 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a4:	f7fe fe60 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80045a8:	b928      	cbnz	r0, 80045b6 <UART_SetConfig+0x15a>
 80045aa:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80045ac:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80045ae:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80045b4:	4848      	ldr	r0, [pc, #288]	; (80046d8 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045b6:	6862      	ldr	r2, [r4, #4]
 80045b8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80045bc:	4283      	cmp	r3, r0
 80045be:	d8a4      	bhi.n	800450a <UART_SetConfig+0xae>
 80045c0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80045c4:	d8a1      	bhi.n	800450a <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045c6:	0851      	lsrs	r1, r2, #1
 80045c8:	2500      	movs	r5, #0
 80045ca:	468c      	mov	ip, r1
 80045cc:	f44f 7680 	mov.w	r6, #256	; 0x100
 80045d0:	4629      	mov	r1, r5
 80045d2:	fbe0 c106 	umlal	ip, r1, r0, r6
 80045d6:	462b      	mov	r3, r5
 80045d8:	4660      	mov	r0, ip
 80045da:	f7fc fbf3 	bl	8000dc4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <UART_SetConfig+0x280>)
 80045e0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d890      	bhi.n	800450a <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	60d8      	str	r0, [r3, #12]
 80045ec:	e7dd      	b.n	80045aa <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 80045ee:	483a      	ldr	r0, [pc, #232]	; (80046d8 <UART_SetConfig+0x27c>)
 80045f0:	e047      	b.n	8004682 <UART_SetConfig+0x226>
    switch (clocksource)
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d889      	bhi.n	800450a <UART_SetConfig+0xae>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x1a0>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004647 	.word	0x08004647
 8004604:	08004671 	.word	0x08004671
 8004608:	0800450b 	.word	0x0800450b
 800460c:	0800464d 	.word	0x0800464d
 8004610:	0800450b 	.word	0x0800450b
 8004614:	0800450b 	.word	0x0800450b
 8004618:	0800450b 	.word	0x0800450b
 800461c:	0800451b 	.word	0x0800451b
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7fe fe22 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004624:	2800      	cmp	r0, #0
 8004626:	d0c0      	beq.n	80045aa <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004628:	6862      	ldr	r2, [r4, #4]
 800462a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800462e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004632:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004636:	f1a3 0110 	sub.w	r1, r3, #16
 800463a:	4291      	cmp	r1, r2
 800463c:	f63f af65 	bhi.w	800450a <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004640:	6822      	ldr	r2, [r4, #0]
 8004642:	60d3      	str	r3, [r2, #12]
 8004644:	e7b1      	b.n	80045aa <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004646:	f7fe fe21 	bl	800328c <HAL_RCC_GetPCLK2Freq>
        break;
 800464a:	e7eb      	b.n	8004624 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 800464c:	f7fe fa8e 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
        break;
 8004650:	e7e8      	b.n	8004624 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004652:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004656:	d1f6      	bne.n	8004646 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fe fe18 	bl	800328c <HAL_RCC_GetPCLK2Freq>
        break;
 800465c:	e00f      	b.n	800467e <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004662:	d1f3      	bne.n	800464c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8004664:	f7fe fa82 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
        break;
 8004668:	e009      	b.n	800467e <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800466a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800466e:	d0be      	beq.n	80045ee <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8004670:	4819      	ldr	r0, [pc, #100]	; (80046d8 <UART_SetConfig+0x27c>)
 8004672:	e7d9      	b.n	8004628 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004674:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004678:	d1d2      	bne.n	8004620 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800467a:	f7fe fdf5 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800467e:	2800      	cmp	r0, #0
 8004680:	d093      	beq.n	80045aa <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004682:	6862      	ldr	r2, [r4, #4]
 8004684:	0853      	lsrs	r3, r2, #1
 8004686:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800468e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004692:	f1a0 0210 	sub.w	r2, r0, #16
 8004696:	429a      	cmp	r2, r3
 8004698:	f63f af37 	bhi.w	800450a <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800469c:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80046a0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046a2:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046a4:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80046a8:	4318      	orrs	r0, r3
 80046aa:	60d0      	str	r0, [r2, #12]
 80046ac:	e77d      	b.n	80045aa <UART_SetConfig+0x14e>
 80046ae:	bf00      	nop
 80046b0:	efff69f3 	.word	0xefff69f3
 80046b4:	40008000 	.word	0x40008000
 80046b8:	40013800 	.word	0x40013800
 80046bc:	40021000 	.word	0x40021000
 80046c0:	0800f84c 	.word	0x0800f84c
 80046c4:	40004400 	.word	0x40004400
 80046c8:	0800f84f 	.word	0x0800f84f
 80046cc:	40004800 	.word	0x40004800
 80046d0:	40004c00 	.word	0x40004c00
 80046d4:	40005000 	.word	0x40005000
 80046d8:	00f42400 	.word	0x00f42400
 80046dc:	000ffcff 	.word	0x000ffcff

080046e0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046e2:	07da      	lsls	r2, r3, #31
{
 80046e4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e6:	d506      	bpl.n	80046f6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e8:	6801      	ldr	r1, [r0, #0]
 80046ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80046ec:	684a      	ldr	r2, [r1, #4]
 80046ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046f2:	4322      	orrs	r2, r4
 80046f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046f6:	079c      	lsls	r4, r3, #30
 80046f8:	d506      	bpl.n	8004708 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fa:	6801      	ldr	r1, [r0, #0]
 80046fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80046fe:	684a      	ldr	r2, [r1, #4]
 8004700:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004704:	4322      	orrs	r2, r4
 8004706:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004708:	0759      	lsls	r1, r3, #29
 800470a:	d506      	bpl.n	800471a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470c:	6801      	ldr	r1, [r0, #0]
 800470e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004710:	684a      	ldr	r2, [r1, #4]
 8004712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004716:	4322      	orrs	r2, r4
 8004718:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800471a:	071a      	lsls	r2, r3, #28
 800471c:	d506      	bpl.n	800472c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471e:	6801      	ldr	r1, [r0, #0]
 8004720:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004722:	684a      	ldr	r2, [r1, #4]
 8004724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004728:	4322      	orrs	r2, r4
 800472a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800472c:	06dc      	lsls	r4, r3, #27
 800472e:	d506      	bpl.n	800473e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	6801      	ldr	r1, [r0, #0]
 8004732:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004734:	688a      	ldr	r2, [r1, #8]
 8004736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473a:	4322      	orrs	r2, r4
 800473c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800473e:	0699      	lsls	r1, r3, #26
 8004740:	d506      	bpl.n	8004750 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004742:	6801      	ldr	r1, [r0, #0]
 8004744:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004746:	688a      	ldr	r2, [r1, #8]
 8004748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474c:	4322      	orrs	r2, r4
 800474e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004750:	065a      	lsls	r2, r3, #25
 8004752:	d50f      	bpl.n	8004774 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004754:	6801      	ldr	r1, [r0, #0]
 8004756:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004758:	684a      	ldr	r2, [r1, #4]
 800475a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800475e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004760:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004764:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004766:	d105      	bne.n	8004774 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004768:	684a      	ldr	r2, [r1, #4]
 800476a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800476c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004770:	4322      	orrs	r2, r4
 8004772:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	d506      	bpl.n	8004786 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004778:	6802      	ldr	r2, [r0, #0]
 800477a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800477c:	6853      	ldr	r3, [r2, #4]
 800477e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004782:	430b      	orrs	r3, r1
 8004784:	6053      	str	r3, [r2, #4]
}
 8004786:	bd10      	pop	{r4, pc}

08004788 <UART_WaitOnFlagUntilTimeout>:
{
 8004788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004790:	4604      	mov	r4, r0
 8004792:	460e      	mov	r6, r1
 8004794:	4615      	mov	r5, r2
 8004796:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004798:	6822      	ldr	r2, [r4, #0]
 800479a:	69d3      	ldr	r3, [r2, #28]
 800479c:	ea36 0303 	bics.w	r3, r6, r3
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	42ab      	cmp	r3, r5
 80047a8:	d001      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80047aa:	2000      	movs	r0, #0
 80047ac:	e025      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	f1b8 3fff 	cmp.w	r8, #4294967295
 80047b2:	d0f2      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fd fa02 	bl	8001bbc <HAL_GetTick>
 80047b8:	1bc0      	subs	r0, r0, r7
 80047ba:	4540      	cmp	r0, r8
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	d802      	bhi.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x3e>
 80047c0:	f1b8 0f00 	cmp.w	r8, #0
 80047c4:	d11b      	bne.n	80047fe <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	e840 3200 	strex	r2, r3, [r0]
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	d1f7      	bne.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	f100 0308 	add.w	r3, r0, #8
 80047da:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	f100 0108 	add.w	r1, r0, #8
 80047e6:	e841 3200 	strex	r2, r3, [r1]
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	d1f3      	bne.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80047ee:	2320      	movs	r3, #32
 80047f0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047f2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80047f4:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80047f8:	2003      	movs	r0, #3
}
 80047fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047fe:	6803      	ldr	r3, [r0, #0]
 8004800:	075a      	lsls	r2, r3, #29
 8004802:	d5c9      	bpl.n	8004798 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004804:	69c3      	ldr	r3, [r0, #28]
 8004806:	051b      	lsls	r3, r3, #20
 8004808:	d5c6      	bpl.n	8004798 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800480a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800480e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	e840 3200 	strex	r2, r3, [r0]
 800481c:	2a00      	cmp	r2, #0
 800481e:	d1f7      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	f100 0308 	add.w	r3, r0, #8
 8004824:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	f100 0108 	add.w	r1, r0, #8
 8004830:	e841 3200 	strex	r2, r3, [r1]
 8004834:	2a00      	cmp	r2, #0
 8004836:	d1f3      	bne.n	8004820 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8004838:	2320      	movs	r3, #32
 800483a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800483c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800483e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004842:	e7d7      	b.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x6c>

08004844 <HAL_UART_Transmit>:
{
 8004844:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004848:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800484a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800484c:	2b20      	cmp	r3, #32
{
 800484e:	4604      	mov	r4, r0
 8004850:	460e      	mov	r6, r1
 8004852:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004854:	d14e      	bne.n	80048f4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8004856:	2900      	cmp	r1, #0
 8004858:	d04a      	beq.n	80048f0 <HAL_UART_Transmit+0xac>
 800485a:	2a00      	cmp	r2, #0
 800485c:	d048      	beq.n	80048f0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800485e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004862:	2b01      	cmp	r3, #1
 8004864:	d046      	beq.n	80048f4 <HAL_UART_Transmit+0xb0>
 8004866:	2301      	movs	r3, #1
 8004868:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004874:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004876:	f7fd f9a1 	bl	8001bbc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487a:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 800487c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004884:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8004886:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488a:	d103      	bne.n	8004894 <HAL_UART_Transmit+0x50>
 800488c:	6922      	ldr	r2, [r4, #16]
 800488e:	b90a      	cbnz	r2, 8004894 <HAL_UART_Transmit+0x50>
 8004890:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004892:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8004894:	2200      	movs	r2, #0
 8004896:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800489a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800489e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80048a2:	b292      	uxth	r2, r2
 80048a4:	b93a      	cbnz	r2, 80048b6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a6:	2140      	movs	r1, #64	; 0x40
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff ff6d 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 80048ae:	b950      	cbnz	r0, 80048c6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80048b0:	2320      	movs	r3, #32
 80048b2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80048b4:	e008      	b.n	80048c8 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	2200      	movs	r2, #0
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	4620      	mov	r0, r4
 80048bc:	9303      	str	r3, [sp, #12]
 80048be:	f7ff ff63 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	b118      	cbz	r0, 80048ce <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80048c6:	2003      	movs	r0, #3
}
 80048c8:	b004      	add	sp, #16
 80048ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ce:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80048d0:	b95e      	cbnz	r6, 80048ea <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80048d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048da:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80048dc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80048e0:	3a01      	subs	r2, #1
 80048e2:	b292      	uxth	r2, r2
 80048e4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80048e8:	e7d7      	b.n	800489a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ea:	f816 2b01 	ldrb.w	r2, [r6], #1
 80048ee:	e7f4      	b.n	80048da <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80048f0:	2001      	movs	r0, #1
 80048f2:	e7e9      	b.n	80048c8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80048f4:	2002      	movs	r0, #2
 80048f6:	e7e7      	b.n	80048c8 <HAL_UART_Transmit+0x84>

080048f8 <HAL_UART_Receive>:
{
 80048f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80048fc:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004900:	2b20      	cmp	r3, #32
{
 8004902:	4604      	mov	r4, r0
 8004904:	460d      	mov	r5, r1
 8004906:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004908:	d168      	bne.n	80049dc <HAL_UART_Receive+0xe4>
    if ((pData == NULL) || (Size == 0U))
 800490a:	2900      	cmp	r1, #0
 800490c:	d064      	beq.n	80049d8 <HAL_UART_Receive+0xe0>
 800490e:	2a00      	cmp	r2, #0
 8004910:	d062      	beq.n	80049d8 <HAL_UART_Receive+0xe0>
    __HAL_LOCK(huart);
 8004912:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004916:	2b01      	cmp	r3, #1
 8004918:	d060      	beq.n	80049dc <HAL_UART_Receive+0xe4>
 800491a:	2301      	movs	r3, #1
 800491c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	f04f 0800 	mov.w	r8, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004924:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004926:	f8c0 8080 	str.w	r8, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800492a:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8004930:	f7fd f944 	bl	8001bbc <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8004934:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8004936:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800493e:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8004940:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004944:	d11c      	bne.n	8004980 <HAL_UART_Receive+0x88>
 8004946:	6922      	ldr	r2, [r4, #16]
 8004948:	b9c2      	cbnz	r2, 800497c <HAL_UART_Receive+0x84>
 800494a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800494e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8004956:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495a:	d122      	bne.n	80049a2 <HAL_UART_Receive+0xaa>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	bb03      	cbnz	r3, 80049a2 <HAL_UART_Receive+0xaa>
 8004960:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8004962:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8004964:	2300      	movs	r3, #0
 8004966:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->RxXferCount > 0U)
 800496a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800496e:	b290      	uxth	r0, r2
 8004970:	b9c8      	cbnz	r0, 80049a6 <HAL_UART_Receive+0xae>
    huart->RxState = HAL_UART_STATE_READY;
 8004972:	2320      	movs	r3, #32
 8004974:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8004976:	b003      	add	sp, #12
 8004978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	e7e6      	b.n	800494e <HAL_UART_Receive+0x56>
 8004980:	b923      	cbnz	r3, 800498c <HAL_UART_Receive+0x94>
 8004982:	6922      	ldr	r2, [r4, #16]
 8004984:	2a00      	cmp	r2, #0
 8004986:	d0f9      	beq.n	800497c <HAL_UART_Receive+0x84>
 8004988:	227f      	movs	r2, #127	; 0x7f
 800498a:	e7e0      	b.n	800494e <HAL_UART_Receive+0x56>
 800498c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004990:	d104      	bne.n	800499c <HAL_UART_Receive+0xa4>
 8004992:	6922      	ldr	r2, [r4, #16]
 8004994:	2a00      	cmp	r2, #0
 8004996:	d0f7      	beq.n	8004988 <HAL_UART_Receive+0x90>
 8004998:	223f      	movs	r2, #63	; 0x3f
 800499a:	e7d8      	b.n	800494e <HAL_UART_Receive+0x56>
 800499c:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
 80049a0:	e7d7      	b.n	8004952 <HAL_UART_Receive+0x5a>
      pdata16bits = NULL;
 80049a2:	2600      	movs	r6, #0
 80049a4:	e7de      	b.n	8004964 <HAL_UART_Receive+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	9700      	str	r7, [sp, #0]
 80049a8:	464b      	mov	r3, r9
 80049aa:	2200      	movs	r2, #0
 80049ac:	2120      	movs	r1, #32
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff feea 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 80049b4:	b9a0      	cbnz	r0, 80049e0 <HAL_UART_Receive+0xe8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049ba:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 80049be:	b945      	cbnz	r5, 80049d2 <HAL_UART_Receive+0xda>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049c0:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80049c4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80049c8:	3a01      	subs	r2, #1
 80049ca:	b292      	uxth	r2, r2
 80049cc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80049d0:	e7cb      	b.n	800496a <HAL_UART_Receive+0x72>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80049d2:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 80049d6:	e7f5      	b.n	80049c4 <HAL_UART_Receive+0xcc>
      return  HAL_ERROR;
 80049d8:	2001      	movs	r0, #1
 80049da:	e7cc      	b.n	8004976 <HAL_UART_Receive+0x7e>
    return HAL_BUSY;
 80049dc:	2002      	movs	r0, #2
 80049de:	e7ca      	b.n	8004976 <HAL_UART_Receive+0x7e>
        return HAL_TIMEOUT;
 80049e0:	2003      	movs	r0, #3
 80049e2:	e7c8      	b.n	8004976 <HAL_UART_Receive+0x7e>

080049e4 <UART_CheckIdleState>:
{
 80049e4:	b530      	push	{r4, r5, lr}
 80049e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	2500      	movs	r5, #0
{
 80049ea:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80049f0:	f7fd f8e4 	bl	8001bbc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80049fa:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049fc:	d415      	bmi.n	8004a2a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	0752      	lsls	r2, r2, #29
 8004a04:	d509      	bpl.n	8004a1a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a06:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004a0a:	9200      	str	r2, [sp, #0]
 8004a0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a10:	2200      	movs	r2, #0
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff feb8 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004a18:	b9a0      	cbnz	r0, 8004a44 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004a1a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004a1e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004a20:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a24:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8004a28:	e00d      	b.n	8004a46 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a2a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004a2e:	9200      	str	r2, [sp, #0]
 8004a30:	9003      	str	r0, [sp, #12]
 8004a32:	462a      	mov	r2, r5
 8004a34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7ff fea5 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d0dc      	beq.n	80049fe <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004a44:	2003      	movs	r0, #3
}
 8004a46:	b005      	add	sp, #20
 8004a48:	bd30      	pop	{r4, r5, pc}

08004a4a <HAL_UART_Init>:
{
 8004a4a:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	b340      	cbz	r0, 8004aa2 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a50:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004a52:	b91b      	cbnz	r3, 8004a5c <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004a54:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004a58:	f7fc fff4 	bl	8001a44 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004a5c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004a5e:	2324      	movs	r3, #36	; 0x24
 8004a60:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004a62:	6813      	ldr	r3, [r2, #0]
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7ff fcf6 	bl	800445c <UART_SetConfig>
 8004a70:	2801      	cmp	r0, #1
 8004a72:	d016      	beq.n	8004aa2 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a76:	b113      	cbz	r3, 8004a7e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fe31 	bl	80046e0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a8e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004a96:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004a98:	601a      	str	r2, [r3, #0]
}
 8004a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004a9e:	f7ff bfa1 	b.w	80049e4 <UART_CheckIdleState>
}
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	bd10      	pop	{r4, pc}
	...

08004aa8 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8004aa8:	6883      	ldr	r3, [r0, #8]
{
 8004aaa:	b510      	push	{r4, lr}
  UART_MASK_COMPUTATION(huart);
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8004ab0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ab4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004ab8:	f04f 0200 	mov.w	r2, #0
  huart->pRxBuffPtr  = pData;
 8004abc:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8004abe:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8004ac0:	d132      	bne.n	8004b28 <UART_Start_Receive_IT+0x80>
 8004ac2:	6903      	ldr	r3, [r0, #16]
 8004ac4:	bb73      	cbnz	r3, 8004b24 <UART_Start_Receive_IT+0x7c>
 8004ac6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004aca:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad4:	2322      	movs	r3, #34	; 0x22
 8004ad6:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	f102 0308 	add.w	r3, r2, #8
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	3208      	adds	r2, #8
 8004ae8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004aec:	6802      	ldr	r2, [r0, #0]
 8004aee:	2900      	cmp	r1, #0
 8004af0:	d1f2      	bne.n	8004ad8 <UART_Start_Receive_IT+0x30>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af2:	6883      	ldr	r3, [r0, #8]
 8004af4:	6901      	ldr	r1, [r0, #16]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	d126      	bne.n	8004b4a <UART_Start_Receive_IT+0xa2>
    huart->RxISR = UART_RxISR_8BIT;
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <UART_Start_Receive_IT+0xb8>)
 8004afe:	4c19      	ldr	r4, [pc, #100]	; (8004b64 <UART_Start_Receive_IT+0xbc>)
 8004b00:	2900      	cmp	r1, #0
 8004b02:	bf18      	it	ne
 8004b04:	4623      	movne	r3, r4
 8004b06:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b0e:	b1f1      	cbz	r1, 8004b4e <UART_Start_Receive_IT+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b14:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	e842 3100 	strex	r1, r3, [r2]
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d1f7      	bne.n	8004b10 <UART_Start_Receive_IT+0x68>
}
 8004b20:	2000      	movs	r0, #0
 8004b22:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8004b24:	23ff      	movs	r3, #255	; 0xff
 8004b26:	e7d0      	b.n	8004aca <UART_Start_Receive_IT+0x22>
 8004b28:	b923      	cbnz	r3, 8004b34 <UART_Start_Receive_IT+0x8c>
 8004b2a:	6903      	ldr	r3, [r0, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f9      	beq.n	8004b24 <UART_Start_Receive_IT+0x7c>
 8004b30:	237f      	movs	r3, #127	; 0x7f
 8004b32:	e7ca      	b.n	8004aca <UART_Start_Receive_IT+0x22>
 8004b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b38:	d104      	bne.n	8004b44 <UART_Start_Receive_IT+0x9c>
 8004b3a:	6903      	ldr	r3, [r0, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f7      	beq.n	8004b30 <UART_Start_Receive_IT+0x88>
 8004b40:	233f      	movs	r3, #63	; 0x3f
 8004b42:	e7c2      	b.n	8004aca <UART_Start_Receive_IT+0x22>
 8004b44:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8004b48:	e7c1      	b.n	8004ace <UART_Start_Receive_IT+0x26>
    huart->RxISR = UART_RxISR_8BIT;
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <UART_Start_Receive_IT+0xbc>)
 8004b4c:	e7db      	b.n	8004b06 <UART_Start_Receive_IT+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b52:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	e842 3100 	strex	r1, r3, [r2]
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	d1f7      	bne.n	8004b4e <UART_Start_Receive_IT+0xa6>
 8004b5e:	e7df      	b.n	8004b20 <UART_Start_Receive_IT+0x78>
 8004b60:	080043c1 	.word	0x080043c1
 8004b64:	08004321 	.word	0x08004321

08004b68 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b68:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004b6a:	2b20      	cmp	r3, #32
{
 8004b6c:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b6e:	d11f      	bne.n	8004bb0 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8004b70:	b1d9      	cbz	r1, 8004baa <HAL_UART_Receive_IT+0x42>
 8004b72:	b1d2      	cbz	r2, 8004baa <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8004b74:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d019      	beq.n	8004bb0 <HAL_UART_Receive_IT+0x48>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b84:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_UART_Receive_IT+0x4c>)
 8004b8a:	429c      	cmp	r4, r3
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	d507      	bpl.n	8004ba4 <HAL_UART_Receive_IT+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	e844 3500 	strex	r5, r3, [r4]
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	d1f7      	bne.n	8004b94 <HAL_UART_Receive_IT+0x2c>
}
 8004ba4:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ba6:	f7ff bf7f 	b.w	8004aa8 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8004baa:	2001      	movs	r0, #1
}
 8004bac:	bc30      	pop	{r4, r5}
 8004bae:	4770      	bx	lr
    return HAL_BUSY;
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	e7fb      	b.n	8004bac <HAL_UART_Receive_IT+0x44>
 8004bb4:	40008000 	.word	0x40008000

08004bb8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bb8:	4770      	bx	lr
	...

08004bbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	b513      	push	{r0, r1, r4, lr}
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	a805      	add	r0, sp, #20
 8004bc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc8:	68e3      	ldr	r3, [r4, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8004bca:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <USB_CoreInit+0x70>)
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd0:	60e3      	str	r3, [r4, #12]
  __IO uint32_t count = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9301      	str	r3, [sp, #4]
    count++;
 8004bd6:	9b01      	ldr	r3, [sp, #4]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004bdc:	9b01      	ldr	r3, [sp, #4]
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d81e      	bhi.n	8004c20 <USB_CoreInit+0x64>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	daf6      	bge.n	8004bd6 <USB_CoreInit+0x1a>

  /* Core Soft Reset */
  count = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bec:	6923      	ldr	r3, [r4, #16]

  do
  {
    count++;

    if (count > 200000U)
 8004bee:	4a0f      	ldr	r2, [pc, #60]	; (8004c2c <USB_CoreInit+0x70>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	6123      	str	r3, [r4, #16]
    count++;
 8004bf6:	9b01      	ldr	r3, [sp, #4]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004bfc:	9b01      	ldr	r3, [sp, #4]
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d80e      	bhi.n	8004c20 <USB_CoreInit+0x64>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c02:	6920      	ldr	r0, [r4, #16]
 8004c04:	f010 0001 	ands.w	r0, r0, #1
 8004c08:	d1f5      	bne.n	8004bf6 <USB_CoreInit+0x3a>
  if (cfg.battery_charging_enable == 0U)
 8004c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c0c:	b953      	cbnz	r3, 8004c24 <USB_CoreInit+0x68>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c14:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004c16:	b002      	add	sp, #8
 8004c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c1c:	b004      	add	sp, #16
 8004c1e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004c20:	2003      	movs	r0, #3
 8004c22:	e7f2      	b.n	8004c0a <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	e7f3      	b.n	8004c14 <USB_CoreInit+0x58>
 8004c2c:	00030d40 	.word	0x00030d40

08004c30 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c30:	6883      	ldr	r3, [r0, #8]
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6083      	str	r3, [r0, #8]
}
 8004c38:	2000      	movs	r0, #0
 8004c3a:	4770      	bx	lr

08004c3c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c3c:	6883      	ldr	r3, [r0, #8]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	6083      	str	r3, [r0, #8]
}
 8004c44:	2000      	movs	r0, #0
 8004c46:	4770      	bx	lr

08004c48 <USB_SetCurrentMode>:
{
 8004c48:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c4a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004c4c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c4e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8004c52:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c54:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004c56:	d110      	bne.n	8004c7a <USB_SetCurrentMode+0x32>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c58:	68c3      	ldr	r3, [r0, #12]
 8004c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c5e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004c60:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004c62:	2001      	movs	r0, #1
 8004c64:	f7fc ffb0 	bl	8001bc8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004c68:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c6a:	07d9      	lsls	r1, r3, #31
      ms++;
 8004c6c:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c70:	d415      	bmi.n	8004c9e <USB_SetCurrentMode+0x56>
 8004c72:	2c32      	cmp	r4, #50	; 0x32
 8004c74:	d1f5      	bne.n	8004c62 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8004c76:	2001      	movs	r0, #1
}
 8004c78:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8004c7a:	2900      	cmp	r1, #0
 8004c7c:	d1fb      	bne.n	8004c76 <USB_SetCurrentMode+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c7e:	68c3      	ldr	r3, [r0, #12]
 8004c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c84:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004c86:	460c      	mov	r4, r1
      HAL_Delay(1U);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f7fc ff9d 	bl	8001bc8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004c8e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c90:	07da      	lsls	r2, r3, #31
      ms++;
 8004c92:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c96:	d502      	bpl.n	8004c9e <USB_SetCurrentMode+0x56>
 8004c98:	2c32      	cmp	r4, #50	; 0x32
 8004c9a:	d1f5      	bne.n	8004c88 <USB_SetCurrentMode+0x40>
 8004c9c:	e7eb      	b.n	8004c76 <USB_SetCurrentMode+0x2e>
    return HAL_ERROR;
 8004c9e:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8004ca2:	4258      	negs	r0, r3
 8004ca4:	4158      	adcs	r0, r3
 8004ca6:	e7e7      	b.n	8004c78 <USB_SetCurrentMode+0x30>

08004ca8 <USB_FlushTxFifo>:
{
 8004ca8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004caa:	2300      	movs	r3, #0
    if (count > 200000U)
 8004cac:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8004cae:	9301      	str	r3, [sp, #4]
    count++;
 8004cb0:	9b01      	ldr	r3, [sp, #4]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004cb6:	9b01      	ldr	r3, [sp, #4]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d816      	bhi.n	8004cea <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cbc:	6903      	ldr	r3, [r0, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	daf6      	bge.n	8004cb0 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cc2:	0189      	lsls	r1, r1, #6
  count = 0U;
 8004cc4:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cc6:	f041 0120 	orr.w	r1, r1, #32
    if (count > 200000U)
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <USB_FlushTxFifo+0x48>)
  count = 0U;
 8004ccc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cce:	6101      	str	r1, [r0, #16]
    count++;
 8004cd0:	9b01      	ldr	r3, [sp, #4]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d806      	bhi.n	8004cea <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cdc:	6903      	ldr	r3, [r0, #16]
 8004cde:	f013 0320 	ands.w	r3, r3, #32
 8004ce2:	d1f5      	bne.n	8004cd0 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8004ce4:	4618      	mov	r0, r3
}
 8004ce6:	b002      	add	sp, #8
 8004ce8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004cea:	2003      	movs	r0, #3
 8004cec:	e7fb      	b.n	8004ce6 <USB_FlushTxFifo+0x3e>
 8004cee:	bf00      	nop
 8004cf0:	00030d40 	.word	0x00030d40

08004cf4 <USB_FlushRxFifo>:
{
 8004cf4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004cf6:	2300      	movs	r3, #0
    if (count > 200000U)
 8004cf8:	4a0f      	ldr	r2, [pc, #60]	; (8004d38 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8004cfa:	9301      	str	r3, [sp, #4]
    count++;
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004d02:	9b01      	ldr	r3, [sp, #4]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d814      	bhi.n	8004d32 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d08:	6903      	ldr	r3, [r0, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	daf6      	bge.n	8004cfc <USB_FlushRxFifo+0x8>
  count = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <USB_FlushRxFifo+0x44>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d14:	2310      	movs	r3, #16
 8004d16:	6103      	str	r3, [r0, #16]
    count++;
 8004d18:	9b01      	ldr	r3, [sp, #4]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004d1e:	9b01      	ldr	r3, [sp, #4]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d806      	bhi.n	8004d32 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d24:	6903      	ldr	r3, [r0, #16]
 8004d26:	f013 0310 	ands.w	r3, r3, #16
 8004d2a:	d1f5      	bne.n	8004d18 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8004d2c:	4618      	mov	r0, r3
}
 8004d2e:	b002      	add	sp, #8
 8004d30:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004d32:	2003      	movs	r0, #3
 8004d34:	e7fb      	b.n	8004d2e <USB_FlushRxFifo+0x3a>
 8004d36:	bf00      	nop
 8004d38:	00030d40 	.word	0x00030d40

08004d3c <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8004d3c:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d3e:	3201      	adds	r2, #1
  count32b = ((uint32_t)len + 3U) / 4U;
 8004d40:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d42:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004d46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	d101      	bne.n	8004d52 <USB_WritePacket+0x16>
}
 8004d4e:	2000      	movs	r0, #0
 8004d50:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d52:	f851 2b04 	ldr.w	r2, [r1], #4
 8004d56:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < count32b; i++)
 8004d58:	e7f7      	b.n	8004d4a <USB_WritePacket+0xe>

08004d5a <USB_ReadPacket>:
{
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d5e:	0890      	lsrs	r0, r2, #2
  for (i = 0U; i < count32b; i++)
 8004d60:	2400      	movs	r4, #0
  uint16_t remaining_bytes = len % 4U;
 8004d62:	f002 0203 	and.w	r2, r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d66:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8004d6a:	4284      	cmp	r4, r0
 8004d6c:	d310      	bcc.n	8004d90 <USB_ReadPacket+0x36>
 8004d6e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  if (remaining_bytes != 0U)
 8004d72:	b162      	cbz	r2, 8004d8e <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d78:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 8004d7a:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d7c:	00d9      	lsls	r1, r3, #3
 8004d7e:	fa24 f101 	lsr.w	r1, r4, r1
 8004d82:	54c1      	strb	r1, [r0, r3]
      i++;
 8004d84:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 8004d86:	b299      	uxth	r1, r3
 8004d88:	428a      	cmp	r2, r1
 8004d8a:	d1f7      	bne.n	8004d7c <USB_ReadPacket+0x22>
      pDest++;
 8004d8c:	4410      	add	r0, r2
}
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d90:	682e      	ldr	r6, [r5, #0]
 8004d92:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 0U; i < count32b; i++)
 8004d96:	3401      	adds	r4, #1
 8004d98:	e7e7      	b.n	8004d6a <USB_ReadPacket+0x10>

08004d9a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004d9a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004d9c:	6980      	ldr	r0, [r0, #24]
}
 8004d9e:	4010      	ands	r0, r2
 8004da0:	4770      	bx	lr

08004da2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004da2:	6940      	ldr	r0, [r0, #20]
}
 8004da4:	f000 0001 	and.w	r0, r0, #1
 8004da8:	4770      	bx	lr
	...

08004dac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dac:	b084      	sub	sp, #16
 8004dae:	b570      	push	{r4, r5, r6, lr}
 8004db0:	ad05      	add	r5, sp, #20
 8004db2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004db6:	2500      	movs	r5, #0
 8004db8:	f8c0 5e00 	str.w	r5, [r0, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004dbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dc2:	6383      	str	r3, [r0, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004dc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dca:	6383      	str	r3, [r0, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004dcc:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dd8:	2110      	movs	r1, #16
{
 8004dda:	4604      	mov	r4, r0
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ddc:	f7ff ff64 	bl	8004ca8 <USB_FlushTxFifo>
 8004de0:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7ff ff86 	bl	8004cf4 <USB_FlushRxFifo>
 8004de8:	4308      	orrs	r0, r1
 8004dea:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 8004dec:	1b40      	subs	r0, r0, r5
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004dee:	9e06      	ldr	r6, [sp, #24]
    ret = HAL_ERROR;
 8004df0:	bf18      	it	ne
 8004df2:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 8004df4:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 8004df8:	462b      	mov	r3, r5
 8004dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8004dfe:	429e      	cmp	r6, r3
 8004e00:	d115      	bne.n	8004e2e <USB_HostInit+0x82>

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004e02:	2380      	movs	r3, #128	; 0x80
  USBx->GINTMSK = 0U;
 8004e04:	61a5      	str	r5, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e06:	6161      	str	r1, [r4, #20]
  USBx->GRXFSIZ  = 0x80U;
 8004e08:	6263      	str	r3, [r4, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e0a:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004e0e:	62a3      	str	r3, [r4, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <USB_HostInit+0x8c>)
 8004e12:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e16:	69a3      	ldr	r3, [r4, #24]
 8004e18:	f043 0310 	orr.w	r3, r3, #16
 8004e1c:	61a3      	str	r3, [r4, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004e1e:	69a2      	ldr	r2, [r4, #24]
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <USB_HostInit+0x90>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8004e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e2a:	b004      	add	sp, #16
 8004e2c:	4770      	bx	lr
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004e2e:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e30:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8004e32:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e34:	3220      	adds	r2, #32
 8004e36:	e7e2      	b.n	8004dfe <USB_HostInit+0x52>
 8004e38:	004000e0 	.word	0x004000e0
 8004e3c:	a3200008 	.word	0xa3200008

08004e40 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e40:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004e44:	f023 0303 	bic.w	r3, r3, #3
{
 8004e48:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e4a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e4e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8004e52:	f001 0303 	and.w	r3, r1, #3
 8004e56:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8004e58:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e5a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e5e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8004e62:	d104      	bne.n	8004e6e <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8004e64:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8004e68:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8004e6e:	2902      	cmp	r1, #2
 8004e70:	d1fb      	bne.n	8004e6a <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8004e72:	f241 7370 	movw	r3, #6000	; 0x1770
 8004e76:	e7f7      	b.n	8004e68 <USB_InitFSLSPClkSel+0x28>

08004e78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8004e7a:	2500      	movs	r5, #0
 8004e7c:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004e7e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004e82:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e8a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004e92:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004e94:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8004e98:	2064      	movs	r0, #100	; 0x64
 8004e9a:	f7fc fe95 	bl	8001bc8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004e9e:	9b01      	ldr	r3, [sp, #4]
 8004ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8004ea8:	200a      	movs	r0, #10
 8004eaa:	f7fc fe8d 	bl	8001bc8 <HAL_Delay>

  return HAL_OK;
}
 8004eae:	4628      	mov	r0, r5
 8004eb0:	b003      	add	sp, #12
 8004eb2:	bd30      	pop	{r4, r5, pc}

08004eb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004eb4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004eba:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004ebe:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ec0:	9b01      	ldr	r3, [sp, #4]
 8004ec2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ec6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	04da      	lsls	r2, r3, #19
 8004ecc:	d406      	bmi.n	8004edc <USB_DriveVbus+0x28>
 8004ece:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ed0:	bf02      	ittt	eq
 8004ed2:	9b01      	ldreq	r3, [sp, #4]
 8004ed4:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004ed8:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004edc:	9b01      	ldr	r3, [sp, #4]
 8004ede:	04db      	lsls	r3, r3, #19
 8004ee0:	d505      	bpl.n	8004eee <USB_DriveVbus+0x3a>
 8004ee2:	b921      	cbnz	r1, 8004eee <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004ee4:	9b01      	ldr	r3, [sp, #4]
 8004ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eea:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8004eee:	2000      	movs	r0, #0
 8004ef0:	b002      	add	sp, #8
 8004ef2:	4770      	bx	lr

08004ef4 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004efa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004efe:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004f00:	9801      	ldr	r0, [sp, #4]
}
 8004f02:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004f06:	b002      	add	sp, #8
 8004f08:	4770      	bx	lr

08004f0a <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004f0a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004f0e:	6880      	ldr	r0, [r0, #8]
}
 8004f10:	b280      	uxth	r0, r0
 8004f12:	4770      	bx	lr

08004f14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004f18:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8004f1c:	f507 6ca0 	add.w	ip, r7, #1280	; 0x500
{
 8004f20:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8004f24:	461c      	mov	r4, r3
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	f8cc 3008 	str.w	r3, [ip, #8]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f2e:	fa4f fe82 	sxtb.w	lr, r2
  switch (ep_type)
 8004f32:	2d03      	cmp	r5, #3
 8004f34:	d866      	bhi.n	8005004 <USB_HC_Init+0xf0>
 8004f36:	e8df f005 	tbb	[pc, r5]
 8004f3a:	5902      	.short	0x5902
 8004f3c:	5602      	.short	0x5602
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f3e:	f240 439d 	movw	r3, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f42:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f46:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004f4a:	da05      	bge.n	8004f58 <USB_HC_Init+0x44>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f4c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	f8cc 300c 	str.w	r3, [ip, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f58:	2600      	movs	r6, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004f5a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004f5e:	f043 0302 	orr.w	r3, r3, #2
 8004f62:	f8cc 300c 	str.w	r3, [ip, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f66:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
 8004f6a:	f001 030f 	and.w	r3, r1, #15
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4099      	lsls	r1, r3
 8004f72:	ea41 0108 	orr.w	r1, r1, r8
 8004f76:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f7a:	6983      	ldr	r3, [r0, #24]
 8004f7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8004f80:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f84:	6183      	str	r3, [r0, #24]
    HCcharEpDir = 0U;
 8004f86:	bfb4      	ite	lt
 8004f88:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
 8004f8c:	2100      	movge	r1, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f8e:	f7ff ffb1 	bl	8004ef4 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f92:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d136      	bne.n	8005008 <USB_HC_Init+0xf4>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f9a:	2802      	cmp	r0, #2
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2000      	moveq	r0, #0
 8004fa0:	f44f 3000 	movne.w	r0, #131072	; 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fa4:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fa6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004faa:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fae:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fb2:	02d2      	lsls	r2, r2, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fb4:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fb6:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	04aa      	lsls	r2, r5, #18
 8004fbe:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004fc2:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	4303      	orrs	r3, r0

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004fc8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fcc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004fd0:	2d01      	cmp	r5, #1
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004fd2:	bf02      	ittt	eq
 8004fd4:	f8d7 3500 	ldreq.w	r3, [r7, #1280]	; 0x500
 8004fd8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8004fdc:	f8c7 3500 	streq.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fe6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004fea:	e7aa      	b.n	8004f42 <USB_HC_Init+0x2e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fec:	f240 2325 	movw	r3, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8004ff0:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ff4:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004ff8:	daae      	bge.n	8004f58 <USB_HC_Init+0x44>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004ffa:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004ffe:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005002:	e7a7      	b.n	8004f54 <USB_HC_Init+0x40>
  switch (ep_type)
 8005004:	2601      	movs	r6, #1
 8005006:	e7a8      	b.n	8004f5a <USB_HC_Init+0x46>
    HCcharLowSpeed = 0U;
 8005008:	2000      	movs	r0, #0
 800500a:	e7cb      	b.n	8004fa4 <USB_HC_Init+0x90>

0800500c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800500c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800500e:	694b      	ldr	r3, [r1, #20]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005010:	784a      	ldrb	r2, [r1, #1]
  if (hc->xfer_len > 0U)
 8005012:	2b00      	cmp	r3, #0
 8005014:	d052      	beq.n	80050bc <USB_HC_StartXfer+0xb0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005016:	890d      	ldrh	r5, [r1, #8]
 8005018:	1e5c      	subs	r4, r3, #1
 800501a:	442c      	add	r4, r5
 800501c:	fbb4 f4f5 	udiv	r4, r4, r5
 8005020:	b2a4      	uxth	r4, r4
 8005022:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8005026:	bf28      	it	cs
 8005028:	f44f 7480 	movcs.w	r4, #256	; 0x100

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800502c:	78ce      	ldrb	r6, [r1, #3]
 800502e:	2e00      	cmp	r6, #0
 8005030:	d046      	beq.n	80050c0 <USB_HC_StartXfer+0xb4>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005032:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8005036:	fb04 fc0c 	mul.w	ip, r4, ip
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800503a:	7a8f      	ldrb	r7, [r1, #10]
 800503c:	f8c1 c010 	str.w	ip, [r1, #16]
 8005040:	077f      	lsls	r7, r7, #29
 8005042:	f007 47c0 	and.w	r7, r7, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005046:	eb00 1542 	add.w	r5, r0, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800504a:	ea47 44c4 	orr.w	r4, r7, r4, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800504e:	f3cc 0c12 	ubfx	ip, ip, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005052:	ea44 040c 	orr.w	r4, r4, ip

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005056:	f500 6780 	add.w	r7, r0, #1024	; 0x400
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800505a:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800505e:	68bc      	ldr	r4, [r7, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005060:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8005064:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8005068:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800506c:	43e4      	mvns	r4, r4
 800506e:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8005072:	0764      	lsls	r4, r4, #29
 8005074:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8005078:	ea44 040c 	orr.w	r4, r4, ip
 800507c:	f8c5 4500 	str.w	r4, [r5, #1280]	; 0x500

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005080:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
 8005084:	9401      	str	r4, [sp, #4]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005086:	9c01      	ldr	r4, [sp, #4]
 8005088:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 800508c:	9401      	str	r4, [sp, #4]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800508e:	9c01      	ldr	r4, [sp, #4]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005090:	f505 6ea0 	add.w	lr, r5, #1280	; 0x500
  if (hc->ep_is_in != 0U)
 8005094:	b1b6      	cbz	r6, 80050c4 <USB_HC_StartXfer+0xb8>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005096:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800509a:	9401      	str	r4, [sp, #4]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800509c:	9c01      	ldr	r4, [sp, #4]
 800509e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80050a2:	9401      	str	r4, [sp, #4]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050a4:	9c01      	ldr	r4, [sp, #4]
 80050a6:	f8c5 4500 	str.w	r4, [r5, #1280]	; 0x500

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050aa:	b9ee      	cbnz	r6, 80050e8 <USB_HC_StartXfer+0xdc>
 80050ac:	b1e3      	cbz	r3, 80050e8 <USB_HC_StartXfer+0xdc>
  {
    switch (hc->ep_type)
 80050ae:	79cc      	ldrb	r4, [r1, #7]
 80050b0:	2c03      	cmp	r4, #3
 80050b2:	d815      	bhi.n	80050e0 <USB_HC_StartXfer+0xd4>
 80050b4:	e8df f004 	tbb	[pc, r4]
 80050b8:	1b091b09 	.word	0x1b091b09
    num_packets = 1U;
 80050bc:	2401      	movs	r4, #1
 80050be:	e7b5      	b.n	800502c <USB_HC_StartXfer+0x20>
  if (hc->xfer_len > 0U)
 80050c0:	469c      	mov	ip, r3
 80050c2:	e7ba      	b.n	800503a <USB_HC_StartXfer+0x2e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050c4:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 80050c8:	e7e7      	b.n	800509a <USB_HC_StartXfer+0x8e>
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050ca:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050cc:	1cdc      	adds	r4, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050ce:	b2ad      	uxth	r5, r5
 80050d0:	f3c4 048f 	ubfx	r4, r4, #2, #16
 80050d4:	42a5      	cmp	r5, r4
 80050d6:	d203      	bcs.n	80050e0 <USB_HC_StartXfer+0xd4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050d8:	6984      	ldr	r4, [r0, #24]
 80050da:	f044 0420 	orr.w	r4, r4, #32
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80050de:	6184      	str	r4, [r0, #24]
      default:
        break;
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80050e0:	68c9      	ldr	r1, [r1, #12]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f7ff fe2a 	bl	8004d3c <USB_WritePacket>
  }

  return HAL_OK;
}
 80050e8:	2000      	movs	r0, #0
 80050ea:	b003      	add	sp, #12
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80050ee:	693d      	ldr	r5, [r7, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050f0:	1cdc      	adds	r4, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80050f2:	b2ad      	uxth	r5, r5
 80050f4:	f3c4 048f 	ubfx	r4, r4, #2, #16
 80050f8:	42a5      	cmp	r5, r4
 80050fa:	d2f1      	bcs.n	80050e0 <USB_HC_StartXfer+0xd4>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80050fc:	6984      	ldr	r4, [r0, #24]
 80050fe:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8005102:	e7ec      	b.n	80050de <USB_HC_StartXfer+0xd2>

08005104 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005104:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005108:	6940      	ldr	r0, [r0, #20]
}
 800510a:	b280      	uxth	r0, r0
 800510c:	4770      	bx	lr

0800510e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800510e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8005110:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005112:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 8005116:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005118:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800511c:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005120:	6885      	ldr	r5, [r0, #8]
 8005122:	06ad      	lsls	r5, r5, #26
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005124:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8005128:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800512c:	d501      	bpl.n	8005132 <USB_HC_Halt+0x24>
 800512e:	2c00      	cmp	r4, #0
 8005130:	da25      	bge.n	800517e <USB_HC_Halt+0x70>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005132:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005136:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800513a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800513e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005142:	d11f      	bne.n	8005184 <USB_HC_Halt+0x76>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005144:	6883      	ldr	r3, [r0, #8]
 8005146:	069b      	lsls	r3, r3, #26
 8005148:	d419      	bmi.n	800517e <USB_HC_Halt+0x70>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800514a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800514c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005150:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005154:	d132      	bne.n	80051bc <USB_HC_Halt+0xae>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800515a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800515e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005166:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	3301      	adds	r3, #1
 800516e:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8005170:	9b01      	ldr	r3, [sp, #4]
 8005172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005176:	d802      	bhi.n	800517e <USB_HC_Halt+0x70>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005178:	6813      	ldr	r3, [r2, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dbf5      	blt.n	800516a <USB_HC_Halt+0x5c>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800517e:	2000      	movs	r0, #0
 8005180:	b003      	add	sp, #12
 8005182:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005184:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8005188:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800518c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005190:	d114      	bne.n	80051bc <USB_HC_Halt+0xae>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005196:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800519a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800519e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	3301      	adds	r3, #1
 80051aa:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b2:	d8e4      	bhi.n	800517e <USB_HC_Halt+0x70>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051b4:	6813      	ldr	r3, [r2, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	dbf5      	blt.n	80051a6 <USB_HC_Halt+0x98>
 80051ba:	e7e0      	b.n	800517e <USB_HC_Halt+0x70>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80051c4:	e7db      	b.n	800517e <USB_HC_Halt+0x70>

080051c6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80051c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	9301      	str	r3, [sp, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051cc:	6883      	ldr	r3, [r0, #8]
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	6083      	str	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051d4:	2110      	movs	r1, #16
{
 80051d6:	4604      	mov	r4, r0
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051d8:	f7ff fd66 	bl	8004ca8 <USB_FlushTxFifo>
 80051dc:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051de:	4620      	mov	r0, r4
 80051e0:	f7ff fd88 	bl	8004cf4 <USB_FlushRxFifo>
 80051e4:	4308      	orrs	r0, r1
 80051e6:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 80051e8:	3800      	subs	r0, #0
 80051ea:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80051ee:	bf18      	it	ne
 80051f0:	2001      	movne	r0, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051f2:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
    ret = HAL_ERROR;
 80051f6:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
 80051f8:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051fa:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 80051fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8005202:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 8005206:	42a9      	cmp	r1, r5
 8005208:	d1f6      	bne.n	80051f8 <USB_StopHost+0x32>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800520a:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800520c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005210:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8005214:	601a      	str	r2, [r3, #0]

    do
    {
      count++;
 8005216:	9a01      	ldr	r2, [sp, #4]
 8005218:	3201      	adds	r2, #1
 800521a:	9201      	str	r2, [sp, #4]

      if (count > 1000U)
 800521c:	9a01      	ldr	r2, [sp, #4]
 800521e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005222:	d802      	bhi.n	800522a <USB_StopHost+0x64>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	2a00      	cmp	r2, #0
 8005228:	dbf5      	blt.n	8005216 <USB_StopHost+0x50>
  for (i = 0U; i <= 15U; i++)
 800522a:	3320      	adds	r3, #32
 800522c:	42ab      	cmp	r3, r5
 800522e:	d1ec      	bne.n	800520a <USB_StopHost+0x44>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
 8005234:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005238:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 8005242:	b003      	add	sp, #12
 8005244:	bd30      	pop	{r4, r5, pc}

08005246 <USBH_CDC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8005246:	2000      	movs	r0, #0
 8005248:	4770      	bx	lr

0800524a <USBH_CDC_InterfaceDeInit>:
{
 800524a:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800524c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005250:	69dd      	ldr	r5, [r3, #28]
  if (CDC_Handle->CommItf.NotifPipe)
 8005252:	7829      	ldrb	r1, [r5, #0]
{
 8005254:	4604      	mov	r4, r0
  if (CDC_Handle->CommItf.NotifPipe)
 8005256:	b139      	cbz	r1, 8005268 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005258:	f000 feb3 	bl	8005fc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800525c:	7829      	ldrb	r1, [r5, #0]
 800525e:	4620      	mov	r0, r4
 8005260:	f000 fecc 	bl	8005ffc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005264:	2300      	movs	r3, #0
 8005266:	702b      	strb	r3, [r5, #0]
  if (CDC_Handle->DataItf.InPipe)
 8005268:	7b29      	ldrb	r1, [r5, #12]
 800526a:	b141      	cbz	r1, 800527e <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800526c:	4620      	mov	r0, r4
 800526e:	f000 fea8 	bl	8005fc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005272:	7b29      	ldrb	r1, [r5, #12]
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fec1 	bl	8005ffc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800527a:	2300      	movs	r3, #0
 800527c:	732b      	strb	r3, [r5, #12]
  if (CDC_Handle->DataItf.OutPipe)
 800527e:	7b69      	ldrb	r1, [r5, #13]
 8005280:	b141      	cbz	r1, 8005294 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005282:	4620      	mov	r0, r4
 8005284:	f000 fe9d 	bl	8005fc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005288:	7b69      	ldrb	r1, [r5, #13]
 800528a:	4620      	mov	r0, r4
 800528c:	f000 feb6 	bl	8005ffc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005290:	2300      	movs	r3, #0
 8005292:	736b      	strb	r3, [r5, #13]
  if (phost->pActiveClass->pData)
 8005294:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005298:	69d8      	ldr	r0, [r3, #28]
 800529a:	b128      	cbz	r0, 80052a8 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free(phost->pActiveClass->pData);
 800529c:	f002 f876 	bl	800738c <__wrap_free>
    phost->pActiveClass->pData = 0U;
 80052a0:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80052a4:	2200      	movs	r2, #0
 80052a6:	61da      	str	r2, [r3, #28]
}
 80052a8:	2000      	movs	r0, #0
 80052aa:	bd38      	pop	{r3, r4, r5, pc}

080052ac <USBH_CDC_InterfaceInit>:
{
 80052ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80052b0:	2202      	movs	r2, #2
 80052b2:	2301      	movs	r3, #1
 80052b4:	4611      	mov	r1, r2
{
 80052b6:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80052b8:	f000 f9c9 	bl	800564e <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80052bc:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80052be:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80052c0:	d904      	bls.n	80052cc <USBH_CDC_InterfaceInit+0x20>
    return USBH_FAIL;
 80052c2:	2702      	movs	r7, #2
}
 80052c4:	4638      	mov	r0, r7
 80052c6:	b004      	add	sp, #16
 80052c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 80052cc:	4601      	mov	r1, r0
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 f9b4 	bl	800563c <USBH_SelectInterface>
  if (status != USBH_OK)
 80052d4:	4607      	mov	r7, r0
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d1f3      	bne.n	80052c2 <USBH_CDC_InterfaceInit+0x16>
  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80052da:	2050      	movs	r0, #80	; 0x50
 80052dc:	f8d5 837c 	ldr.w	r8, [r5, #892]	; 0x37c
 80052e0:	f002 f82c 	bl	800733c <__wrap_malloc>
 80052e4:	4604      	mov	r4, r0
 80052e6:	f8c8 001c 	str.w	r0, [r8, #28]
  if (CDC_Handle == NULL)
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d0e9      	beq.n	80052c2 <USBH_CDC_InterfaceInit+0x16>
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80052ee:	2250      	movs	r2, #80	; 0x50
 80052f0:	4639      	mov	r1, r7
 80052f2:	f006 fb81 	bl	800b9f8 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80052f6:	201a      	movs	r0, #26
 80052f8:	fb00 5606 	mla	r6, r0, r6, r5
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80052fc:	4628      	mov	r0, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80052fe:	f996 234e 	ldrsb.w	r2, [r6, #846]	; 0x34e
 8005302:	f896 334e 	ldrb.w	r3, [r6, #846]	; 0x34e
 8005306:	2a00      	cmp	r2, #0
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005308:	bfb8      	it	lt
 800530a:	7063      	strblt	r3, [r4, #1]
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800530c:	7861      	ldrb	r1, [r4, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800530e:	bfbc      	itt	lt
 8005310:	f8b6 3350 	ldrhlt.w	r3, [r6, #848]	; 0x350
 8005314:	8163      	strhlt	r3, [r4, #10]
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005316:	f000 fe59 	bl	8005fcc <USBH_AllocPipe>
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800531a:	8963      	ldrh	r3, [r4, #10]
 800531c:	9302      	str	r3, [sp, #8]
 800531e:	2303      	movs	r3, #3
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 8005326:	7862      	ldrb	r2, [r4, #1]
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005328:	7020      	strb	r0, [r4, #0]
 800532a:	4601      	mov	r1, r0
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	4628      	mov	r0, r5
 8005330:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8005334:	f000 fe36 	bl	8005fa4 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005338:	7821      	ldrb	r1, [r4, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	4628      	mov	r0, r5
 800533e:	f000 ff4c 	bl	80061da <USBH_LL_SetToggle>
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005342:	2300      	movs	r3, #0
 8005344:	461a      	mov	r2, r3
 8005346:	210a      	movs	r1, #10
 8005348:	4628      	mov	r0, r5
 800534a:	f000 f980 	bl	800564e <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800534e:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005350:	4603      	mov	r3, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005352:	d8b6      	bhi.n	80052c2 <USBH_CDC_InterfaceInit+0x16>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005354:	201a      	movs	r0, #26
 8005356:	fb00 5203 	mla	r2, r0, r3, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800535a:	fb00 5303 	mla	r3, r0, r3, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800535e:	f892 634e 	ldrb.w	r6, [r2, #846]	; 0x34e
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005362:	f8b2 1350 	ldrh.w	r1, [r2, #848]	; 0x350
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005366:	f992 234e 	ldrsb.w	r2, [r2, #846]	; 0x34e
 800536a:	2a00      	cmp	r2, #0
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800536c:	bfb8      	it	lt
 800536e:	8361      	strhlt	r1, [r4, #26]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005370:	f8b3 2358 	ldrh.w	r2, [r3, #856]	; 0x358
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005374:	bfa8      	it	ge
 8005376:	8321      	strhge	r1, [r4, #24]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005378:	f893 1356 	ldrb.w	r1, [r3, #854]	; 0x356
 800537c:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005380:	bfac      	ite	ge
 8005382:	73a6      	strbge	r6, [r4, #14]
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005384:	73e6      	strblt	r6, [r4, #15]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005386:	2b00      	cmp	r3, #0
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005388:	bfac      	ite	ge
 800538a:	73a1      	strbge	r1, [r4, #14]
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800538c:	73e1      	strblt	r1, [r4, #15]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800538e:	4628      	mov	r0, r5
 8005390:	7ba1      	ldrb	r1, [r4, #14]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005392:	bfb4      	ite	lt
 8005394:	8362      	strhlt	r2, [r4, #26]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005396:	8322      	strhge	r2, [r4, #24]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005398:	f000 fe18 	bl	8005fcc <USBH_AllocPipe>
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800539c:	7be1      	ldrb	r1, [r4, #15]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800539e:	7360      	strb	r0, [r4, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fe13 	bl	8005fcc <USBH_AllocPipe>
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80053a6:	8b23      	ldrh	r3, [r4, #24]
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	2602      	movs	r6, #2
 80053ac:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 80053b0:	7ba2      	ldrb	r2, [r4, #14]
 80053b2:	7b61      	ldrb	r1, [r4, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80053b4:	7320      	strb	r0, [r4, #12]
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80053b6:	9601      	str	r6, [sp, #4]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4628      	mov	r0, r5
 80053bc:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80053c0:	f000 fdf0 	bl	8005fa4 <USBH_OpenPipe>
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80053c4:	8b63      	ldrh	r3, [r4, #26]
 80053c6:	7be2      	ldrb	r2, [r4, #15]
 80053c8:	7b21      	ldrb	r1, [r4, #12]
 80053ca:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80053ce:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 80053d2:	9300      	str	r3, [sp, #0]
  CDC_Handle->state = CDC_IDLE_STATE;
 80053d4:	2600      	movs	r6, #0
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80053d6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 fde2 	bl	8005fa4 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80053e0:	7b61      	ldrb	r1, [r4, #13]
  CDC_Handle->state = CDC_IDLE_STATE;
 80053e2:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80053e6:	4632      	mov	r2, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 fef6 	bl	80061da <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80053ee:	7b21      	ldrb	r1, [r4, #12]
 80053f0:	4632      	mov	r2, r6
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 fef1 	bl	80061da <USBH_LL_SetToggle>
  return USBH_OK;
 80053f8:	e764      	b.n	80052c4 <USBH_CDC_InterfaceInit+0x18>

080053fa <USBH_CDC_ClassRequest>:
{
 80053fa:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80053fc:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005400:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 8005402:	f242 12a1 	movw	r2, #8609	; 0x21a1
 8005406:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800540a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800540e:	3140      	adds	r1, #64	; 0x40
 8005410:	2207      	movs	r2, #7
{
 8005412:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005414:	f000 fb62 	bl	8005adc <USBH_CtlReq>
  if (status == USBH_OK)
 8005418:	4605      	mov	r5, r0
 800541a:	b920      	cbnz	r0, 8005426 <USBH_CDC_ClassRequest+0x2c>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800541c:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8005420:	2102      	movs	r1, #2
 8005422:	4620      	mov	r0, r4
 8005424:	4798      	blx	r3
}
 8005426:	4628      	mov	r0, r5
 8005428:	bd38      	pop	{r3, r4, r5, pc}

0800542a <USBH_CDC_TransmitCallback>:
 800542a:	4770      	bx	lr

0800542c <USBH_CDC_ReceiveCallback>:
 800542c:	4770      	bx	lr

0800542e <USBH_CDC_LineCodingChanged>:
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800542e:	4770      	bx	lr

08005430 <USBH_CDC_Process>:
{
 8005430:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005432:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005436:	69dc      	ldr	r4, [r3, #28]
  switch (CDC_Handle->state)
 8005438:	f894 604c 	ldrb.w	r6, [r4, #76]	; 0x4c
{
 800543c:	4605      	mov	r5, r0
  switch (CDC_Handle->state)
 800543e:	2e04      	cmp	r6, #4
 8005440:	d818      	bhi.n	8005474 <USBH_CDC_Process+0x44>
 8005442:	e8df f006 	tbb	[pc, r6]
 8005446:	0312      	.short	0x0312
 8005448:	401b      	.short	0x401b
 800544a:	aa          	.byte	0xaa
 800544b:	00          	.byte	0x00
  phost->Control.setup.b.wIndex.w = 0U;
 800544c:	f242 0021 	movw	r0, #8225	; 0x2021
 8005450:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005454:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005456:	2207      	movs	r2, #7
  phost->Control.setup.b.wIndex.w = 0U;
 8005458:	e9c5 0304 	strd	r0, r3, [r5, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800545c:	4628      	mov	r0, r5
 800545e:	f000 fb3d 	bl	8005adc <USBH_CtlReq>
      if (req_status == USBH_OK)
 8005462:	b928      	cbnz	r0, 8005470 <USBH_CDC_Process+0x40>
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005464:	2302      	movs	r3, #2
          CDC_Handle->state = CDC_ERROR_STATE;
 8005466:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 800546a:	4630      	mov	r0, r6
 800546c:	b002      	add	sp, #8
 800546e:	bd70      	pop	{r4, r5, r6, pc}
        if (req_status != USBH_BUSY)
 8005470:	2801      	cmp	r0, #1
 8005472:	d101      	bne.n	8005478 <USBH_CDC_Process+0x48>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005474:	2601      	movs	r6, #1
 8005476:	e7f8      	b.n	800546a <USBH_CDC_Process+0x3a>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005478:	2304      	movs	r3, #4
 800547a:	e7f4      	b.n	8005466 <USBH_CDC_Process+0x36>
  phost->Control.setup.b.wIndex.w = 0U;
 800547c:	f242 12a1 	movw	r2, #8609	; 0x21a1
 8005480:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8005484:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005488:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800548c:	2207      	movs	r2, #7
 800548e:	f000 fb25 	bl	8005adc <USBH_CtlReq>
      if (req_status == USBH_OK)
 8005492:	b990      	cbnz	r0, 80054ba <USBH_CDC_Process+0x8a>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005494:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
        CDC_Handle->state = CDC_IDLE_STATE;
 8005498:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800549c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80054a0:	684b      	ldr	r3, [r1, #4]
 80054a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d1e4      	bne.n	8005474 <USBH_CDC_Process+0x44>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80054aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054ac:	680b      	ldr	r3, [r1, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d1e0      	bne.n	8005474 <USBH_CDC_Process+0x44>
          USBH_CDC_LineCodingChanged(phost);
 80054b2:	4628      	mov	r0, r5
 80054b4:	f7ff ffbb 	bl	800542e <USBH_CDC_LineCodingChanged>
 80054b8:	e7dc      	b.n	8005474 <USBH_CDC_Process+0x44>
        if (req_status != USBH_BUSY)
 80054ba:	2801      	cmp	r0, #1
 80054bc:	d0da      	beq.n	8005474 <USBH_CDC_Process+0x44>
          CDC_Handle->state = CDC_ERROR_STATE;
 80054be:	2304      	movs	r3, #4
 80054c0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80054c4:	e7d6      	b.n	8005474 <USBH_CDC_Process+0x44>
  switch (CDC_Handle->data_tx_state)
 80054c6:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80054ca:	2801      	cmp	r0, #1
 80054cc:	d024      	beq.n	8005518 <USBH_CDC_Process+0xe8>
 80054ce:	2802      	cmp	r0, #2
 80054d0:	d031      	beq.n	8005536 <USBH_CDC_Process+0x106>
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054d2:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
 80054d6:	69dc      	ldr	r4, [r3, #28]
  switch (CDC_Handle->data_rx_state)
 80054d8:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d04b      	beq.n	8005578 <USBH_CDC_Process+0x148>
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d1c7      	bne.n	8005474 <USBH_CDC_Process+0x44>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80054e4:	7b21      	ldrb	r1, [r4, #12]
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 fe66 	bl	80061b8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80054ec:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80054ee:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 80054f0:	d1c0      	bne.n	8005474 <USBH_CDC_Process+0x44>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80054f2:	7b21      	ldrb	r1, [r4, #12]
 80054f4:	4628      	mov	r0, r5
 80054f6:	f000 fe5b 	bl	80061b0 <USBH_LL_GetLastXferSize>
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80054fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054fc:	4298      	cmp	r0, r3
 80054fe:	d045      	beq.n	800558c <USBH_CDC_Process+0x15c>
 8005500:	8b62      	ldrh	r2, [r4, #26]
 8005502:	4290      	cmp	r0, r2
 8005504:	d942      	bls.n	800558c <USBH_CDC_Process+0x15c>
          CDC_Handle->RxDataLength -= length ;
 8005506:	1a1b      	subs	r3, r3, r0
 8005508:	62a3      	str	r3, [r4, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800550a:	6a23      	ldr	r3, [r4, #32]
 800550c:	4418      	add	r0, r3
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800550e:	2303      	movs	r3, #3
          CDC_Handle->pRxData += length;
 8005510:	6220      	str	r0, [r4, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005512:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 8005516:	e7a8      	b.n	800546a <USBH_CDC_Process+0x3a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005518:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800551a:	8b22      	ldrh	r2, [r4, #24]
        USBH_BulkSendData(phost,
 800551c:	7b63      	ldrb	r3, [r4, #13]
 800551e:	69e1      	ldr	r1, [r4, #28]
 8005520:	9000      	str	r0, [sp, #0]
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005522:	4296      	cmp	r6, r2
        USBH_BulkSendData(phost,
 8005524:	bf98      	it	ls
 8005526:	b2b2      	uxthls	r2, r6
 8005528:	4628      	mov	r0, r5
 800552a:	f000 fd14 	bl	8005f56 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800552e:	2302      	movs	r3, #2
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005530:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8005534:	e7cd      	b.n	80054d2 <USBH_CDC_Process+0xa2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005536:	7b61      	ldrb	r1, [r4, #13]
 8005538:	4628      	mov	r0, r5
 800553a:	f000 fe3d 	bl	80061b8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800553e:	2801      	cmp	r0, #1
 8005540:	d116      	bne.n	8005570 <USBH_CDC_Process+0x140>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005544:	8b21      	ldrh	r1, [r4, #24]
 8005546:	428b      	cmp	r3, r1
 8005548:	d90c      	bls.n	8005564 <USBH_CDC_Process+0x134>
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800554a:	69e2      	ldr	r2, [r4, #28]
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800554c:	1a5b      	subs	r3, r3, r1
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800554e:	440a      	add	r2, r1
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005550:	6263      	str	r3, [r4, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005552:	61e2      	str	r2, [r4, #28]
        if (CDC_Handle->TxDataLength > 0U)
 8005554:	b94b      	cbnz	r3, 800556a <USBH_CDC_Process+0x13a>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005556:	2300      	movs	r3, #0
 8005558:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800555c:	4628      	mov	r0, r5
 800555e:	f7ff ff64 	bl	800542a <USBH_CDC_TransmitCallback>
 8005562:	e7b6      	b.n	80054d2 <USBH_CDC_Process+0xa2>
          CDC_Handle->TxDataLength = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	6263      	str	r3, [r4, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005568:	e7f5      	b.n	8005556 <USBH_CDC_Process+0x126>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800556a:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 800556e:	e7b0      	b.n	80054d2 <USBH_CDC_Process+0xa2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005570:	2802      	cmp	r0, #2
 8005572:	d1ae      	bne.n	80054d2 <USBH_CDC_Process+0xa2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005574:	2301      	movs	r3, #1
 8005576:	e7db      	b.n	8005530 <USBH_CDC_Process+0x100>
      USBH_BulkReceiveData(phost,
 8005578:	7b23      	ldrb	r3, [r4, #12]
 800557a:	8b62      	ldrh	r2, [r4, #26]
 800557c:	6a21      	ldr	r1, [r4, #32]
 800557e:	4628      	mov	r0, r5
 8005580:	f000 fd00 	bl	8005f84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005584:	2304      	movs	r3, #4
 8005586:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      break;
 800558a:	e773      	b.n	8005474 <USBH_CDC_Process+0x44>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800558c:	2300      	movs	r3, #0
 800558e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005592:	4628      	mov	r0, r5
 8005594:	f7ff ff4a 	bl	800542c <USBH_CDC_ReceiveCallback>
 8005598:	e767      	b.n	800546a <USBH_CDC_Process+0x3a>
      req_status = USBH_ClrFeature(phost, 0x00U);
 800559a:	2100      	movs	r1, #0
 800559c:	f000 fc97 	bl	8005ece <USBH_ClrFeature>
      if (req_status == USBH_OK)
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f47f af67 	bne.w	8005474 <USBH_CDC_Process+0x44>
        CDC_Handle->state = CDC_IDLE_STATE;
 80055a6:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 80055aa:	e763      	b.n	8005474 <USBH_CDC_Process+0x44>

080055ac <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 80055ac:	b510      	push	{r4, lr}
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 80055ae:	223c      	movs	r2, #60	; 0x3c
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 80055b0:	4604      	mov	r4, r0
    phost->Pipes[i] = 0U;
 80055b2:	2100      	movs	r1, #0
 80055b4:	f500 7061 	add.w	r0, r0, #900	; 0x384
 80055b8:	f006 fa1e 	bl	800b9f8 <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80055bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c0:	2100      	movs	r1, #0
 80055c2:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 80055c6:	f006 fa17 	bl	800b9f8 <memset>
  }

  phost->gState = HOST_IDLE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 80055ce:	7063      	strb	r3, [r4, #1]
  phost->RequestState = CMD_SEND;
  phost->Timer = 0U;
 80055d0:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80055d4:	2340      	movs	r3, #64	; 0x40
  phost->RequestState = CMD_SEND;
 80055d6:	2201      	movs	r2, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80055d8:	71a3      	strb	r3, [r4, #6]
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80055da:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->RequestState = CMD_SEND;
 80055de:	70a2      	strb	r2, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 80055e0:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80055e2:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 80055e6:	bd10      	pop	{r4, pc}

080055e8 <USBH_Init>:
{
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	460e      	mov	r6, r1
  if (phost == NULL)
 80055ec:	4604      	mov	r4, r0
 80055ee:	b1b0      	cbz	r0, 800561e <USBH_Init+0x36>
  phost->pActiveClass = NULL;
 80055f0:	2500      	movs	r5, #0
  phost->ClassNumber = 0U;
 80055f2:	e9c0 55df 	strd	r5, r5, [r0, #892]	; 0x37c
  phost->id = id;
 80055f6:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  DeInitStateMachine(phost);
 80055fa:	f7ff ffd7 	bl	80055ac <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
 80055fe:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005602:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 8005606:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800560a:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 800560e:	b10e      	cbz	r6, 8005614 <USBH_Init+0x2c>
    phost->pUser = pUsrFunc;
 8005610:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  USBH_LL_Init(phost);
 8005614:	4620      	mov	r0, r4
 8005616:	f000 fd9b 	bl	8006150 <USBH_LL_Init>
  return USBH_OK;
 800561a:	2000      	movs	r0, #0
}
 800561c:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 800561e:	2002      	movs	r0, #2
 8005620:	e7fc      	b.n	800561c <USBH_Init+0x34>

08005622 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8005622:	b149      	cbz	r1, 8005638 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005624:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8005628:	b933      	cbnz	r3, 8005638 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800562a:	2201      	movs	r2, #1
 800562c:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
 8005630:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
      status = USBH_OK;
 8005634:	4618      	mov	r0, r3
 8005636:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005638:	2002      	movs	r0, #2
  }

  return status;
}
 800563a:	4770      	bx	lr

0800563c <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800563c:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8005640:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8005642:	bf86      	itte	hi
 8005644:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8005648:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800564a:	2002      	movls	r0, #2
  }

  return status;
}
 800564c:	4770      	bx	lr

0800564e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800564e:	b570      	push	{r4, r5, r6, lr}
 8005650:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005652:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 8005656:	428e      	cmp	r6, r1
 8005658:	b2e5      	uxtb	r5, r4
 800565a:	d001      	beq.n	8005660 <USBH_FindInterface+0x12>
 800565c:	29ff      	cmp	r1, #255	; 0xff
 800565e:	d10b      	bne.n	8005678 <USBH_FindInterface+0x2a>
 8005660:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 8005664:	4296      	cmp	r6, r2
 8005666:	d001      	beq.n	800566c <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005668:	2aff      	cmp	r2, #255	; 0xff
 800566a:	d105      	bne.n	8005678 <USBH_FindInterface+0x2a>
 800566c:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 8005670:	429e      	cmp	r6, r3
 8005672:	d004      	beq.n	800567e <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005674:	2bff      	cmp	r3, #255	; 0xff
 8005676:	d002      	beq.n	800567e <USBH_FindInterface+0x30>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005678:	301a      	adds	r0, #26
 800567a:	b114      	cbz	r4, 8005682 <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800567c:	25ff      	movs	r5, #255	; 0xff
}
 800567e:	4628      	mov	r0, r5
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	2401      	movs	r4, #1
 8005684:	e7e5      	b.n	8005652 <USBH_FindInterface+0x4>

08005686 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005686:	b510      	push	{r4, lr}
 8005688:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800568a:	f000 fdbf 	bl	800620c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800568e:	2101      	movs	r1, #1
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fd95 	bl	80061c0 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8005696:	2000      	movs	r0, #0
 8005698:	bd10      	pop	{r4, pc}

0800569a <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800569a:	b570      	push	{r4, r5, r6, lr}
 800569c:	b086      	sub	sp, #24
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800569e:	2302      	movs	r3, #2
 80056a0:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80056a4:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 80056a8:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80056aa:	bf04      	itt	eq
 80056ac:	2303      	moveq	r3, #3
 80056ae:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 80056b0:	7803      	ldrb	r3, [r0, #0]
{
 80056b2:	4604      	mov	r4, r0
  switch (phost->gState)
 80056b4:	2b0b      	cmp	r3, #11
 80056b6:	d81d      	bhi.n	80056f4 <USBH_Process+0x5a>
 80056b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056bc:	001f000c 	.word	0x001f000c
 80056c0:	01b50041 	.word	0x01b50041
 80056c4:	0076001c 	.word	0x0076001c
 80056c8:	015a0199 	.word	0x015a0199
 80056cc:	016b0162 	.word	0x016b0162
 80056d0:	01ad0177 	.word	0x01ad0177
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80056d4:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 80056d8:	b163      	cbz	r3, 80056f4 <USBH_Process+0x5a>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80056da:	2301      	movs	r3, #1
 80056dc:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 80056de:	20c8      	movs	r0, #200	; 0xc8
 80056e0:	f000 fd8a 	bl	80061f8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 fda3 	bl	8006230 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 80056f0:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 80056f4:	2000      	movs	r0, #0
 80056f6:	b006      	add	sp, #24
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
 80056fa:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <USBH_Process+0x74>
        phost->device.RstCnt = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005708:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 800570a:	7023      	strb	r3, [r4, #0]
 800570c:	e7f2      	b.n	80056f4 <USBH_Process+0x5a>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800570e:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8005712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005716:	d90b      	bls.n	8005730 <USBH_Process+0x96>
          phost->device.RstCnt++;
 8005718:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800571c:	3301      	adds	r3, #1
 800571e:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 8005720:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 8005722:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005726:	d901      	bls.n	800572c <USBH_Process+0x92>
        phost->gState = HOST_ABORT_STATE;
 8005728:	230d      	movs	r3, #13
 800572a:	e7ee      	b.n	800570a <USBH_Process+0x70>
            phost->gState = HOST_IDLE;
 800572c:	2300      	movs	r3, #0
 800572e:	e7ec      	b.n	800570a <USBH_Process+0x70>
          phost->Timeout += 10U;
 8005730:	330a      	adds	r3, #10
 8005732:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 8005736:	200a      	movs	r0, #10
 8005738:	f000 fd5e 	bl	80061f8 <USBH_Delay>
 800573c:	e7da      	b.n	80056f4 <USBH_Process+0x5a>
      if (phost->pUser != NULL)
 800573e:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8005742:	b10b      	cbz	r3, 8005748 <USBH_Process+0xae>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005744:	2104      	movs	r1, #4
 8005746:	4798      	blx	r3
      USBH_Delay(100U);
 8005748:	2064      	movs	r0, #100	; 0x64
 800574a:	f000 fd55 	bl	80061f8 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fd24 	bl	800619c <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8005754:	2305      	movs	r3, #5
 8005756:	7023      	strb	r3, [r4, #0]
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005758:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800575c:	2100      	movs	r1, #0
 800575e:	4620      	mov	r0, r4
 8005760:	f000 fc34 	bl	8005fcc <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005764:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005766:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fc2f 	bl	8005fcc <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800576e:	79a3      	ldrb	r3, [r4, #6]
 8005770:	9302      	str	r3, [sp, #8]
 8005772:	2500      	movs	r5, #0
 8005774:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005778:	7120      	strb	r0, [r4, #4]
 800577a:	4601      	mov	r1, r0
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	9501      	str	r5, [sp, #4]
 8005780:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	4620      	mov	r0, r4
 8005788:	f000 fc0c 	bl	8005fa4 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800578c:	79a3      	ldrb	r3, [r4, #6]
 800578e:	7961      	ldrb	r1, [r4, #5]
 8005790:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8005794:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	462a      	mov	r2, r5
 800579c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 fbff 	bl	8005fa4 <USBH_OpenPipe>
      break;
 80057a6:	e7a5      	b.n	80056f4 <USBH_Process+0x5a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 80057a8:	7845      	ldrb	r5, [r0, #1]
 80057aa:	2d07      	cmp	r5, #7
 80057ac:	d82b      	bhi.n	8005806 <USBH_Process+0x16c>
 80057ae:	e8df f005 	tbb	[pc, r5]
 80057b2:	4104      	.short	0x4104
 80057b4:	af938d71 	.word	0xaf938d71
 80057b8:	cdbe      	.short	0xcdbe
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80057ba:	2108      	movs	r1, #8
 80057bc:	f000 fa65 	bl	8005c8a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80057c0:	4606      	mov	r6, r0
 80057c2:	b9f0      	cbnz	r0, 8005802 <USBH_Process+0x168>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80057c4:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80057c8:	71a3      	strb	r3, [r4, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80057ca:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80057ce:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80057d2:	9300      	str	r3, [sp, #0]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80057d4:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80057d6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80057da:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80057dc:	7921      	ldrb	r1, [r4, #4]
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 fbdf 	bl	8005fa4 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80057e6:	79a3      	ldrb	r3, [r4, #6]
 80057e8:	7961      	ldrb	r1, [r4, #5]
 80057ea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80057ee:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	4632      	mov	r2, r6
 80057f6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fbd2 	bl	8005fa4 <USBH_OpenPipe>
 8005800:	e01e      	b.n	8005840 <USBH_Process+0x1a6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005802:	2803      	cmp	r0, #3
 8005804:	d001      	beq.n	800580a <USBH_Process+0x170>
  switch (phost->EnumState)
 8005806:	2501      	movs	r5, #1
 8005808:	e01a      	b.n	8005840 <USBH_Process+0x1a6>
        phost->device.EnumCnt++;
 800580a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800580e:	3301      	adds	r3, #1
 8005810:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8005812:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8005814:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005818:	d901      	bls.n	800581e <USBH_Process+0x184>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 800581a:	230d      	movs	r3, #13
 800581c:	e008      	b.n	8005830 <USBH_Process+0x196>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800581e:	7961      	ldrb	r1, [r4, #5]
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fbeb 	bl	8005ffc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005826:	7921      	ldrb	r1, [r4, #4]
 8005828:	4620      	mov	r0, r4
 800582a:	f000 fbe7 	bl	8005ffc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800582e:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 8005830:	7023      	strb	r3, [r4, #0]
 8005832:	e7e8      	b.n	8005806 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005834:	2112      	movs	r1, #18
 8005836:	f000 fa28 	bl	8005c8a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800583a:	b998      	cbnz	r0, 8005864 <USBH_Process+0x1ca>
        phost->EnumState = ENUM_SET_ADDR;
 800583c:	2302      	movs	r3, #2
 800583e:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
 8005840:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 8005844:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005848:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f af51 	bne.w	80056f4 <USBH_Process+0x5a>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005852:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 8005856:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800585a:	2b01      	cmp	r3, #1
 800585c:	f040 8086 	bne.w	800596c <USBH_Process+0x2d2>
        phost->gState = HOST_SET_CONFIGURATION;
 8005860:	2308      	movs	r3, #8
 8005862:	e752      	b.n	800570a <USBH_Process+0x70>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005864:	2803      	cmp	r0, #3
 8005866:	d1ce      	bne.n	8005806 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 8005868:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800586c:	3301      	adds	r3, #1
 800586e:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8005870:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8005872:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005876:	d902      	bls.n	800587e <USBH_Process+0x1e4>
          phost->gState = HOST_ABORT_STATE;
 8005878:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
 800587a:	7023      	strb	r3, [r4, #0]
 800587c:	e7e0      	b.n	8005840 <USBH_Process+0x1a6>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800587e:	7961      	ldrb	r1, [r4, #5]
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fbbb 	bl	8005ffc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005886:	7921      	ldrb	r1, [r4, #4]
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fbb7 	bl	8005ffc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800588e:	2300      	movs	r3, #0
 8005890:	7063      	strb	r3, [r4, #1]
 8005892:	e7f2      	b.n	800587a <USBH_Process+0x1e0>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005894:	2101      	movs	r1, #1
 8005896:	f000 faf3 	bl	8005e80 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800589a:	4606      	mov	r6, r0
 800589c:	b978      	cbnz	r0, 80058be <USBH_Process+0x224>
        USBH_Delay(2U);
 800589e:	2002      	movs	r0, #2
 80058a0:	f000 fcaa 	bl	80061f8 <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80058a4:	2303      	movs	r3, #3
 80058a6:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80058a8:	79a3      	ldrb	r3, [r4, #6]
        phost->device.address = USBH_DEVICE_ADDRESS;
 80058aa:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80058ac:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80058b0:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80058b4:	9300      	str	r3, [sp, #0]
        phost->device.address = USBH_DEVICE_ADDRESS;
 80058b6:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80058ba:	462b      	mov	r3, r5
 80058bc:	e78e      	b.n	80057dc <USBH_Process+0x142>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80058be:	2803      	cmp	r0, #3
 80058c0:	d1a1      	bne.n	8005806 <USBH_Process+0x16c>
        phost->gState = HOST_ABORT_STATE;
 80058c2:	230d      	movs	r3, #13
 80058c4:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 80058c6:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80058c8:	7063      	strb	r3, [r4, #1]
 80058ca:	e79c      	b.n	8005806 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80058cc:	2109      	movs	r1, #9
 80058ce:	f000 fa24 	bl	8005d1a <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80058d2:	b940      	cbnz	r0, 80058e6 <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80058d4:	2304      	movs	r3, #4
 80058d6:	e7f7      	b.n	80058c8 <USBH_Process+0x22e>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80058d8:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 80058dc:	f000 fa1d 	bl	8005d1a <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80058e0:	b908      	cbnz	r0, 80058e6 <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80058e2:	2305      	movs	r3, #5
 80058e4:	e7f0      	b.n	80058c8 <USBH_Process+0x22e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80058e6:	2803      	cmp	r0, #3
 80058e8:	d18d      	bne.n	8005806 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 80058ea:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80058ee:	3301      	adds	r3, #1
 80058f0:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80058f2:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80058f4:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80058f8:	d88f      	bhi.n	800581a <USBH_Process+0x180>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80058fa:	7961      	ldrb	r1, [r4, #5]
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 fb7d 	bl	8005ffc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005902:	7921      	ldrb	r1, [r4, #4]
 8005904:	4620      	mov	r0, r4
 8005906:	f000 fb79 	bl	8005ffc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800590a:	2300      	movs	r3, #0
 800590c:	7063      	strb	r3, [r4, #1]
 800590e:	e78f      	b.n	8005830 <USBH_Process+0x196>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005910:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8005914:	b129      	cbz	r1, 8005922 <USBH_Process+0x288>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005916:	23ff      	movs	r3, #255	; 0xff
 8005918:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800591c:	f000 fa89 	bl	8005e32 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8005920:	b908      	cbnz	r0, 8005926 <USBH_Process+0x28c>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005922:	2306      	movs	r3, #6
 8005924:	e7d0      	b.n	80058c8 <USBH_Process+0x22e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005926:	2803      	cmp	r0, #3
 8005928:	f47f af6d 	bne.w	8005806 <USBH_Process+0x16c>
 800592c:	e7f9      	b.n	8005922 <USBH_Process+0x288>
      if (phost->device.DevDesc.iProduct != 0U)
 800592e:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8005932:	b129      	cbz	r1, 8005940 <USBH_Process+0x2a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005934:	23ff      	movs	r3, #255	; 0xff
 8005936:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800593a:	f000 fa7a 	bl	8005e32 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800593e:	b908      	cbnz	r0, 8005944 <USBH_Process+0x2aa>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005940:	2307      	movs	r3, #7
 8005942:	e7c1      	b.n	80058c8 <USBH_Process+0x22e>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005944:	2803      	cmp	r0, #3
 8005946:	f47f af5e 	bne.w	8005806 <USBH_Process+0x16c>
 800594a:	e7f9      	b.n	8005940 <USBH_Process+0x2a6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800594c:	f890 1336 	ldrb.w	r1, [r0, #822]	; 0x336
 8005950:	b909      	cbnz	r1, 8005956 <USBH_Process+0x2bc>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 8005952:	2500      	movs	r5, #0
 8005954:	e774      	b.n	8005840 <USBH_Process+0x1a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005956:	23ff      	movs	r3, #255	; 0xff
 8005958:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800595c:	f000 fa69 	bl	8005e32 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8005960:	2800      	cmp	r0, #0
 8005962:	d0f6      	beq.n	8005952 <USBH_Process+0x2b8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005964:	1ec5      	subs	r5, r0, #3
 8005966:	bf18      	it	ne
 8005968:	2501      	movne	r5, #1
 800596a:	e769      	b.n	8005840 <USBH_Process+0x1a6>
          phost->gState = HOST_INPUT;
 800596c:	2307      	movs	r3, #7
 800596e:	e6cc      	b.n	800570a <USBH_Process+0x70>
      if (phost->pUser != NULL)
 8005970:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8005974:	2b00      	cmp	r3, #0
 8005976:	f43f aebd 	beq.w	80056f4 <USBH_Process+0x5a>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800597a:	2101      	movs	r1, #1
 800597c:	4798      	blx	r3
 800597e:	e76f      	b.n	8005860 <USBH_Process+0x1c6>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005980:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 8005984:	f000 fa89 	bl	8005e9a <USBH_SetCfg>
 8005988:	2800      	cmp	r0, #0
 800598a:	f47f aeb3 	bne.w	80056f4 <USBH_Process+0x5a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800598e:	2309      	movs	r3, #9
 8005990:	e6bb      	b.n	800570a <USBH_Process+0x70>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005992:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 8005996:	069b      	lsls	r3, r3, #26
 8005998:	d505      	bpl.n	80059a6 <USBH_Process+0x30c>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800599a:	2101      	movs	r1, #1
 800599c:	f000 fa8a 	bl	8005eb4 <USBH_SetFeature>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f47f aea7 	bne.w	80056f4 <USBH_Process+0x5a>
        phost->gState = HOST_CHECK_CLASS;
 80059a6:	230a      	movs	r3, #10
 80059a8:	e6af      	b.n	800570a <USBH_Process+0x70>
      if (phost->ClassNumber == 0U)
 80059aa:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f43f aea0 	beq.w	80056f4 <USBH_Process+0x5a>
        phost->pActiveClass = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80059ba:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80059be:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 80059c2:	7919      	ldrb	r1, [r3, #4]
            phost->pActiveClass = phost->pClass[idx];
 80059c4:	4291      	cmp	r1, r2
 80059c6:	bf18      	it	ne
 80059c8:	2300      	movne	r3, #0
 80059ca:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
        if (phost->pActiveClass != NULL)
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f43f aeaa 	beq.w	8005728 <USBH_Process+0x8e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	4798      	blx	r3
 80059d8:	2800      	cmp	r0, #0
 80059da:	f47f aea5 	bne.w	8005728 <USBH_Process+0x8e>
            phost->gState = HOST_CLASS_REQUEST;
 80059de:	2306      	movs	r3, #6
 80059e0:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80059e2:	2103      	movs	r1, #3
 80059e4:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80059e8:	4620      	mov	r0, r4
 80059ea:	4798      	blx	r3
 80059ec:	e682      	b.n	80056f4 <USBH_Process+0x5a>
      if (phost->pActiveClass != NULL)
 80059ee:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f43f ae98 	beq.w	8005728 <USBH_Process+0x8e>
        status = phost->pActiveClass->Requests(phost);
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	4798      	blx	r3
 80059fc:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8005a00:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005a04:	b90b      	cbnz	r3, 8005a0a <USBH_Process+0x370>
          phost->gState = HOST_CLASS;
 8005a06:	230b      	movs	r3, #11
 8005a08:	e67f      	b.n	800570a <USBH_Process+0x70>
        else if (status == USBH_FAIL)
 8005a0a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	f47f ae70 	bne.w	80056f4 <USBH_Process+0x5a>
 8005a14:	e688      	b.n	8005728 <USBH_Process+0x8e>
      if (phost->pActiveClass != NULL)
 8005a16:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f43f ae6a 	beq.w	80056f4 <USBH_Process+0x5a>
        phost->pActiveClass->BgndProcess(phost);
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	4798      	blx	r3
 8005a24:	e666      	b.n	80056f4 <USBH_Process+0x5a>
      phost->device.is_disconnected = 0U;
 8005a26:	2500      	movs	r5, #0
 8005a28:	f880 5321 	strb.w	r5, [r0, #801]	; 0x321
      DeInitStateMachine(phost);
 8005a2c:	f7ff fdbe 	bl	80055ac <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
 8005a30:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005a34:	b123      	cbz	r3, 8005a40 <USBH_Process+0x3a6>
        phost->pActiveClass->DeInit(phost);
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005a3c:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8005a40:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8005a44:	b113      	cbz	r3, 8005a4c <USBH_Process+0x3b2>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005a46:	2105      	movs	r1, #5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8005a4c:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <USBH_Process+0x3c8>
        phost->device.is_ReEnumerated = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f7ff fe13 	bl	8005686 <USBH_Start>
 8005a60:	e648      	b.n	80056f4 <USBH_Process+0x5a>
        USBH_LL_Start(phost);
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 fbd2 	bl	800620c <USBH_LL_Start>
 8005a68:	e644      	b.n	80056f4 <USBH_Process+0x5a>

08005a6a <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8005a6a:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8005a6e:	4770      	bx	lr

08005a70 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8005a70:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8005a74:	3201      	adds	r2, #1
 8005a76:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005a7a:	7802      	ldrb	r2, [r0, #0]
 8005a7c:	2a0b      	cmp	r2, #11
 8005a7e:	d104      	bne.n	8005a8a <USBH_LL_IncTimer+0x1a>
 8005a80:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005a84:	b10b      	cbz	r3, 8005a8a <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	4718      	bx	r3
}
 8005a8a:	4770      	bx	lr

08005a8c <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8005a92:	4770      	bx	lr

08005a94 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8005a9a:	4770      	bx	lr

08005a9c <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f880 3320 	strb.w	r3, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005aa8:	f880 3322 	strb.w	r3, [r0, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	4770      	bx	lr

08005ab0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005ab4:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 8005ab6:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 8005ab8:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 8005abc:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005ac0:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005ac4:	f000 fbab 	bl	800621e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ac8:	7921      	ldrb	r1, [r4, #4]
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fa96 	bl	8005ffc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005ad0:	7961      	ldrb	r1, [r4, #5]
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fa92 	bl	8005ffc <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005ad8:	4628      	mov	r0, r5
 8005ada:	bd38      	pop	{r3, r4, r5, pc}

08005adc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8005ade:	7885      	ldrb	r5, [r0, #2]
 8005ae0:	2d01      	cmp	r5, #1
{
 8005ae2:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8005ae4:	d003      	beq.n	8005aee <USBH_CtlReq+0x12>
 8005ae6:	2d02      	cmp	r5, #2
 8005ae8:	d007      	beq.n	8005afa <USBH_CtlReq+0x1e>
            phost->Control.state = CTRL_STATUS_OUT;
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8005aea:	2501      	movs	r5, #1
  return status;
 8005aec:	e019      	b.n	8005b22 <USBH_CtlReq+0x46>
      phost->Control.buff = buff;
 8005aee:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 8005af0:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 8005af2:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 8005af4:	2302      	movs	r3, #2
        phost->RequestState = CMD_SEND;
 8005af6:	70a3      	strb	r3, [r4, #2]
 8005af8:	e013      	b.n	8005b22 <USBH_CtlReq+0x46>
  switch (phost->Control.state)
 8005afa:	7e06      	ldrb	r6, [r0, #24]
 8005afc:	1e73      	subs	r3, r6, #1
 8005afe:	2b0a      	cmp	r3, #10
 8005b00:	d8f3      	bhi.n	8005aea <USBH_CtlReq+0xe>
 8005b02:	e8df f003 	tbb	[pc, r3]
 8005b06:	1106      	.short	0x1106
 8005b08:	4e42392f 	.word	0x4e42392f
 8005b0c:	8478675d 	.word	0x8478675d
 8005b10:	8c          	.byte	0x8c
 8005b11:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005b12:	7942      	ldrb	r2, [r0, #5]
 8005b14:	f100 0110 	add.w	r1, r0, #16
 8005b18:	f000 f9e6 	bl	8005ee8 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	7623      	strb	r3, [r4, #24]
 8005b20:	4635      	mov	r5, r6
}
 8005b22:	4628      	mov	r0, r5
 8005b24:	b002      	add	sp, #8
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005b28:	7941      	ldrb	r1, [r0, #5]
 8005b2a:	f000 fb45 	bl	80061b8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005b2e:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005b30:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8005b32:	d111      	bne.n	8005b58 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
 8005b34:	8ae2      	ldrh	r2, [r4, #22]
 8005b36:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005b3a:	b13a      	cbz	r2, 8005b4c <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da02      	bge.n	8005b46 <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
 8005b40:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
 8005b42:	7623      	strb	r3, [r4, #24]
 8005b44:	e7ed      	b.n	8005b22 <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
 8005b46:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005b48:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
 8005b4a:	e7ce      	b.n	8005aea <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	da01      	bge.n	8005b54 <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
 8005b50:	2309      	movs	r3, #9
 8005b52:	e7f9      	b.n	8005b48 <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
 8005b54:	2307      	movs	r3, #7
 8005b56:	e7f7      	b.n	8005b48 <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005b58:	2804      	cmp	r0, #4
 8005b5a:	d001      	beq.n	8005b60 <USBH_CtlReq+0x84>
 8005b5c:	2802      	cmp	r0, #2
 8005b5e:	d1c4      	bne.n	8005aea <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8005b60:	230b      	movs	r3, #11
 8005b62:	e7f1      	b.n	8005b48 <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005b64:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8005b68:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005b6a:	8982      	ldrh	r2, [r0, #12]
 8005b6c:	7903      	ldrb	r3, [r0, #4]
 8005b6e:	6881      	ldr	r1, [r0, #8]
 8005b70:	f000 f9e1 	bl	8005f36 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005b74:	2304      	movs	r3, #4
 8005b76:	e7e7      	b.n	8005b48 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005b78:	7901      	ldrb	r1, [r0, #4]
 8005b7a:	f000 fb1d 	bl	80061b8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005b7e:	2801      	cmp	r0, #1
 8005b80:	d0e6      	beq.n	8005b50 <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
 8005b82:	2805      	cmp	r0, #5
 8005b84:	d035      	beq.n	8005bf2 <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8005b86:	2804      	cmp	r0, #4
 8005b88:	e7e9      	b.n	8005b5e <USBH_CtlReq+0x82>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005b8a:	2501      	movs	r5, #1
 8005b8c:	9500      	str	r5, [sp, #0]
 8005b8e:	7943      	ldrb	r3, [r0, #5]
 8005b90:	8982      	ldrh	r2, [r0, #12]
 8005b92:	6881      	ldr	r1, [r0, #8]
 8005b94:	f000 f9b8 	bl	8005f08 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005b98:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005b9c:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	e7cf      	b.n	8005b42 <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005ba2:	7941      	ldrb	r1, [r0, #5]
 8005ba4:	f000 fb08 	bl	80061b8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005ba8:	2801      	cmp	r0, #1
 8005baa:	d0d3      	beq.n	8005b54 <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
 8005bac:	2805      	cmp	r0, #5
 8005bae:	d020      	beq.n	8005bf2 <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005bb0:	2802      	cmp	r0, #2
 8005bb2:	d0c8      	beq.n	8005b46 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 8005bb4:	2804      	cmp	r0, #4
 8005bb6:	d198      	bne.n	8005aea <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8005bb8:	230b      	movs	r3, #11
 8005bba:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e79a      	b.n	8005af6 <USBH_CtlReq+0x1a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	7903      	ldrb	r3, [r0, #4]
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	f000 f9b6 	bl	8005f36 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005bca:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005bce:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	e7b9      	b.n	8005b48 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005bd4:	7901      	ldrb	r1, [r0, #4]
 8005bd6:	f000 faef 	bl	80061b8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005bda:	2801      	cmp	r0, #1
 8005bdc:	d104      	bne.n	8005be8 <USBH_CtlReq+0x10c>
        status = USBH_OK;
 8005bde:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 8005be0:	2301      	movs	r3, #1
 8005be2:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e7ac      	b.n	8005b42 <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
 8005be8:	2804      	cmp	r0, #4
 8005bea:	d0b9      	beq.n	8005b60 <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
 8005bec:	2805      	cmp	r0, #5
 8005bee:	f47f af7c 	bne.w	8005aea <USBH_CtlReq+0xe>
{
 8005bf2:	2503      	movs	r5, #3
 8005bf4:	e7f4      	b.n	8005be0 <USBH_CtlReq+0x104>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005bf6:	2501      	movs	r5, #1
 8005bf8:	9500      	str	r5, [sp, #0]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	7943      	ldrb	r3, [r0, #5]
 8005bfe:	4611      	mov	r1, r2
 8005c00:	f000 f982 	bl	8005f08 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005c04:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005c08:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	e799      	b.n	8005b42 <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005c0e:	7941      	ldrb	r1, [r0, #5]
 8005c10:	f000 fad2 	bl	80061b8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005c14:	2801      	cmp	r0, #1
 8005c16:	d0e2      	beq.n	8005bde <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005c18:	2802      	cmp	r0, #2
 8005c1a:	d1b4      	bne.n	8005b86 <USBH_CtlReq+0xaa>
 8005c1c:	e798      	b.n	8005b50 <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005c1e:	7e43      	ldrb	r3, [r0, #25]
 8005c20:	3301      	adds	r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	7643      	strb	r3, [r0, #25]
 8005c28:	d803      	bhi.n	8005c32 <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8005c2a:	2501      	movs	r5, #1
 8005c2c:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8005c2e:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
 8005c30:	e777      	b.n	8005b22 <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005c32:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8005c36:	2106      	movs	r1, #6
        phost->Control.errorcount = 0U;
 8005c38:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005c3a:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005c3c:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8005c3e:	7666      	strb	r6, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 f9db 	bl	8005ffc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005c46:	7921      	ldrb	r1, [r4, #4]
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 f9d7 	bl	8005ffc <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8005c4e:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
 8005c50:	e7b4      	b.n	8005bbc <USBH_CtlReq+0xe0>

08005c52 <USBH_GetDescriptor>:
{
 8005c52:	b430      	push	{r4, r5}
 8005c54:	460c      	mov	r4, r1
 8005c56:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 8005c58:	7883      	ldrb	r3, [r0, #2]
{
 8005c5a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d10f      	bne.n	8005c82 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005c62:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8005c66:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005c68:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005c6c:	2306      	movs	r3, #6
      phost->Control.setup.b.wIndex.w = 0U;
 8005c6e:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005c72:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8005c74:	f240 4309 	movw	r3, #1033	; 0x409
 8005c78:	bf18      	it	ne
 8005c7a:	2300      	movne	r3, #0
    phost->Control.setup.b.wValue.w = value_idx;
 8005c7c:	8242      	strh	r2, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005c7e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8005c80:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8005c82:	462a      	mov	r2, r5
}
 8005c84:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8005c86:	f7ff bf29 	b.w	8005adc <USBH_CtlReq>

08005c8a <USBH_Get_DevDesc>:
{
 8005c8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
 8005c8c:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8005c90:	460d      	mov	r5, r1
 8005c92:	9100      	str	r1, [sp, #0]
 8005c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c98:	2100      	movs	r1, #0
{
 8005c9a:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 8005c9c:	f7ff ffd9 	bl	8005c52 <USBH_GetDescriptor>
 8005ca0:	bbc8      	cbnz	r0, 8005d16 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005ca2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8005ca6:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005caa:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8005cae:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005cb2:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8005cb6:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005cba:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8005cbe:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005cc2:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8005cc6:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005cca:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8005cce:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  if (length > 8U)
 8005cd2:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005cd4:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8005cd8:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
  if (length > 8U)
 8005cdc:	d91b      	bls.n	8005d16 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
 8005cde:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8005ce2:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 8005ce6:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8005cea:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005cee:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8005cf2:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005cf6:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8005cfa:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005cfe:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8005d02:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005d06:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8005d0a:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005d0e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8005d12:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 8005d16:	b003      	add	sp, #12
 8005d18:	bd30      	pop	{r4, r5, pc}

08005d1a <USBH_Get_CfgDesc>:
{
 8005d1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8005d1e:	f100 041c 	add.w	r4, r0, #28
{
 8005d22:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005d24:	9100      	str	r1, [sp, #0]
 8005d26:	4623      	mov	r3, r4
 8005d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2c:	2100      	movs	r1, #0
{
 8005d2e:	4605      	mov	r5, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005d30:	f7ff ff8f 	bl	8005c52 <USBH_GetDescriptor>
 8005d34:	bb40      	cbnz	r0, 8005d88 <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005d36:	7f2b      	ldrb	r3, [r5, #28]
 8005d38:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005d3c:	7f6b      	ldrb	r3, [r5, #29]
 8005d3e:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005d42:	f895 3020 	ldrb.w	r3, [r5, #32]
 8005d46:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005d4a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8005d4e:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005d52:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8005d56:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005d5a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8005d5e:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005d62:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005d66:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005d68:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8005d6c:	f8a5 c33a 	strh.w	ip, [r5, #826]	; 0x33a
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005d70:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005d74:	d908      	bls.n	8005d88 <USBH_Get_CfgDesc+0x6e>
 8005d76:	462b      	mov	r3, r5
 8005d78:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 8005d7a:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005d7c:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005d80:	2f02      	cmp	r7, #2
 8005d82:	d001      	beq.n	8005d88 <USBH_Get_CfgDesc+0x6e>
 8005d84:	4594      	cmp	ip, r2
 8005d86:	d802      	bhi.n	8005d8e <USBH_Get_CfgDesc+0x74>
}
 8005d88:	b002      	add	sp, #8
 8005d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d8e:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005d90:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d92:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005d94:	7861      	ldrb	r1, [r4, #1]
 8005d96:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d98:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005d9a:	d1f1      	bne.n	8005d80 <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005d9c:	7821      	ldrb	r1, [r4, #0]
 8005d9e:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005da2:	7861      	ldrb	r1, [r4, #1]
 8005da4:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005da8:	78a1      	ldrb	r1, [r4, #2]
 8005daa:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005dae:	78e1      	ldrb	r1, [r4, #3]
 8005db0:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005db4:	f894 e004 	ldrb.w	lr, [r4, #4]
 8005db8:	f883 e346 	strb.w	lr, [r3, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005dbc:	7961      	ldrb	r1, [r4, #5]
 8005dbe:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005dc2:	79a1      	ldrb	r1, [r4, #6]
 8005dc4:	f883 1348 	strb.w	r1, [r3, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005dc8:	79e1      	ldrb	r1, [r4, #7]
 8005dca:	f883 1349 	strb.w	r1, [r3, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005dce:	7a21      	ldrb	r1, [r4, #8]
 8005dd0:	f883 134a 	strb.w	r1, [r3, #842]	; 0x34a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005dd4:	fb08 f907 	mul.w	r9, r8, r7
        ep_ix = 0U;
 8005dd8:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005dda:	4571      	cmp	r1, lr
 8005ddc:	d201      	bcs.n	8005de2 <USBH_Get_CfgDesc+0xc8>
 8005dde:	4594      	cmp	ip, r2
 8005de0:	d802      	bhi.n	8005de8 <USBH_Get_CfgDesc+0xce>
        if_ix++;
 8005de2:	3701      	adds	r7, #1
 8005de4:	331a      	adds	r3, #26
 8005de6:	e7cb      	b.n	8005d80 <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005de8:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005dea:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005dec:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005dee:	7866      	ldrb	r6, [r4, #1]
 8005df0:	2e05      	cmp	r6, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005df2:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005df4:	d1f1      	bne.n	8005dda <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005df6:	1c4e      	adds	r6, r1, #1
 8005df8:	eb09 01c6 	add.w	r1, r9, r6, lsl #3
 8005dfc:	4429      	add	r1, r5
 8005dfe:	f894 a000 	ldrb.w	sl, [r4]
 8005e02:	f881 a344 	strb.w	sl, [r1, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005e06:	f894 a001 	ldrb.w	sl, [r4, #1]
 8005e0a:	f881 a345 	strb.w	sl, [r1, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005e0e:	f894 a002 	ldrb.w	sl, [r4, #2]
 8005e12:	f881 a346 	strb.w	sl, [r1, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005e16:	f894 a003 	ldrb.w	sl, [r4, #3]
 8005e1a:	f881 a347 	strb.w	sl, [r1, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005e1e:	f8b4 a004 	ldrh.w	sl, [r4, #4]
 8005e22:	f8a1 a348 	strh.w	sl, [r1, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005e26:	f894 a006 	ldrb.w	sl, [r4, #6]
 8005e2a:	f881 a34a 	strb.w	sl, [r1, #842]	; 0x34a
            ep_ix++;
 8005e2e:	b2f1      	uxtb	r1, r6
 8005e30:	e7d3      	b.n	8005dda <USBH_Get_CfgDesc+0xc0>

08005e32 <USBH_Get_StringDesc>:
{
 8005e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
 8005e34:	f500 768e 	add.w	r6, r0, #284	; 0x11c
{
 8005e38:	4615      	mov	r5, r2
 8005e3a:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8005e42:	4633      	mov	r3, r6
 8005e44:	2100      	movs	r1, #0
{
 8005e46:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 8005e48:	f7ff ff03 	bl	8005c52 <USBH_GetDescriptor>
 8005e4c:	b978      	cbnz	r0, 8005e6e <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005e4e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d10b      	bne.n	8005e6e <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005e56:	f894 411c 	ldrb.w	r4, [r4, #284]	; 0x11c
 8005e5a:	1ea1      	subs	r1, r4, #2
 8005e5c:	42b9      	cmp	r1, r7
 8005e5e:	bf28      	it	cs
 8005e60:	4639      	movcs	r1, r7
 8005e62:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
 8005e64:	4604      	mov	r4, r0
 8005e66:	42a1      	cmp	r1, r4
 8005e68:	d803      	bhi.n	8005e72 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	702b      	strb	r3, [r5, #0]
}
 8005e6e:	b003      	add	sp, #12
 8005e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8005e72:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
 8005e74:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
 8005e76:	789b      	ldrb	r3, [r3, #2]
 8005e78:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8005e7c:	b2a4      	uxth	r4, r4
 8005e7e:	e7f2      	b.n	8005e66 <USBH_Get_StringDesc+0x34>

08005e80 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8005e80:	7883      	ldrb	r3, [r0, #2]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d105      	bne.n	8005e92 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005e86:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8005e8a:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8005e8c:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005e8e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005e90:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8005e92:	2200      	movs	r2, #0
 8005e94:	4611      	mov	r1, r2
 8005e96:	f7ff be21 	b.w	8005adc <USBH_CtlReq>

08005e9a <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8005e9a:	7883      	ldrb	r3, [r0, #2]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d105      	bne.n	8005eac <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005ea0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005ea4:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8005ea6:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005ea8:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005eaa:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8005eac:	2200      	movs	r2, #0
 8005eae:	4611      	mov	r1, r2
 8005eb0:	f7ff be14 	b.w	8005adc <USBH_CtlReq>

08005eb4 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8005eb4:	7883      	ldrb	r3, [r0, #2]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005eba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ebe:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8005ec0:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 8005ec2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005ec4:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4611      	mov	r1, r2
 8005eca:	f7ff be07 	b.w	8005adc <USBH_CtlReq>

08005ece <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 8005ece:	7883      	ldrb	r3, [r0, #2]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d105      	bne.n	8005ee0 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005ed4:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005ed8:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8005eda:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8005edc:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005ede:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	f7ff bdfa 	b.w	8005adc <USBH_CtlReq>

08005ee8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005eea:	2400      	movs	r4, #0
{
 8005eec:	460b      	mov	r3, r1
 8005eee:	4611      	mov	r1, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8005ef6:	e9cd 4300 	strd	r4, r3, [sp]
 8005efa:	4622      	mov	r2, r4
 8005efc:	4623      	mov	r3, r4
 8005efe:	f000 f9bc 	bl	800627a <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8005f02:	4620      	mov	r0, r4
 8005f04:	b004      	add	sp, #16
 8005f06:	bd10      	pop	{r4, pc}

08005f08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005f08:	b530      	push	{r4, r5, lr}
 8005f0a:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005f0c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8005f10:	460c      	mov	r4, r1
  {
    do_ping = 0U;
 8005f12:	2d00      	cmp	r5, #0
{
 8005f14:	4619      	mov	r1, r3
 8005f16:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f1a:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8005f1c:	bf18      	it	ne
 8005f1e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f24:	2301      	movs	r3, #1
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 f9a5 	bl	800627a <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8005f30:	2000      	movs	r0, #0
 8005f32:	b005      	add	sp, #20
 8005f34:	bd30      	pop	{r4, r5, pc}

08005f36 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8005f36:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f38:	2400      	movs	r4, #0
{
 8005f3a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f3c:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 8005f40:	460d      	mov	r5, r1
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f42:	2201      	movs	r2, #1
{
 8005f44:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f46:	9501      	str	r5, [sp, #4]
 8005f48:	9200      	str	r2, [sp, #0]
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	f000 f995 	bl	800627a <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8005f50:	4620      	mov	r0, r4
 8005f52:	b005      	add	sp, #20
 8005f54:	bd30      	pop	{r4, r5, pc}

08005f56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8005f56:	b530      	push	{r4, r5, lr}
 8005f58:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005f5a:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8005f5e:	460c      	mov	r4, r1
  {
    do_ping = 0U;
 8005f60:	2d00      	cmp	r5, #0
{
 8005f62:	4619      	mov	r1, r3
 8005f64:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f68:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8005f6a:	bf18      	it	ne
 8005f6c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f72:	2301      	movs	r3, #1
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2302      	movs	r3, #2
 8005f7a:	f000 f97e 	bl	800627a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8005f7e:	2000      	movs	r0, #0
 8005f80:	b005      	add	sp, #20
 8005f82:	bd30      	pop	{r4, r5, pc}

08005f84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8005f84:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f86:	2400      	movs	r4, #0
{
 8005f88:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f8a:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 8005f8e:	460d      	mov	r5, r1
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f90:	2201      	movs	r2, #1
{
 8005f92:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f94:	9501      	str	r5, [sp, #4]
 8005f96:	9200      	str	r2, [sp, #0]
 8005f98:	2302      	movs	r3, #2
 8005f9a:	f000 f96e 	bl	800627a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	b005      	add	sp, #20
 8005fa2:	bd30      	pop	{r4, r5, pc}

08005fa4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8005fa6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005faa:	9402      	str	r4, [sp, #8]
 8005fac:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005fb0:	9401      	str	r4, [sp, #4]
 8005fb2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005fb6:	9400      	str	r4, [sp, #0]
 8005fb8:	f000 f943 	bl	8006242 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	b004      	add	sp, #16
 8005fc0:	bd10      	pop	{r4, pc}

08005fc2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8005fc2:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8005fc4:	f000 f950 	bl	8006268 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8005fc8:	2000      	movs	r0, #0
 8005fca:	bd08      	pop	{r3, pc}

08005fcc <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005fcc:	b530      	push	{r4, r5, lr}
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f500 7461 	add.w	r4, r0, #900	; 0x384
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8005fd4:	f854 5b04 	ldr.w	r5, [r4], #4
 8005fd8:	042d      	lsls	r5, r5, #16
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	d408      	bmi.n	8005ff0 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8005fde:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005fe2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 8005fe6:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8005fe8:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 8005fec:	b2d0      	uxtb	r0, r2
 8005fee:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < 11U ; idx++)
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	2b0b      	cmp	r3, #11
 8005ff4:	d1ee      	bne.n	8005fd4 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 8005ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ffa:	e7f7      	b.n	8005fec <USBH_AllocPipe+0x20>

08005ffc <USBH_FreePipe>:
  if (idx < 11U)
 8005ffc:	290a      	cmp	r1, #10
    phost->Pipes[idx] &= 0x7FFFU;
 8005ffe:	bf98      	it	ls
 8006000:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
}
 8006004:	f04f 0000 	mov.w	r0, #0
    phost->Pipes[idx] &= 0x7FFFU;
 8006008:	bf9e      	ittt	ls
 800600a:	f8d1 3384 	ldrls.w	r3, [r1, #900]	; 0x384
 800600e:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8006012:	f8c1 3384 	strls.w	r3, [r1, #900]	; 0x384
}
 8006016:	4770      	bx	lr

08006018 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006018:	2904      	cmp	r1, #4
 800601a:	d00a      	beq.n	8006032 <USBH_UserProcess+0x1a>
 800601c:	2905      	cmp	r1, #5
 800601e:	d004      	beq.n	800602a <USBH_UserProcess+0x12>
 8006020:	2902      	cmp	r1, #2
 8006022:	d105      	bne.n	8006030 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <USBH_UserProcess+0x20>)
 8006026:	7019      	strb	r1, [r3, #0]
  break;
 8006028:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800602a:	4b03      	ldr	r3, [pc, #12]	; (8006038 <USBH_UserProcess+0x20>)
 800602c:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800602e:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006030:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8006032:	4b01      	ldr	r3, [pc, #4]	; (8006038 <USBH_UserProcess+0x20>)
 8006034:	2201      	movs	r2, #1
 8006036:	e7fa      	b.n	800602e <USBH_UserProcess+0x16>
 8006038:	20000c88 	.word	0x20000c88

0800603c <MX_USB_HOST_Init>:
{
 800603c:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800603e:	490c      	ldr	r1, [pc, #48]	; (8006070 <MX_USB_HOST_Init+0x34>)
 8006040:	480c      	ldr	r0, [pc, #48]	; (8006074 <MX_USB_HOST_Init+0x38>)
 8006042:	2201      	movs	r2, #1
 8006044:	f7ff fad0 	bl	80055e8 <USBH_Init>
 8006048:	b108      	cbz	r0, 800604e <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800604a:	f7fb fb26 	bl	800169a <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800604e:	490a      	ldr	r1, [pc, #40]	; (8006078 <MX_USB_HOST_Init+0x3c>)
 8006050:	4808      	ldr	r0, [pc, #32]	; (8006074 <MX_USB_HOST_Init+0x38>)
 8006052:	f7ff fae6 	bl	8005622 <USBH_RegisterClass>
 8006056:	b108      	cbz	r0, 800605c <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8006058:	f7fb fb1f 	bl	800169a <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800605c:	4805      	ldr	r0, [pc, #20]	; (8006074 <MX_USB_HOST_Init+0x38>)
 800605e:	f7ff fb12 	bl	8005686 <USBH_Start>
 8006062:	b118      	cbz	r0, 800606c <MX_USB_HOST_Init+0x30>
}
 8006064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006068:	f7fb bb17 	b.w	800169a <Error_Handler>
}
 800606c:	bd08      	pop	{r3, pc}
 800606e:	bf00      	nop
 8006070:	08006019 	.word	0x08006019
 8006074:	20000c8c 	.word	0x20000c8c
 8006078:	2000000c 	.word	0x2000000c

0800607c <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <MX_USB_HOST_Process+0x8>)
 800607e:	f7ff bb0c 	b.w	800569a <USBH_Process>
 8006082:	bf00      	nop
 8006084:	20000c8c 	.word	0x20000c8c

08006088 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006088:	b510      	push	{r4, lr}
 800608a:	4604      	mov	r4, r0
 800608c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800608e:	2214      	movs	r2, #20
 8006090:	2100      	movs	r1, #0
 8006092:	a803      	add	r0, sp, #12
 8006094:	f005 fcb0 	bl	800b9f8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800609e:	d13a      	bne.n	8006116 <HAL_HCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060a0:	4c1f      	ldr	r4, [pc, #124]	; (8006120 <HAL_HCD_MspInit+0x98>)
 80060a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80060aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	9b00      	ldr	r3, [sp, #0]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80060b8:	2302      	movs	r3, #2
 80060ba:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060be:	2103      	movs	r1, #3
 80060c0:	230a      	movs	r3, #10
 80060c2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060ca:	a903      	add	r1, sp, #12
 80060cc:	f7fb feb0 	bl	8001e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060d6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80060d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060e4:	00d8      	lsls	r0, r3, #3
 80060e6:	d418      	bmi.n	800611a <HAL_HCD_MspInit+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80060f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 80060fa:	f7fc fc75 	bl	80029e8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80060fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006104:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006106:	2200      	movs	r2, #0
 8006108:	2043      	movs	r0, #67	; 0x43
 800610a:	4611      	mov	r1, r2
 800610c:	f7fb fd94 	bl	8001c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006110:	2043      	movs	r0, #67	; 0x43
 8006112:	f7fb fdc3 	bl	8001c9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006116:	b008      	add	sp, #32
 8006118:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 800611a:	f7fc fc65 	bl	80029e8 <HAL_PWREx_EnableVddUSB>
 800611e:	e7f2      	b.n	8006106 <HAL_HCD_MspInit+0x7e>
 8006120:	40021000 	.word	0x40021000

08006124 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8006124:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006128:	f7ff bca2 	b.w	8005a70 <USBH_LL_IncTimer>

0800612c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800612c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006130:	f7ff bcb4 	b.w	8005a9c <USBH_LL_Connect>

08006134 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8006134:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006138:	f7ff bcba 	b.w	8005ab0 <USBH_LL_Disconnect>

0800613c <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800613c:	4770      	bx	lr

0800613e <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800613e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006142:	f7ff bca3 	b.w	8005a8c <USBH_LL_PortEnabled>

08006146 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8006146:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800614a:	f7ff bca3 	b.w	8005a94 <USBH_LL_PortDisabled>
	...

08006150 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006150:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006152:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8006156:	2b01      	cmp	r3, #1
{
 8006158:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800615a:	d11b      	bne.n	8006194 <USBH_LL_Init+0x44>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800615c:	480e      	ldr	r0, [pc, #56]	; (8006198 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 800615e:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006162:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006166:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006168:	2208      	movs	r2, #8
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800616a:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800616e:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006170:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006172:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hhcd_USB_OTG_FS.pData = phost;
 8006176:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800617a:	6103      	str	r3, [r0, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800617c:	f7fb ff83 	bl	8002086 <HAL_HCD_Init>
 8006180:	b108      	cbz	r0, 8006186 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8006182:	f7fb fa8a 	bl	800169a <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006186:	4804      	ldr	r0, [pc, #16]	; (8006198 <USBH_LL_Init+0x48>)
 8006188:	f7fc fb46 	bl	8002818 <HAL_HCD_GetCurrentFrame>
 800618c:	4601      	mov	r1, r0
 800618e:	4620      	mov	r0, r4
 8006190:	f7ff fc6b 	bl	8005a6a <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8006194:	2000      	movs	r0, #0
 8006196:	bd10      	pop	{r4, pc}
 8006198:	20001064 	.word	0x20001064

0800619c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800619c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800619e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80061a2:	f7fc fb3c 	bl	800281e <HAL_HCD_GetCurrentSpeed>
 80061a6:	2803      	cmp	r0, #3
 80061a8:	bf28      	it	cs
 80061aa:	2001      	movcs	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80061ac:	b2c0      	uxtb	r0, r0
 80061ae:	bd08      	pop	{r3, pc}

080061b0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80061b0:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80061b4:	f7fc bb2b 	b.w	800280e <HAL_HCD_HC_GetXferCount>

080061b8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80061b8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80061bc:	f7fc bb21 	b.w	8002802 <HAL_HCD_HC_GetURBState>

080061c0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80061c0:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 80061c2:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d102      	bne.n	80061d0 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 80061ca:	4608      	mov	r0, r1
 80061cc:	f000 f86a 	bl	80062a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80061d0:	20c8      	movs	r0, #200	; 0xc8
 80061d2:	f7fb fcf9 	bl	8001bc8 <HAL_Delay>
  return USBH_OK;
}
 80061d6:	2000      	movs	r0, #0
 80061d8:	bd08      	pop	{r3, pc}

080061da <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80061da:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80061de:	202c      	movs	r0, #44	; 0x2c
 80061e0:	fb00 3101 	mla	r1, r0, r1, r3
 80061e4:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80061e8:	b11b      	cbz	r3, 80061f2 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80061ea:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80061ee:	2000      	movs	r0, #0
 80061f0:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80061f2:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 80061f6:	e7fa      	b.n	80061ee <USBH_LL_SetToggle+0x14>

080061f8 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80061f8:	f7fb bce6 	b.w	8001bc8 <HAL_Delay>

080061fc <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 80061fc:	2803      	cmp	r0, #3
 80061fe:	bf9a      	itte	ls
 8006200:	4b01      	ldrls	r3, [pc, #4]	; (8006208 <USBH_Get_USB_Status+0xc>)
 8006202:	5c18      	ldrbls	r0, [r3, r0]
{
 8006204:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8006206:	4770      	bx	lr
 8006208:	0800f860 	.word	0x0800f860

0800620c <USBH_LL_Start>:
{
 800620c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 800620e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006212:	f7fc facc 	bl	80027ae <HAL_HCD_Start>
}
 8006216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800621a:	f7ff bfef 	b.w	80061fc <USBH_Get_USB_Status>

0800621e <USBH_LL_Stop>:
{
 800621e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8006220:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006224:	f7fc fad8 	bl	80027d8 <HAL_HCD_Stop>
}
 8006228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800622c:	f7ff bfe6 	b.w	80061fc <USBH_Get_USB_Status>

08006230 <USBH_LL_ResetPort>:
{
 8006230:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006232:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006236:	f7fc fae1 	bl	80027fc <HAL_HCD_ResetPort>
}
 800623a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800623e:	f7ff bfdd 	b.w	80061fc <USBH_Get_USB_Status>

08006242 <USBH_LL_OpenPipe>:
{
 8006242:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006244:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 8006248:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 800624c:	f89d 4020 	ldrb.w	r4, [sp, #32]
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006250:	9400      	str	r4, [sp, #0]
 8006252:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006256:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800625a:	f7fb fecc 	bl	8001ff6 <HAL_HCD_HC_Init>
}
 800625e:	b004      	add	sp, #16
 8006260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8006264:	f7ff bfca 	b.w	80061fc <USBH_Get_USB_Status>

08006268 <USBH_LL_ClosePipe>:
{
 8006268:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800626a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800626e:	f7fb fef8 	bl	8002062 <HAL_HCD_HC_Halt>
}
 8006272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8006276:	f7ff bfc1 	b.w	80061fc <USBH_Get_USB_Status>

0800627a <USBH_LL_SubmitURB>:
{
 800627a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800627c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8006280:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8006284:	f89d 4020 	ldrb.w	r4, [sp, #32]
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006288:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800628c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800628e:	e9cd 4500 	strd	r4, r5, [sp]
 8006292:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006296:	f7fb ff43 	bl	8002120 <HAL_HCD_HC_SubmitRequest>
}
 800629a:	b004      	add	sp, #16
 800629c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 80062a0:	f7ff bfac 	b.w	80061fc <USBH_Get_USB_Status>

080062a4 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 80062a4:	1e02      	subs	r2, r0, #0
 80062a6:	bf18      	it	ne
 80062a8:	2201      	movne	r2, #1
 80062aa:	4802      	ldr	r0, [pc, #8]	; (80062b4 <MX_DriverVbusFS+0x10>)
 80062ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062b0:	f7fb be9c 	b.w	8001fec <HAL_GPIO_WritePin>
 80062b4:	48000800 	.word	0x48000800

080062b8 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 80062bc:	221c      	movs	r2, #28
 80062be:	2100      	movs	r1, #0
 80062c0:	4805      	ldr	r0, [pc, #20]	; (80062d8 <_mon_alloc_reset+0x20>)
 80062c2:	f005 fb99 	bl	800b9f8 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 80062c6:	200a      	movs	r0, #10
 80062c8:	f001 f838 	bl	800733c <__wrap_malloc>
 80062cc:	4603      	mov	r3, r0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 f85c 	bl	800738c <__wrap_free>
}
 80062d4:	bf00      	nop
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20001734 	.word	0x20001734

080062dc <dwtIpInit>:
};

#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80062dc:	4a08      	ldr	r2, [pc, #32]	; (8006300 <dwtIpInit+0x24>)
 80062de:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80062e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 80062ea:	f5a2 425d 	sub.w	r2, r2, #56576	; 0xdd00
 80062ee:	2300      	movs	r3, #0
 80062f0:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
}
 80062fe:	4770      	bx	lr
 8006300:	e000ed00 	.word	0xe000ed00

08006304 <cyclesCounterEnd>:
#endif
#endif
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8006304:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 8006306:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <cyclesCounterEnd+0x3c>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8006308:	4d0e      	ldr	r5, [pc, #56]	; (8006344 <cyclesCounterEnd+0x40>)
  return DWT->CYCCNT;
 800630a:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 800630c:	686b      	ldr	r3, [r5, #4]
 800630e:	2100      	movs	r1, #0
 8006310:	1ae4      	subs	r4, r4, r3
 8006312:	9101      	str	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8006314:	f7fb fc52 	bl	8001bbc <HAL_GetTick>
 8006318:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 800631a:	682a      	ldr	r2, [r5, #0]
 800631c:	9901      	ldr	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 800631e:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8006320:	4290      	cmp	r0, r2
 8006322:	d90a      	bls.n	800633a <cyclesCounterEnd+0x36>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8006324:	460b      	mov	r3, r1
 8006326:	f7fa fd4d 	bl	8000dc4 <__aeabi_uldivmod>
 800632a:	f04f 33ff 	mov.w	r3, #4294967295
 800632e:	fba0 0303 	umull	r0, r3, r0, r3
 8006332:	1a59      	subs	r1, r3, r1
 8006334:	1904      	adds	r4, r0, r4
 8006336:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
}
 800633a:	4620      	mov	r0, r4
 800633c:	b003      	add	sp, #12
 800633e:	bd30      	pop	{r4, r5, pc}
 8006340:	e0001000 	.word	0xe0001000
 8006344:	20001728 	.word	0x20001728

08006348 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8006348:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800634c:	4604      	mov	r4, r0
 800634e:	460e      	mov	r6, r1
 8006350:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8006352:	f7ff ffd7 	bl	8006304 <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 8006356:	e9d4 3200 	ldrd	r3, r2, [r4]
 800635a:	3301      	adds	r3, #1
 800635c:	f142 0200 	adc.w	r2, r2, #0
 8006360:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 8006364:	0773      	lsls	r3, r6, #29
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8006366:	e9cd 0100 	strd	r0, r1, [sp]
  if (flags & AI_OBSERVER_POST_EVT) {
 800636a:	d51f      	bpl.n	80063ac <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
 800636c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8006370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006374:	1a51      	subs	r1, r2, r1
 8006376:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 800637a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 800637e:	185b      	adds	r3, r3, r1
 8006380:	eb40 0202 	adc.w	r2, r0, r2
 8006384:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 8006388:	882b      	ldrh	r3, [r5, #0]
 800638a:	6a26      	ldr	r6, [r4, #32]
 800638c:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8006390:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8006394:	f856 200c 	ldr.w	r2, [r6, ip]
 8006398:	685d      	ldr	r5, [r3, #4]
 800639a:	1852      	adds	r2, r2, r1
 800639c:	f846 200c 	str.w	r2, [r6, ip]
    u_obs->nodes[node->c_idx].n_runs += 1;
 80063a0:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 80063a2:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 80063a6:	3201      	adds	r2, #1
    u_obs->nodes[node->c_idx].dur += end_t;
 80063a8:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 80063aa:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 80063ac:	f7ff ffaa 	bl	8006304 <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 80063b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80063b4:	e9dd 8900 	ldrd	r8, r9, [sp]
 80063b8:	ebb3 0308 	subs.w	r3, r3, r8
 80063bc:	eb62 0209 	sbc.w	r2, r2, r9
 80063c0:	181b      	adds	r3, r3, r0
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 80063c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 80063c6:	eb41 0102 	adc.w	r1, r1, r2
  return 0;
}
 80063ca:	2000      	movs	r0, #0
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 80063cc:	e9c4 3104 	strd	r3, r1, [r4, #16]
}
 80063d0:	b002      	add	sp, #8
 80063d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	...

080063d8 <aiDeInit>:
{
 80063d8:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 80063da:	4c09      	ldr	r4, [pc, #36]	; (8006400 <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 80063dc:	4809      	ldr	r0, [pc, #36]	; (8006404 <aiDeInit+0x2c>)
 80063de:	f000 ff9b 	bl	8007318 <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	b150      	cbz	r0, 80063fc <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 80063e6:	f001 f9a1 	bl	800772c <ai_mnetwork_destroy>
 80063ea:	b128      	cbz	r0, 80063f8 <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	f001 f9c0 	bl	8007772 <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 80063f2:	4905      	ldr	r1, [pc, #20]	; (8006408 <aiDeInit+0x30>)
 80063f4:	f000 fd76 	bl	8006ee4 <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	6023      	str	r3, [r4, #0]
}
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	2000167c 	.word	0x2000167c
 8006404:	0800eb60 	.word	0x0800eb60
 8006408:	0800eb7f 	.word	0x0800eb7f

0800640c <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 800640c:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 800640e:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8006410:	f241 3188 	movw	r1, #5000	; 0x1388
 8006414:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 8006418:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 800641c:	f000 ff48 	bl	80072b0 <ioRawGetUint8>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d015      	beq.n	8006450 <aiTestConsole+0x44>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 8006424:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006428:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800642c:	2b51      	cmp	r3, #81	; 0x51
 800642e:	d011      	beq.n	8006454 <aiTestConsole+0x48>
    return CONS_EVT_QUIT;

  if ((c == 'd') || (c == 'D'))
 8006430:	2b44      	cmp	r3, #68	; 0x44
 8006432:	d011      	beq.n	8006458 <aiTestConsole+0x4c>
    return CONS_EVT_HIDE;

  if ((c == 'r') || (c == 'R'))
 8006434:	2b52      	cmp	r3, #82	; 0x52
 8006436:	d011      	beq.n	800645c <aiTestConsole+0x50>
    return CONS_EVT_RESTART;

  if ((c == 'h') || (c == 'H') || (c == '?'))
 8006438:	2b48      	cmp	r3, #72	; 0x48
 800643a:	d011      	beq.n	8006460 <aiTestConsole+0x54>
 800643c:	2a3f      	cmp	r2, #63	; 0x3f
 800643e:	d00f      	beq.n	8006460 <aiTestConsole+0x54>
    return CONS_EVT_HELP;

  if ((c == 'p') || (c == 'P'))
 8006440:	2b50      	cmp	r3, #80	; 0x50
 8006442:	d00f      	beq.n	8006464 <aiTestConsole+0x58>
    return CONS_EVT_PAUSE;

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;
 8006444:	2b58      	cmp	r3, #88	; 0x58
 8006446:	bf14      	ite	ne
 8006448:	2064      	movne	r0, #100	; 0x64
 800644a:	2005      	moveq	r0, #5

  return CONS_EVT_UNDEFINED;
}
 800644c:	b002      	add	sp, #8
 800644e:	bd10      	pop	{r4, pc}
    return CONS_EVT_TIMEOUT;
 8006450:	4620      	mov	r0, r4
 8006452:	e7fb      	b.n	800644c <aiTestConsole+0x40>
    return CONS_EVT_QUIT;
 8006454:	2001      	movs	r0, #1
 8006456:	e7f9      	b.n	800644c <aiTestConsole+0x40>
    return CONS_EVT_HIDE;
 8006458:	2006      	movs	r0, #6
 800645a:	e7f7      	b.n	800644c <aiTestConsole+0x40>
    return CONS_EVT_RESTART;
 800645c:	2002      	movs	r0, #2
 800645e:	e7f5      	b.n	800644c <aiTestConsole+0x40>
    return CONS_EVT_HELP;
 8006460:	2003      	movs	r0, #3
 8006462:	e7f3      	b.n	800644c <aiTestConsole+0x40>
    return CONS_EVT_PAUSE;
 8006464:	2004      	movs	r0, #4
 8006466:	e7f1      	b.n	800644c <aiTestConsole+0x40>

08006468 <aiObserverInit>:
{
 8006468:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 800646a:	4604      	mov	r4, r0
{
 800646c:	b093      	sub	sp, #76	; 0x4c
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 800646e:	b1d0      	cbz	r0, 80064a6 <aiObserverInit+0x3e>
 8006470:	6800      	ldr	r0, [r0, #0]
 8006472:	b1c0      	cbz	r0, 80064a6 <aiObserverInit+0x3e>
 8006474:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006476:	b1b3      	cbz	r3, 80064a6 <aiObserverInit+0x3e>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8006478:	4d16      	ldr	r5, [pc, #88]	; (80064d4 <aiObserverInit+0x6c>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 800647a:	aa04      	add	r2, sp, #16
 800647c:	a903      	add	r1, sp, #12
 800647e:	f001 f9b5 	bl	80077ec <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8006482:	2228      	movs	r2, #40	; 0x28
 8006484:	2100      	movs	r1, #0
 8006486:	4628      	mov	r0, r5
 8006488:	f005 fab6 	bl	800b9f8 <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 800648c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800648e:	0112      	lsls	r2, r2, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8006490:	4610      	mov	r0, r2
 8006492:	9201      	str	r2, [sp, #4]
 8006494:	f000 ff52 	bl	800733c <__wrap_malloc>
  if (!u_observer_ctx.nodes) {
 8006498:	9a01      	ldr	r2, [sp, #4]
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 800649a:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 800649c:	b928      	cbnz	r0, 80064aa <aiObserverInit+0x42>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 800649e:	480e      	ldr	r0, [pc, #56]	; (80064d8 <aiObserverInit+0x70>)
 80064a0:	4611      	mov	r1, r2
 80064a2:	f000 ff39 	bl	8007318 <lc_print>
}
 80064a6:	b013      	add	sp, #76	; 0x4c
 80064a8:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 80064aa:	2100      	movs	r1, #0
 80064ac:	f005 faa4 	bl	800b9f8 <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 80064b0:	490a      	ldr	r1, [pc, #40]	; (80064dc <aiObserverInit+0x74>)
 80064b2:	9803      	ldr	r0, [sp, #12]
 80064b4:	2306      	movs	r3, #6
 80064b6:	462a      	mov	r2, r5
 80064b8:	f003 fa2c 	bl	8009914 <ai_platform_observer_register>
  if (!res) {
 80064bc:	4604      	mov	r4, r0
 80064be:	2800      	cmp	r0, #0
 80064c0:	d1f1      	bne.n	80064a6 <aiObserverInit+0x3e>
    LC_PRINT("W: unable to register the user CB\r\n");
 80064c2:	4807      	ldr	r0, [pc, #28]	; (80064e0 <aiObserverInit+0x78>)
 80064c4:	f000 ff28 	bl	8007318 <lc_print>
    free(u_observer_ctx.nodes);
 80064c8:	6a28      	ldr	r0, [r5, #32]
 80064ca:	f000 ff5f 	bl	800738c <__wrap_free>
    u_observer_ctx.nodes = NULL;
 80064ce:	622c      	str	r4, [r5, #32]
    return;
 80064d0:	e7e9      	b.n	80064a6 <aiObserverInit+0x3e>
 80064d2:	bf00      	nop
 80064d4:	20001700 	.word	0x20001700
 80064d8:	0800eb93 	.word	0x0800eb93
 80064dc:	08006349 	.word	0x08006349
 80064e0:	0800ebc7 	.word	0x0800ebc7

080064e4 <aiObserverDone>:
{
 80064e4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80064e8:	ed2d 8b02 	vpush	{d8}
 80064ec:	b0a0      	sub	sp, #128	; 0x80
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f000 80de 	beq.w	80066b0 <aiObserverDone+0x1cc>
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80da 	beq.w	80066b0 <aiObserverDone+0x1cc>
 80064fc:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80064fe:	2a00      	cmp	r2, #0
 8006500:	f000 80d6 	beq.w	80066b0 <aiObserverDone+0x1cc>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 8006504:	4d6d      	ldr	r5, [pc, #436]	; (80066bc <aiObserverDone+0x1d8>)
 8006506:	6a2a      	ldr	r2, [r5, #32]
 8006508:	2a00      	cmp	r2, #0
 800650a:	f000 80d1 	beq.w	80066b0 <aiObserverDone+0x1cc>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 800650e:	4618      	mov	r0, r3
 8006510:	aa12      	add	r2, sp, #72	; 0x48
 8006512:	a909      	add	r1, sp, #36	; 0x24
 8006514:	f001 f96a 	bl	80077ec <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8006518:	4969      	ldr	r1, [pc, #420]	; (80066c0 <aiObserverDone+0x1dc>)
 800651a:	9809      	ldr	r0, [sp, #36]	; 0x24
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 800651c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 80066dc <aiObserverDone+0x1f8>
    LC_PRINT(fmt, node_info.c_idx,
 8006520:	eddf 8a68 	vldr	s17, [pc, #416]	; 80066c4 <aiObserverDone+0x1e0>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8006524:	462a      	mov	r2, r5
 8006526:	f003 faa1 	bl	8009a6c <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 800652a:	4867      	ldr	r0, [pc, #412]	; (80066c8 <aiObserverDone+0x1e4>)
 800652c:	f000 fef4 	bl	8007318 <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8006530:	6a2b      	ldr	r3, [r5, #32]
 8006532:	2400      	movs	r4, #0
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 800653a:	4623      	mov	r3, r4
 800653c:	f7fa fc42 	bl	8000dc4 <__aeabi_uldivmod>
 8006540:	aa0a      	add	r2, sp, #40	; 0x28
 8006542:	f000 ff91 	bl	8007468 <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8006546:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 800654a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800654e:	fb06 3101 	mla	r1, r6, r1, r3
 8006552:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006554:	485d      	ldr	r0, [pc, #372]	; (80066cc <aiObserverDone+0x1e8>)
 8006556:	f000 fedf 	bl	8007318 <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 800655a:	6a2b      	ldr	r3, [r5, #32]
 800655c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	4623      	mov	r3, r4
 8006564:	f7fa fc2e 	bl	8000dc4 <__aeabi_uldivmod>
 8006568:	aa0a      	add	r2, sp, #40	; 0x28
 800656a:	f000 ff7d 	bl	8007468 <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 800656e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8006572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006574:	4856      	ldr	r0, [pc, #344]	; (80066d0 <aiObserverDone+0x1ec>)
 8006576:	fb06 3101 	mla	r1, r6, r1, r3
 800657a:	f000 fecd 	bl	8007318 <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 800657e:	f1aa 0324 	sub.w	r3, sl, #36	; 0x24
 8006582:	f1aa 0221 	sub.w	r2, sl, #33	; 0x21
 8006586:	f1aa 011c 	sub.w	r1, sl, #28
 800658a:	f1aa 0017 	sub.w	r0, sl, #23
 800658e:	f8cd a000 	str.w	sl, [sp]
 8006592:	f000 fec1 	bl	8007318 <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 8006596:	f10a 000a 	add.w	r0, sl, #10
 800659a:	f000 febd 	bl	8007318 <lc_print>
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 800659e:	f1aa 0bfd 	sub.w	fp, sl, #253	; 0xfd
  node_info.c_idx = 0;
 80065a2:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
  cumul = 0;
 80065a6:	4626      	mov	r6, r4
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80065a8:	f1aa 0ad6 	sub.w	sl, sl, #214	; 0xd6
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 80065ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ae:	a90e      	add	r1, sp, #56	; 0x38
 80065b0:	f003 f8f6 	bl	80097a0 <ai_platform_observer_node_info>
 80065b4:	4680      	mov	r8, r0
 80065b6:	bb20      	cbnz	r0, 8006602 <aiObserverDone+0x11e>
  LC_PRINT(" -------------------------------------------------\r\n");
 80065b8:	4846      	ldr	r0, [pc, #280]	; (80066d4 <aiObserverDone+0x1f0>)
 80065ba:	f000 fead 	bl	8007318 <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 80065be:	6a2b      	ldr	r3, [r5, #32]
 80065c0:	4620      	mov	r0, r4
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	4631      	mov	r1, r6
 80065c6:	4643      	mov	r3, r8
 80065c8:	f7fa fbfc 	bl	8000dc4 <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 80065cc:	aa0a      	add	r2, sp, #40	; 0x28
 80065ce:	f000 ff4b 	bl	8007468 <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 80065d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065dc:	fb00 1202 	mla	r2, r0, r2, r1
 80065e0:	493d      	ldr	r1, [pc, #244]	; (80066d8 <aiObserverDone+0x1f4>)
 80065e2:	1c48      	adds	r0, r1, #1
 80065e4:	f000 fe98 	bl	8007318 <lc_print>
  free(u_observer_ctx.nodes);
 80065e8:	6a28      	ldr	r0, [r5, #32]
 80065ea:	f000 fecf 	bl	800738c <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 80065ee:	4833      	ldr	r0, [pc, #204]	; (80066bc <aiObserverDone+0x1d8>)
 80065f0:	2228      	movs	r2, #40	; 0x28
 80065f2:	4641      	mov	r1, r8
}
 80065f4:	b020      	add	sp, #128	; 0x80
 80065f6:	ecbd 8b02 	vpop	{d8}
 80065fa:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 80065fe:	f005 b9fb 	b.w	800b9f8 <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8006602:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8006606:	6a2a      	ldr	r2, [r5, #32]
 8006608:	0119      	lsls	r1, r3, #4
 800660a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 800660e:	5850      	ldr	r0, [r2, r1]
 8006610:	6859      	ldr	r1, [r3, #4]
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8006612:	689a      	ldr	r2, [r3, #8]
    cumul +=  sn->dur;
 8006614:	1904      	adds	r4, r0, r4
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8006616:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 800661a:	eb41 0606 	adc.w	r6, r1, r6
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 800661e:	f7fa fbd1 	bl	8000dc4 <__aeabi_uldivmod>
 8006622:	aa0a      	add	r2, sp, #40	; 0x28
 8006624:	f000 ff20 	bl	8007468 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8006628:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 800662c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
    LC_PRINT(fmt, node_info.c_idx,
 8006630:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 8006634:	f3c0 000e 	ubfx	r0, r0, #0, #15
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8006638:	ea1b 0823 	ands.w	r8, fp, r3, asr #32
 800663c:	bf38      	it	cc
 800663e:	46d0      	movcc	r8, sl
    LC_PRINT(fmt, node_info.c_idx,
 8006640:	f003 ff72 	bl	800a528 <ai_layer_type_name>
 8006644:	2125      	movs	r1, #37	; 0x25
 8006646:	9104      	str	r1, [sp, #16]
 8006648:	9007      	str	r0, [sp, #28]
 800664a:	6a29      	ldr	r1, [r5, #32]
 800664c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8006650:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800665a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800665e:	f7fa fb6b 	bl	8000d38 <__aeabi_ul2f>
 8006662:	ee07 0a90 	vmov	s15, r0
 8006666:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 800666a:	ee27 8aa8 	vmul.f32	s16, s15, s17
 800666e:	f7fa fb63 	bl	8000d38 <__aeabi_ul2f>
 8006672:	ee07 0a90 	vmov	s15, r0
 8006676:	eec8 7a27 	vdiv.f32	s15, s16, s15
 800667a:	ee17 0a90 	vmov	r0, s15
 800667e:	f7f9 ff63 	bl	8000548 <__aeabi_f2d>
 8006682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006686:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006688:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800668a:	9101      	str	r1, [sp, #4]
 800668c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800668e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8006692:	fb0c 1100 	mla	r1, ip, r0, r1
 8006696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800669a:	9100      	str	r1, [sp, #0]
 800669c:	4640      	mov	r0, r8
 800669e:	4649      	mov	r1, r9
 80066a0:	f000 fe3a 	bl	8007318 <lc_print>
    node_info.c_idx++;
 80066a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80066a8:	3301      	adds	r3, #1
 80066aa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80066ae:	e77d      	b.n	80065ac <aiObserverDone+0xc8>
}
 80066b0:	b020      	add	sp, #128	; 0x80
 80066b2:	ecbd 8b02 	vpop	{d8}
 80066b6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80066ba:	bf00      	nop
 80066bc:	20001700 	.word	0x20001700
 80066c0:	08006349 	.word	0x08006349
 80066c4:	42c80000 	.word	0x42c80000
 80066c8:	0800ec36 	.word	0x0800ec36
 80066cc:	0800ec54 	.word	0x0800ec54
 80066d0:	0800ec8f 	.word	0x0800ec8f
 80066d4:	0800ed29 	.word	0x0800ed29
 80066d8:	0800ed5e 	.word	0x0800ed5e
 80066dc:	0800ece8 	.word	0x0800ece8

080066e0 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 80066e0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 80066e4:	484d      	ldr	r0, [pc, #308]	; (800681c <aiSystemPerformanceInit+0x13c>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80066e6:	4d4e      	ldr	r5, [pc, #312]	; (8006820 <aiSystemPerformanceInit+0x140>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80066e8:	4e4e      	ldr	r6, [pc, #312]	; (8006824 <aiSystemPerformanceInit+0x144>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80066ea:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8006848 <aiSystemPerformanceInit+0x168>
{
 80066ee:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 80066f0:	f000 fe12 	bl	8007318 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 80066f4:	494c      	ldr	r1, [pc, #304]	; (8006828 <aiSystemPerformanceInit+0x148>)
 80066f6:	2300      	movs	r3, #0
 80066f8:	2206      	movs	r2, #6
 80066fa:	f101 0022 	add.w	r0, r1, #34	; 0x22
 80066fe:	f000 fe0b 	bl	8007318 <lc_print>
 8006702:	2400      	movs	r4, #0
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 8006704:	4849      	ldr	r0, [pc, #292]	; (800682c <aiSystemPerformanceInit+0x14c>)
 8006706:	f000 fe07 	bl	8007318 <lc_print>

  systemSettingLog();
 800670a:	f000 ff19 	bl	8007540 <systemSettingLog>

  crcIpInit();
 800670e:	f000 fe93 	bl	8007438 <crcIpInit>
  dwtIpInit();
 8006712:	f7ff fde3 	bl	80062dc <dwtIpInit>
  HAL_Delay(100);
 8006716:	2064      	movs	r0, #100	; 0x64
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8006718:	606c      	str	r4, [r5, #4]
  HAL_Delay(100);
 800671a:	f7fb fa55 	bl	8001bc8 <HAL_Delay>
  return DWT->CYCCNT;
 800671e:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 8006720:	aa02      	add	r2, sp, #8
 8006722:	2564      	movs	r5, #100	; 0x64
 8006724:	4621      	mov	r1, r4
 8006726:	fbb0 f0f5 	udiv	r0, r0, r5
 800672a:	f000 fe9d 	bl	8007468 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 800672e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8006732:	9a05      	ldr	r2, [sp, #20]
 8006734:	483e      	ldr	r0, [pc, #248]	; (8006830 <aiSystemPerformanceInit+0x150>)
 8006736:	fb05 3101 	mla	r1, r5, r1, r3
 800673a:	f000 fded 	bl	8007318 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 800673e:	aa02      	add	r2, sp, #8
 8006740:	2100      	movs	r1, #0
 8006742:	f04f 30ff 	mov.w	r0, #4294967295
 8006746:	f000 fe8f 	bl	8007468 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 800674a:	9a03      	ldr	r2, [sp, #12]
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006752:	fb01 3302 	mla	r3, r1, r2, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8006756:	4635      	mov	r5, r6
 8006758:	4a36      	ldr	r2, [pc, #216]	; (8006834 <aiSystemPerformanceInit+0x154>)
 800675a:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 800675c:	f7ff fdbe 	bl	80062dc <dwtIpInit>
  aiPlatformVersion();
 8006760:	f000 fbaa 	bl	8006eb8 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8006764:	f845 4b04 	str.w	r4, [r5], #4
  LC_PRINT("Discovering the network(s)...\r\n");
 8006768:	4833      	ldr	r0, [pc, #204]	; (8006838 <aiSystemPerformanceInit+0x158>)
 800676a:	f000 fdd5 	bl	8007318 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 800676e:	f109 0a17 	add.w	sl, r9, #23
  LC_PRINT("Initializing the network\r\n");
 8006772:	f109 0b48 	add.w	fp, r9, #72	; 0x48
    nn_name = ai_mnetwork_find(NULL, idx);
 8006776:	4621      	mov	r1, r4
 8006778:	2000      	movs	r0, #0
 800677a:	f000 ff9b 	bl	80076b4 <ai_mnetwork_find>
    if (nn_name) {
 800677e:	4680      	mov	r8, r0
 8006780:	b188      	cbz	r0, 80067a6 <aiSystemPerformanceInit+0xc6>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8006782:	4601      	mov	r1, r0
 8006784:	4648      	mov	r0, r9
 8006786:	f000 fdc7 	bl	8007318 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 800678a:	4641      	mov	r1, r8
 800678c:	4650      	mov	r0, sl
 800678e:	f000 fdc3 	bl	8007318 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8006792:	2200      	movs	r2, #0
 8006794:	1f29      	subs	r1, r5, #4
 8006796:	4640      	mov	r0, r8
 8006798:	f000 ff9a 	bl	80076d0 <ai_mnetwork_create>
  if (err.type) {
 800679c:	b2c3      	uxtb	r3, r0
 800679e:	b14b      	cbz	r3, 80067b4 <aiSystemPerformanceInit+0xd4>
    aiLogErr(err, "ai_mnetwork_create");
 80067a0:	4926      	ldr	r1, [pc, #152]	; (800683c <aiSystemPerformanceInit+0x15c>)
 80067a2:	f000 fb9f 	bl	8006ee4 <aiLogErr>
  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 80067a6:	2003      	movs	r0, #3
 80067a8:	f005 fe78 	bl	800c49c <srand>

  return 0;
}
 80067ac:	2000      	movs	r0, #0
 80067ae:	b006      	add	sp, #24
 80067b0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 80067b4:	4658      	mov	r0, fp
 80067b6:	f000 fdaf 	bl	8007318 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80067ba:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80067be:	4629      	mov	r1, r5
 80067c0:	f000 ffcc 	bl	800775c <ai_mnetwork_get_report>
 80067c4:	46a8      	mov	r8, r5
 80067c6:	4603      	mov	r3, r0
 80067c8:	b930      	cbnz	r0, 80067d8 <aiSystemPerformanceInit+0xf8>
    err = ai_mnetwork_get_error(ctx->handle);
 80067ca:	01e4      	lsls	r4, r4, #7
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	5930      	ldr	r0, [r6, r4]
 80067d0:	f000 ffcf 	bl	8007772 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 80067d4:	491a      	ldr	r1, [pc, #104]	; (8006840 <aiSystemPerformanceInit+0x160>)
 80067d6:	e00a      	b.n	80067ee <aiSystemPerformanceInit+0x10e>
  if (!ai_mnetwork_init(ctx->handle)) {
 80067d8:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80067dc:	f000 ffd6 	bl	800778c <ai_mnetwork_init>
 80067e0:	b968      	cbnz	r0, 80067fe <aiSystemPerformanceInit+0x11e>
    err = ai_mnetwork_get_error(ctx->handle);
 80067e2:	01e4      	lsls	r4, r4, #7
 80067e4:	9001      	str	r0, [sp, #4]
 80067e6:	5930      	ldr	r0, [r6, r4]
 80067e8:	f000 ffc3 	bl	8007772 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 80067ec:	4915      	ldr	r1, [pc, #84]	; (8006844 <aiSystemPerformanceInit+0x164>)
    aiLogErr(err, "ai_mnetwork_get_info");
 80067ee:	f000 fb79 	bl	8006ee4 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80067f2:	5930      	ldr	r0, [r6, r4]
 80067f4:	f000 ff9a 	bl	800772c <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 80067f8:	9b01      	ldr	r3, [sp, #4]
 80067fa:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 80067fc:	e7d3      	b.n	80067a6 <aiSystemPerformanceInit+0xc6>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80067fe:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8006802:	4629      	mov	r1, r5
 8006804:	f000 ffaa 	bl	800775c <ai_mnetwork_get_report>
 8006808:	3580      	adds	r5, #128	; 0x80
 800680a:	4603      	mov	r3, r0
 800680c:	2800      	cmp	r0, #0
 800680e:	d0dc      	beq.n	80067ca <aiSystemPerformanceInit+0xea>
    aiPrintNetworkInfo(&ctx->report);
 8006810:	4640      	mov	r0, r8
 8006812:	f000 fc77 	bl	8007104 <aiPrintNetworkInfo>
    idx++;
 8006816:	3401      	adds	r4, #1
  } while (nn_name);
 8006818:	e7ad      	b.n	8006776 <aiSystemPerformanceInit+0x96>
 800681a:	bf00      	nop
 800681c:	0800ed73 	.word	0x0800ed73
 8006820:	e0001000 	.word	0xe0001000
 8006824:	2000167c 	.word	0x2000167c
 8006828:	0800ed79 	.word	0x0800ed79
 800682c:	0800eda8 	.word	0x0800eda8
 8006830:	0800edac 	.word	0x0800edac
 8006834:	20001728 	.word	0x20001728
 8006838:	0800ede6 	.word	0x0800ede6
 800683c:	0800ee3b 	.word	0x0800ee3b
 8006840:	0800ee69 	.word	0x0800ee69
 8006844:	0800ee7e 	.word	0x0800ee7e
 8006848:	0800ee06 	.word	0x0800ee06

0800684c <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 800684c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8006850:	ed2d 8b02 	vpush	{d8}
  int r;
  int idx = 0;

  HAL_UART_Receive_IT(&huart2, buffer, 784);
 8006854:	499f      	ldr	r1, [pc, #636]	; (8006ad4 <aiSystemPerformanceProcess+0x288>)
 8006856:	48a0      	ldr	r0, [pc, #640]	; (8006ad8 <aiSystemPerformanceProcess+0x28c>)
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8006858:	4ca0      	ldr	r4, [pc, #640]	; (8006adc <aiSystemPerformanceProcess+0x290>)
{
 800685a:	b09c      	sub	sp, #112	; 0x70
  HAL_UART_Receive_IT(&huart2, buffer, 784);
 800685c:	f44f 7244 	mov.w	r2, #784	; 0x310
 8006860:	f7fe f982 	bl	8004b68 <HAL_UART_Receive_IT>

  do {
	  if (flag == 1)
 8006864:	4b9e      	ldr	r3, [pc, #632]	; (8006ae0 <aiSystemPerformanceProcess+0x294>)
 8006866:	781a      	ldrb	r2, [r3, #0]
 8006868:	2a01      	cmp	r2, #1
 800686a:	f040 821f 	bne.w	8006cac <aiSystemPerformanceProcess+0x460>
	  {
		  flag = 0;
 800686e:	2200      	movs	r2, #0
		  HAL_Delay(5000);
 8006870:	f241 3088 	movw	r0, #5000	; 0x1388
		  flag = 0;
 8006874:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(5000);
 8006876:	f7fb f9a7 	bl	8001bc8 <HAL_Delay>
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	b94b      	cbnz	r3, 8006892 <aiSystemPerformanceProcess+0x46>
    LC_PRINT("E: network handle is NULL\r\n");
 800687e:	4899      	ldr	r0, [pc, #612]	; (8006ae4 <aiSystemPerformanceProcess+0x298>)
 8006880:	f000 fd4a 	bl	8007318 <lc_print>
		  //idx = (idx+1) % AI_MNETWORK_NUMBER;
	  }
    //r = aiTestPerformance(idx);
    idx = (idx+1) % AI_MNETWORK_NUMBER;

    if (!r) {
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  } while (r==0);

  return r;
}
 8006888:	b01c      	add	sp, #112	; 0x70
 800688a:	ecbd 8b02 	vpop	{d8}
 800688e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8006892:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8006896:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 800689a:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8006b1c <aiSystemPerformanceProcess+0x2d0>
  MON_STACK_INIT();
 800689e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a2:	f000 fd9b 	bl	80073dc <stackMonInit>
  if (profiling_mode)
 80068a6:	f899 3000 	ldrb.w	r3, [r9]
 80068aa:	b30b      	cbz	r3, 80068f0 <aiSystemPerformanceProcess+0xa4>
    niter = _APP_ITER_ * profiling_factor;
 80068ac:	4b8e      	ldr	r3, [pc, #568]	; (8006ae8 <aiSystemPerformanceProcess+0x29c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 80068b4:	6861      	ldr	r1, [r4, #4]
 80068b6:	488d      	ldr	r0, [pc, #564]	; (8006aec <aiSystemPerformanceProcess+0x2a0>)
 80068b8:	4642      	mov	r2, r8
 80068ba:	f000 fd2d 	bl	8007318 <lc_print>
 80068be:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 80068c2:	4d8b      	ldr	r5, [pc, #556]	; (8006af0 <aiSystemPerformanceProcess+0x2a4>)
 80068c4:	69aa      	ldr	r2, [r5, #24]
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d004      	beq.n	80068d4 <aiSystemPerformanceProcess+0x88>
 80068ca:	f3ef 8108 	mrs	r1, MSP
 80068ce:	4889      	ldr	r0, [pc, #548]	; (8006af4 <aiSystemPerformanceProcess+0x2a8>)
 80068d0:	f000 fd22 	bl	8007318 <lc_print>
  MON_STACK_MARK();
 80068d4:	792b      	ldrb	r3, [r5, #4]
 80068d6:	b973      	cbnz	r3, 80068f6 <aiSystemPerformanceProcess+0xaa>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 80068d8:	f8b4 e034 	ldrh.w	lr, [r4, #52]	; 0x34
 80068dc:	f1be 0f01 	cmp.w	lr, #1
 80068e0:	d915      	bls.n	800690e <aiSystemPerformanceProcess+0xc2>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 80068e2:	4885      	ldr	r0, [pc, #532]	; (8006af8 <aiSystemPerformanceProcess+0x2ac>)
 80068e4:	f000 fd18 	bl	8007318 <lc_print>
    HAL_Delay(100);
 80068e8:	2064      	movs	r0, #100	; 0x64
 80068ea:	f7fb f96d 	bl	8001bc8 <HAL_Delay>
 80068ee:	e7c9      	b.n	8006884 <aiSystemPerformanceProcess+0x38>
    niter = _APP_ITER_;
 80068f0:	f04f 0810 	mov.w	r8, #16
 80068f4:	e7de      	b.n	80068b4 <aiSystemPerformanceProcess+0x68>
  MON_STACK_MARK();
 80068f6:	69eb      	ldr	r3, [r5, #28]
 80068f8:	3303      	adds	r3, #3
 80068fa:	f023 0303 	bic.w	r3, r3, #3
 80068fe:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 8006902:	69aa      	ldr	r2, [r5, #24]
 8006904:	4293      	cmp	r3, r2
 8006906:	d2e7      	bcs.n	80068d8 <aiSystemPerformanceProcess+0x8c>
 8006908:	f843 1b04 	str.w	r1, [r3], #4
 800690c:	e7f9      	b.n	8006902 <aiSystemPerformanceProcess+0xb6>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 800690e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8006912:	f1bc 0f01 	cmp.w	ip, #1
 8006916:	d8e4      	bhi.n	80068e2 <aiSystemPerformanceProcess+0x96>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8006918:	f8df a208 	ldr.w	sl, [pc, #520]	; 8006b24 <aiSystemPerformanceProcess+0x2d8>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800691c:	2300      	movs	r3, #0
 800691e:	e010      	b.n	8006942 <aiSystemPerformanceProcess+0xf6>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8006920:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
 8006924:	465e      	mov	r6, fp
 8006926:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006928:	ad0e      	add	r5, sp, #56	; 0x38
 800692a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800692c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8006930:	f8db 3004 	ldr.w	r3, [fp, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8006934:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8006938:	b90b      	cbnz	r3, 800693e <aiSystemPerformanceProcess+0xf2>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 800693a:	f8da 3000 	ldr.w	r3, [sl]
 800693e:	930f      	str	r3, [sp, #60]	; 0x3c
    niter = _APP_ITER_;
 8006940:	2301      	movs	r3, #1
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8006942:	459e      	cmp	lr, r3
 8006944:	dcec      	bgt.n	8006920 <aiSystemPerformanceProcess+0xd4>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8006946:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8006b28 <aiSystemPerformanceProcess+0x2dc>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 800694a:	2300      	movs	r3, #0
 800694c:	459c      	cmp	ip, r3
 800694e:	dc2a      	bgt.n	80069a6 <aiSystemPerformanceProcess+0x15a>
  if (profiling_mode) {
 8006950:	f899 3000 	ldrb.w	r3, [r9]
 8006954:	b14b      	cbz	r3, 800696a <aiSystemPerformanceProcess+0x11e>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 8006956:	4b64      	ldr	r3, [pc, #400]	; (8006ae8 <aiSystemPerformanceProcess+0x29c>)
 8006958:	4868      	ldr	r0, [pc, #416]	; (8006afc <aiSystemPerformanceProcess+0x2b0>)
 800695a:	6819      	ldr	r1, [r3, #0]
 800695c:	f000 fcdc 	bl	8007318 <lc_print>
    fflush(stdout);
 8006960:	4b67      	ldr	r3, [pc, #412]	; (8006b00 <aiSystemPerformanceProcess+0x2b4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6898      	ldr	r0, [r3, #8]
 8006966:	f004 fef9 	bl	800b75c <fflush>
  if (observer_mode) {
 800696a:	4b66      	ldr	r3, [pc, #408]	; (8006b04 <aiSystemPerformanceProcess+0x2b8>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b153      	cbz	r3, 8006986 <aiSystemPerformanceProcess+0x13a>
    MON_ALLOC_ENABLE();
 8006970:	4d65      	ldr	r5, [pc, #404]	; (8006b08 <aiSystemPerformanceProcess+0x2bc>)
    MON_ALLOC_RESET();
 8006972:	f7ff fca1 	bl	80062b8 <_mon_alloc_reset>
    MON_ALLOC_ENABLE();
 8006976:	682b      	ldr	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8006978:	4620      	mov	r0, r4
    MON_ALLOC_ENABLE();
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8006980:	f7ff fd72 	bl	8006468 <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 8006984:	696b      	ldr	r3, [r5, #20]
    	float v = (ai_float) buffer[j] / 255;
 8006986:	ed9f 8a61 	vldr	s16, [pc, #388]	; 8006b0c <aiSystemPerformanceProcess+0x2c0>
  int observer_heap_sz = 0UL;
 800698a:	9306      	str	r3, [sp, #24]
  tcumul = 0ULL;
 800698c:	2500      	movs	r5, #0
  MON_ALLOC_RESET();
 800698e:	f7ff fc93 	bl	80062b8 <_mon_alloc_reset>
  for (iter = 0; iter < niter; iter++) {
 8006992:	462e      	mov	r6, r5
  tcumul = 0ULL;
 8006994:	9504      	str	r5, [sp, #16]
  for (iter = 0; iter < niter; iter++) {
 8006996:	4546      	cmp	r6, r8
 8006998:	f280 80ce 	bge.w	8006b38 <aiSystemPerformanceProcess+0x2ec>
 800699c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80069a0:	f04f 0b00 	mov.w	fp, #0
 80069a4:	e02e      	b.n	8006a04 <aiSystemPerformanceProcess+0x1b8>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 80069a6:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
 80069aa:	4656      	mov	r6, sl
 80069ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80069ae:	ad15      	add	r5, sp, #84	; 0x54
 80069b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069b2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 80069b6:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 80069ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 80069be:	b90b      	cbnz	r3, 80069c4 <aiSystemPerformanceProcess+0x178>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 80069c0:	f8de 3000 	ldr.w	r3, [lr]
 80069c4:	9316      	str	r3, [sp, #88]	; 0x58
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80069c6:	2301      	movs	r3, #1
 80069c8:	e7c0      	b.n	800694c <aiSystemPerformanceProcess+0x100>
      ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 80069ca:	e9da 2300 	ldrd	r2, r3, [sl]
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80069ce:	f3c2 4143 	ubfx	r1, r2, #17, #4
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 80069d2:	f3c2 12d1 	ubfx	r2, r2, #7, #18
 80069d6:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80069da:	9207      	str	r2, [sp, #28]
            in_data[j] = (ai_i8)(v * 127);
 80069dc:	eddf 8a4c 	vldr	s17, [pc, #304]	; 8006b10 <aiSystemPerformanceProcess+0x2c4>
 80069e0:	4a3c      	ldr	r2, [pc, #240]	; (8006ad4 <aiSystemPerformanceProcess+0x288>)
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80069e2:	9105      	str	r1, [sp, #20]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 80069e4:	f04f 0900 	mov.w	r9, #0
 80069e8:	2101      	movs	r1, #1
 80069ea:	4650      	mov	r0, sl
 80069ec:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80069f0:	f001 fada 	bl	8007fa8 <ai_buffer_get_size>
 80069f4:	4581      	cmp	r9, r0
 80069f6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80069fa:	d343      	bcc.n	8006a84 <aiSystemPerformanceProcess+0x238>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80069fc:	f10b 0b01 	add.w	fp, fp, #1
 8006a00:	f10a 0a1c 	add.w	sl, sl, #28
 8006a04:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8006a06:	459b      	cmp	fp, r3
 8006a08:	dbdf      	blt.n	80069ca <aiSystemPerformanceProcess+0x17e>
    MON_ALLOC_ENABLE();
 8006a0a:	4a3f      	ldr	r2, [pc, #252]	; (8006b08 <aiSystemPerformanceProcess+0x2bc>)
 8006a0c:	6813      	ldr	r3, [r2, #0]
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6013      	str	r3, [r2, #0]
  cyclesCount.tick_start = HAL_GetTick();
 8006a14:	f7fb f8d2 	bl	8001bbc <HAL_GetTick>
 8006a18:	4b3e      	ldr	r3, [pc, #248]	; (8006b14 <aiSystemPerformanceProcess+0x2c8>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8006a1a:	4a3f      	ldr	r2, [pc, #252]	; (8006b18 <aiSystemPerformanceProcess+0x2cc>)
  cyclesCount.tick_start = HAL_GetTick();
 8006a1c:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8006a1e:	f04f 0b00 	mov.w	fp, #0
 8006a22:	f8c2 b004 	str.w	fp, [r2, #4]
  return DWT->CYCCNT;
 8006a26:	6852      	ldr	r2, [r2, #4]
  cyclesCount.dwt_start = dwtGetCycles();
 8006a28:	605a      	str	r2, [r3, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	aa15      	add	r2, sp, #84	; 0x54
 8006a2e:	a90e      	add	r1, sp, #56	; 0x38
 8006a30:	f000 fecb 	bl	80077ca <ai_mnetwork_run>
    if (batch != 1) {
 8006a34:	2801      	cmp	r0, #1
 8006a36:	d179      	bne.n	8006b2c <aiSystemPerformanceProcess+0x2e0>
 8006a38:	f10d 0954 	add.w	r9, sp, #84	; 0x54
    for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8006a3c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006a3e:	4593      	cmp	fp, r2
 8006a40:	f2c0 816a 	blt.w	8006d18 <aiSystemPerformanceProcess+0x4cc>
    tend = cyclesCounterEnd();
 8006a44:	f7ff fc5e 	bl	8006304 <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 8006a48:	4a2f      	ldr	r2, [pc, #188]	; (8006b08 <aiSystemPerformanceProcess+0x2bc>)
 8006a4a:	6813      	ldr	r3, [r2, #0]
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	6013      	str	r3, [r2, #0]
    tcumul += tend;
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	1945      	adds	r5, r0, r5
 8006a56:	eb43 0301 	adc.w	r3, r3, r1
    dwtCyclesToTime(tend, &t);
 8006a5a:	aa0a      	add	r2, sp, #40	; 0x28
    tcumul += tend;
 8006a5c:	9304      	str	r3, [sp, #16]
    dwtCyclesToTime(tend, &t);
 8006a5e:	f000 fd03 	bl	8007468 <dwtCyclesToTime>
    if (!profiling_mode) {
 8006a62:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <aiSystemPerformanceProcess+0x2d0>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b95b      	cbnz	r3, 8006a80 <aiSystemPerformanceProcess+0x234>
      if (t.s > 10)
 8006a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      LC_PRINT(".");
 8006a6a:	482d      	ldr	r0, [pc, #180]	; (8006b20 <aiSystemPerformanceProcess+0x2d4>)
      if (t.s > 10)
 8006a6c:	2b0a      	cmp	r3, #10
 8006a6e:	bfc8      	it	gt
 8006a70:	46b0      	movgt	r8, r6
      LC_PRINT(".");
 8006a72:	f000 fc51 	bl	8007318 <lc_print>
      fflush(stdout);
 8006a76:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <aiSystemPerformanceProcess+0x2b4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6898      	ldr	r0, [r3, #8]
 8006a7c:	f004 fe6e 	bl	800b75c <fflush>
  for (iter = 0; iter < niter; iter++) {
 8006a80:	3601      	adds	r6, #1
 8006a82:	e788      	b.n	8006996 <aiSystemPerformanceProcess+0x14a>
    	float v = (ai_float) buffer[j] / 255;
 8006a84:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006a88:	ee07 1a10 	vmov	s14, r1
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8006a8c:	9905      	ldr	r1, [sp, #20]
    	float v = (ai_float) buffer[j] / 255;
 8006a8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8006a92:	2901      	cmp	r1, #1
    	float v = (ai_float) buffer[j] / 255;
 8006a94:	eec7 7a08 	vdiv.f32	s15, s14, s16
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8006a98:	d106      	bne.n	8006aa8 <aiSystemPerformanceProcess+0x25c>
          *(ai_float *)(in_data + j * 4) = v;
 8006a9a:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 8006a9e:	edc1 7a00 	vstr	s15, [r1]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8006aa2:	f109 0901 	add.w	r9, r9, #1
 8006aa6:	e79f      	b.n	80069e8 <aiSystemPerformanceProcess+0x19c>
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8006aa8:	9907      	ldr	r1, [sp, #28]
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	d0f9      	beq.n	8006aa2 <aiSystemPerformanceProcess+0x256>
            in_data[j] = (ai_i8)(v * 127);
 8006aae:	ee67 7aa8 	vmul.f32	s15, s15, s17
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8006ab2:	9805      	ldr	r0, [sp, #20]
            in_data[j] = (ai_i8)(v * 127);
 8006ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8006ab8:	2803      	cmp	r0, #3
            in_data[j] = (ai_i8)(v * 127);
 8006aba:	edcd 7a08 	vstr	s15, [sp, #32]
 8006abe:	f99d 1020 	ldrsb.w	r1, [sp, #32]
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8006ac2:	d002      	beq.n	8006aca <aiSystemPerformanceProcess+0x27e>
              in_data[j] = (in_data[j] > 0)?(ai_i8)1:(ai_i8)0;
 8006ac4:	f803 1009 	strb.w	r1, [r3, r9]
 8006ac8:	e7eb      	b.n	8006aa2 <aiSystemPerformanceProcess+0x256>
 8006aca:	2900      	cmp	r1, #0
 8006acc:	bfd4      	ite	le
 8006ace:	2100      	movle	r1, #0
 8006ad0:	2101      	movgt	r1, #1
 8006ad2:	e7f7      	b.n	8006ac4 <aiSystemPerformanceProcess+0x278>
 8006ad4:	20001368 	.word	0x20001368
 8006ad8:	20000c00 	.word	0x20000c00
 8006adc:	2000167c 	.word	0x2000167c
 8006ae0:	20001678 	.word	0x20001678
 8006ae4:	0800ee8f 	.word	0x0800ee8f
 8006ae8:	20000030 	.word	0x20000030
 8006aec:	0800eeab 	.word	0x0800eeab
 8006af0:	20001750 	.word	0x20001750
 8006af4:	0800eeee 	.word	0x0800eeee
 8006af8:	0800ef32 	.word	0x0800ef32
 8006afc:	0800ef68 	.word	0x0800ef68
 8006b00:	20000774 	.word	0x20000774
 8006b04:	2000002c 	.word	0x2000002c
 8006b08:	20001734 	.word	0x20001734
 8006b0c:	437f0000 	.word	0x437f0000
 8006b10:	42fe0000 	.word	0x42fe0000
 8006b14:	20001728 	.word	0x20001728
 8006b18:	e0001000 	.word	0xe0001000
 8006b1c:	200016fc 	.word	0x200016fc
 8006b20:	0800efa3 	.word	0x0800efa3
 8006b24:	2000003c 	.word	0x2000003c
 8006b28:	20000040 	.word	0x20000040
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	f000 fe20 	bl	8007772 <ai_mnetwork_get_error>
 8006b32:	49b8      	ldr	r1, [pc, #736]	; (8006e14 <aiSystemPerformanceProcess+0x5c8>)
 8006b34:	f000 f9d6 	bl	8006ee4 <aiLogErr>
  MON_STACK_EVALUATE();
 8006b38:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8006e94 <aiSystemPerformanceProcess+0x648>
  LC_PRINT("\r\n");
 8006b3c:	48b6      	ldr	r0, [pc, #728]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
 8006b3e:	f000 fbeb 	bl	8007318 <lc_print>
  MON_STACK_EVALUATE();
 8006b42:	f898 0004 	ldrb.w	r0, [r8, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c8 2008 	str.w	r2, [r8, #8]
 8006b4c:	b338      	cbz	r0, 8006b9e <aiSystemPerformanceProcess+0x352>
 8006b4e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006b52:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006b56:	1a59      	subs	r1, r3, r1
 8006b58:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006b5c:	3303      	adds	r3, #3
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	f103 0c20 	add.w	ip, r3, #32
 8006b66:	f853 eb04 	ldr.w	lr, [r3], #4
 8006b6a:	f1be 3fde 	cmp.w	lr, #3739147998	; 0xdededede
 8006b6e:	bf18      	it	ne
 8006b70:	4602      	movne	r2, r0
 8006b72:	4563      	cmp	r3, ip
 8006b74:	d1f7      	bne.n	8006b66 <aiSystemPerformanceProcess+0x31a>
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	f040 80ec 	bne.w	8006d54 <aiSystemPerformanceProcess+0x508>
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8d8 c018 	ldr.w	ip, [r8, #24]
 8006b82:	f8c8 2008 	str.w	r2, [r8, #8]
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006b8c:	f1b0 3fde 	cmp.w	r0, #3739147998	; 0xdededede
 8006b90:	d102      	bne.n	8006b98 <aiSystemPerformanceProcess+0x34c>
 8006b92:	4563      	cmp	r3, ip
 8006b94:	f0c0 80d9 	bcc.w	8006d4a <aiSystemPerformanceProcess+0x4fe>
 8006b98:	1a89      	subs	r1, r1, r2
 8006b9a:	f8c8 1008 	str.w	r1, [r8, #8]
  LC_PRINT("\r\n");
 8006b9e:	489e      	ldr	r0, [pc, #632]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
 8006ba0:	f000 fbba 	bl	8007318 <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 8006ba4:	4b9d      	ldr	r3, [pc, #628]	; (8006e1c <aiSystemPerformanceProcess+0x5d0>)
 8006ba6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006baa:	9b04      	ldr	r3, [sp, #16]
 8006bac:	1a28      	subs	r0, r5, r0
 8006bae:	eb63 0101 	sbc.w	r1, r3, r1
  tcumul /= (uint64_t)iter;
 8006bb2:	4632      	mov	r2, r6
 8006bb4:	17f3      	asrs	r3, r6, #31
 8006bb6:	f7fa f905 	bl	8000dc4 <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 8006bba:	aa0a      	add	r2, sp, #40	; 0x28
  tcumul /= (uint64_t)iter;
 8006bbc:	468a      	mov	sl, r1
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	4681      	mov	r9, r0
  dwtCyclesToTime(tcumul, &t);
 8006bc2:	f000 fc51 	bl	8007468 <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %lu MACC)\r\n",
 8006bc6:	6861      	ldr	r1, [r4, #4]
 8006bc8:	9104      	str	r1, [sp, #16]
 8006bca:	f7fb ffcf 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8006bce:	4683      	mov	fp, r0
 8006bd0:	f7fc fb44 	bl	800325c <HAL_RCC_GetHCLKFreq>
 8006bd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006bd6:	4b92      	ldr	r3, [pc, #584]	; (8006e20 <aiSystemPerformanceProcess+0x5d4>)
 8006bd8:	9904      	ldr	r1, [sp, #16]
 8006bda:	fbb0 f0f3 	udiv	r0, r0, r3
 8006bde:	9201      	str	r2, [sp, #4]
 8006be0:	9000      	str	r0, [sp, #0]
 8006be2:	4632      	mov	r2, r6
 8006be4:	488f      	ldr	r0, [pc, #572]	; (8006e24 <aiSystemPerformanceProcess+0x5d8>)
 8006be6:	fbbb f3f3 	udiv	r3, fp, r3
 8006bea:	f000 fb95 	bl	8007318 <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 8006bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bf8:	fb00 3101 	mla	r1, r0, r1, r3
 8006bfc:	488a      	ldr	r0, [pc, #552]	; (8006e28 <aiSystemPerformanceProcess+0x5dc>)
 8006bfe:	f000 fb8b 	bl	8007318 <lc_print>
  if (tcumul / 100000)
 8006c02:	4b8a      	ldr	r3, [pc, #552]	; (8006e2c <aiSystemPerformanceProcess+0x5e0>)
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	eb73 030a 	sbcs.w	r3, r3, sl
 8006c0e:	f080 80ac 	bcs.w	8006d6a <aiSystemPerformanceProcess+0x51e>
    LC_PRINT(" CPU cycles   : %ld%ld (average)\r\n",
 8006c12:	4a87      	ldr	r2, [pc, #540]	; (8006e30 <aiSystemPerformanceProcess+0x5e4>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4628      	mov	r0, r5
 8006c18:	4651      	mov	r1, sl
 8006c1a:	f7fa f8d3 	bl	8000dc4 <__aeabi_uldivmod>
 8006c1e:	4a84      	ldr	r2, [pc, #528]	; (8006e30 <aiSystemPerformanceProcess+0x5e4>)
 8006c20:	4601      	mov	r1, r0
 8006c22:	fb02 5210 	mls	r2, r2, r0, r5
 8006c26:	4883      	ldr	r0, [pc, #524]	; (8006e34 <aiSystemPerformanceProcess+0x5e8>)
 8006c28:	f000 fb76 	bl	8007318 <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8006c2c:	2664      	movs	r6, #100	; 0x64
 8006c2e:	fba9 9506 	umull	r9, r5, r9, r6
 8006c32:	fb06 550a 	mla	r5, r6, sl, r5
 8006c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4648      	mov	r0, r9
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f7fa f8c1 	bl	8000dc4 <__aeabi_uldivmod>
 8006c42:	2225      	movs	r2, #37	; 0x25
 8006c44:	4601      	mov	r1, r0
 8006c46:	487c      	ldr	r0, [pc, #496]	; (8006e38 <aiSystemPerformanceProcess+0x5ec>)
 8006c48:	f000 fb66 	bl	8007318 <lc_print>
  cmacc = (uint32_t)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 8006c4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4648      	mov	r0, r9
 8006c52:	4629      	mov	r1, r5
 8006c54:	f7fa f8b6 	bl	8000dc4 <__aeabi_uldivmod>
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 8006c58:	fbb0 f1f6 	udiv	r1, r0, r6
 8006c5c:	fb06 0211 	mls	r2, r6, r1, r0
 8006c60:	4876      	ldr	r0, [pc, #472]	; (8006e3c <aiSystemPerformanceProcess+0x5f0>)
 8006c62:	f000 fb59 	bl	8007318 <lc_print>
  MON_STACK_REPORT();
 8006c66:	f898 3004 	ldrb.w	r3, [r8, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8082 	beq.w	8006d74 <aiSystemPerformanceProcess+0x528>
 8006c70:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006c74:	4872      	ldr	r0, [pc, #456]	; (8006e40 <aiSystemPerformanceProcess+0x5f4>)
 8006c76:	f000 fb4f 	bl	8007318 <lc_print>
  MON_ALLOC_REPORT();
 8006c7a:	4972      	ldr	r1, [pc, #456]	; (8006e44 <aiSystemPerformanceProcess+0x5f8>)
 8006c7c:	4872      	ldr	r0, [pc, #456]	; (8006e48 <aiSystemPerformanceProcess+0x5fc>)
 8006c7e:	680b      	ldr	r3, [r1, #0]
 8006c80:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006c84:	9303      	str	r3, [sp, #12]
 8006c86:	698b      	ldr	r3, [r1, #24]
 8006c88:	9302      	str	r3, [sp, #8]
 8006c8a:	694b      	ldr	r3, [r1, #20]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	688b      	ldr	r3, [r1, #8]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	690b      	ldr	r3, [r1, #16]
 8006c94:	684a      	ldr	r2, [r1, #4]
 8006c96:	68c9      	ldr	r1, [r1, #12]
 8006c98:	f000 fb3e 	bl	8007318 <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 8006c9c:	486b      	ldr	r0, [pc, #428]	; (8006e4c <aiSystemPerformanceProcess+0x600>)
 8006c9e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006ca0:	9906      	ldr	r1, [sp, #24]
 8006ca2:	f000 fb39 	bl	8007318 <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7ff fc1c 	bl	80064e4 <aiObserverDone>
      r = aiTestConsole();
 8006cac:	f7ff fbae 	bl	800640c <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 8006cb0:	2864      	cmp	r0, #100	; 0x64
 8006cb2:	f43f add7 	beq.w	8006864 <aiSystemPerformanceProcess+0x18>
      } else if (r == CONS_EVT_HELP) {
 8006cb6:	2803      	cmp	r0, #3
 8006cb8:	d124      	bne.n	8006d04 <aiSystemPerformanceProcess+0x4b8>
        LC_PRINT("\r\n");
 8006cba:	4857      	ldr	r0, [pc, #348]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
 8006cbc:	f000 fb2c 	bl	8007318 <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 8006cc0:	4863      	ldr	r0, [pc, #396]	; (8006e50 <aiSystemPerformanceProcess+0x604>)
 8006cc2:	f000 fb29 	bl	8007318 <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 8006cc6:	4863      	ldr	r0, [pc, #396]	; (8006e54 <aiSystemPerformanceProcess+0x608>)
 8006cc8:	f000 fb26 	bl	8007318 <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 8006ccc:	4862      	ldr	r0, [pc, #392]	; (8006e58 <aiSystemPerformanceProcess+0x60c>)
 8006cce:	f000 fb23 	bl	8007318 <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 8006cd2:	4862      	ldr	r0, [pc, #392]	; (8006e5c <aiSystemPerformanceProcess+0x610>)
 8006cd4:	f000 fb20 	bl	8007318 <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 8006cd8:	4861      	ldr	r0, [pc, #388]	; (8006e60 <aiSystemPerformanceProcess+0x614>)
 8006cda:	f000 fb1d 	bl	8007318 <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 8006cde:	4861      	ldr	r0, [pc, #388]	; (8006e64 <aiSystemPerformanceProcess+0x618>)
 8006ce0:	f000 fb1a 	bl	8007318 <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 8006ce4:	4860      	ldr	r0, [pc, #384]	; (8006e68 <aiSystemPerformanceProcess+0x61c>)
 8006ce6:	f000 fb17 	bl	8007318 <lc_print>
        LC_PRINT("\r\n");
 8006cea:	484b      	ldr	r0, [pc, #300]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
 8006cec:	f000 fb14 	bl	8007318 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8006cf0:	485e      	ldr	r0, [pc, #376]	; (8006e6c <aiSystemPerformanceProcess+0x620>)
 8006cf2:	f000 fb11 	bl	8007318 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8006cf6:	f7ff fb89 	bl	800640c <aiTestConsole>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d03e      	beq.n	8006d7c <aiSystemPerformanceProcess+0x530>
        if (r == CONS_EVT_UNDEFINED)
 8006cfe:	2864      	cmp	r0, #100	; 0x64
 8006d00:	f43f adb0 	beq.w	8006864 <aiSystemPerformanceProcess+0x18>
      if (r == CONS_EVT_PROF) {
 8006d04:	2805      	cmp	r0, #5
 8006d06:	d13e      	bne.n	8006d86 <aiSystemPerformanceProcess+0x53a>
        profiling_mode = true;
 8006d08:	4b59      	ldr	r3, [pc, #356]	; (8006e70 <aiSystemPerformanceProcess+0x624>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 8006d0e:	4a59      	ldr	r2, [pc, #356]	; (8006e74 <aiSystemPerformanceProcess+0x628>)
 8006d10:	6813      	ldr	r3, [r2, #0]
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	6013      	str	r3, [r2, #0]
  } while (r==0);
 8006d16:	e5a5      	b.n	8006864 <aiSystemPerformanceProcess+0x18>
    	ai_i8 *out_data = (ai_i8 *)ai_output[i].data;
 8006d18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006d1c:	9305      	str	r3, [sp, #20]
    	for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_output[i]); ++j) {
 8006d1e:	f04f 0a00 	mov.w	sl, #0
 8006d22:	2101      	movs	r1, #1
 8006d24:	4648      	mov	r0, r9
 8006d26:	f001 f93f 	bl	8007fa8 <ai_buffer_get_size>
 8006d2a:	4582      	cmp	sl, r0
 8006d2c:	d304      	bcc.n	8006d38 <aiSystemPerformanceProcess+0x4ec>
    for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8006d2e:	f10b 0b01 	add.w	fp, fp, #1
 8006d32:	f109 091c 	add.w	r9, r9, #28
 8006d36:	e681      	b.n	8006a3c <aiSystemPerformanceProcess+0x1f0>
    		LC_PRINT("AI output = %d \r\n", out_data[j]);
 8006d38:	9b05      	ldr	r3, [sp, #20]
 8006d3a:	484f      	ldr	r0, [pc, #316]	; (8006e78 <aiSystemPerformanceProcess+0x62c>)
 8006d3c:	f913 100a 	ldrsb.w	r1, [r3, sl]
 8006d40:	f000 faea 	bl	8007318 <lc_print>
    	for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_output[i]); ++j) {
 8006d44:	f10a 0a01 	add.w	sl, sl, #1
 8006d48:	e7eb      	b.n	8006d22 <aiSystemPerformanceProcess+0x4d6>
  MON_STACK_EVALUATE();
 8006d4a:	3204      	adds	r2, #4
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	f8c8 2008 	str.w	r2, [r8, #8]
 8006d52:	e718      	b.n	8006b86 <aiSystemPerformanceProcess+0x33a>
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	4848      	ldr	r0, [pc, #288]	; (8006e7c <aiSystemPerformanceProcess+0x630>)
 8006d5a:	f8c8 3008 	str.w	r3, [r8, #8]
 8006d5e:	f000 fadb 	bl	8007318 <lc_print>
 8006d62:	4847      	ldr	r0, [pc, #284]	; (8006e80 <aiSystemPerformanceProcess+0x634>)
 8006d64:	f000 fad8 	bl	8007318 <lc_print>
 8006d68:	e719      	b.n	8006b9e <aiSystemPerformanceProcess+0x352>
    LC_PRINT(" CPU cycles   : %ld (average)\r\n", (unsigned long)(tcumul));
 8006d6a:	4846      	ldr	r0, [pc, #280]	; (8006e84 <aiSystemPerformanceProcess+0x638>)
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	f000 fad3 	bl	8007318 <lc_print>
 8006d72:	e75b      	b.n	8006c2c <aiSystemPerformanceProcess+0x3e0>
  MON_STACK_REPORT();
 8006d74:	4844      	ldr	r0, [pc, #272]	; (8006e88 <aiSystemPerformanceProcess+0x63c>)
 8006d76:	f000 facf 	bl	8007318 <lc_print>
 8006d7a:	e77e      	b.n	8006c7a <aiSystemPerformanceProcess+0x42e>
          HAL_Delay(1000);
 8006d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d80:	f7fa ff22 	bl	8001bc8 <HAL_Delay>
 8006d84:	e7b7      	b.n	8006cf6 <aiSystemPerformanceProcess+0x4aa>
      if (r == CONS_EVT_HIDE) {
 8006d86:	2806      	cmp	r0, #6
 8006d88:	d103      	bne.n	8006d92 <aiSystemPerformanceProcess+0x546>
        observer_mode = false;
 8006d8a:	4b40      	ldr	r3, [pc, #256]	; (8006e8c <aiSystemPerformanceProcess+0x640>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
  } while (r==0);
 8006d90:	e568      	b.n	8006864 <aiSystemPerformanceProcess+0x18>
      if (r == CONS_EVT_RESTART) {
 8006d92:	2802      	cmp	r0, #2
 8006d94:	d110      	bne.n	8006db8 <aiSystemPerformanceProcess+0x56c>
        profiling_mode = false;
 8006d96:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <aiSystemPerformanceProcess+0x624>)
        LC_PRINT("\r\n");
 8006d98:	481f      	ldr	r0, [pc, #124]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
        profiling_mode = false;
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
        observer_mode = true;
 8006d9e:	4b3b      	ldr	r3, [pc, #236]	; (8006e8c <aiSystemPerformanceProcess+0x640>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 8006da4:	4b33      	ldr	r3, [pc, #204]	; (8006e74 <aiSystemPerformanceProcess+0x628>)
 8006da6:	2205      	movs	r2, #5
 8006da8:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 8006daa:	f000 fab5 	bl	8007318 <lc_print>
        aiDeInit();
 8006dae:	f7ff fb13 	bl	80063d8 <aiDeInit>
        aiSystemPerformanceInit();
 8006db2:	f7ff fc95 	bl	80066e0 <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 8006db6:	e555      	b.n	8006864 <aiSystemPerformanceProcess+0x18>
      if (r == CONS_EVT_QUIT) {
 8006db8:	2801      	cmp	r0, #1
 8006dba:	d115      	bne.n	8006de8 <aiSystemPerformanceProcess+0x59c>
        profiling_mode = false;
 8006dbc:	4b2c      	ldr	r3, [pc, #176]	; (8006e70 <aiSystemPerformanceProcess+0x624>)
        LC_PRINT("\r\n");
 8006dbe:	4816      	ldr	r0, [pc, #88]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
        profiling_mode = false;
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
        LC_PRINT("\r\n");
 8006dc4:	f000 faa8 	bl	8007318 <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006dcc:	b672      	cpsid	i
        aiDeInit();
 8006dce:	f7ff fb03 	bl	80063d8 <aiDeInit>
        LC_PRINT("\r\n");
 8006dd2:	4811      	ldr	r0, [pc, #68]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
 8006dd4:	f000 faa0 	bl	8007318 <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 8006dd8:	482d      	ldr	r0, [pc, #180]	; (8006e90 <aiSystemPerformanceProcess+0x644>)
 8006dda:	f000 fa9d 	bl	8007318 <lc_print>
          HAL_Delay(1000);
 8006dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006de2:	f7fa fef1 	bl	8001bc8 <HAL_Delay>
        while (1) {
 8006de6:	e7fa      	b.n	8006dde <aiSystemPerformanceProcess+0x592>
      if (r == CONS_EVT_PAUSE) {
 8006de8:	2804      	cmp	r0, #4
 8006dea:	d003      	beq.n	8006df4 <aiSystemPerformanceProcess+0x5a8>
  } while (r==0);
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f43f ad39 	beq.w	8006864 <aiSystemPerformanceProcess+0x18>
 8006df2:	e549      	b.n	8006888 <aiSystemPerformanceProcess+0x3c>
        LC_PRINT("\r\n");
 8006df4:	4808      	ldr	r0, [pc, #32]	; (8006e18 <aiSystemPerformanceProcess+0x5cc>)
 8006df6:	f000 fa8f 	bl	8007318 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8006dfa:	481c      	ldr	r0, [pc, #112]	; (8006e6c <aiSystemPerformanceProcess+0x620>)
 8006dfc:	f000 fa8c 	bl	8007318 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8006e00:	f7ff fb04 	bl	800640c <aiTestConsole>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f47f ad2d 	bne.w	8006864 <aiSystemPerformanceProcess+0x18>
          HAL_Delay(1000);
 8006e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e0e:	f7fa fedb 	bl	8001bc8 <HAL_Delay>
 8006e12:	e7f5      	b.n	8006e00 <aiSystemPerformanceProcess+0x5b4>
 8006e14:	0800ef81 	.word	0x0800ef81
 8006e18:	0800efa5 	.word	0x0800efa5
 8006e1c:	20001700 	.word	0x20001700
 8006e20:	000f4240 	.word	0x000f4240
 8006e24:	0800f025 	.word	0x0800f025
 8006e28:	0800f06b 	.word	0x0800f06b
 8006e2c:	0001869f 	.word	0x0001869f
 8006e30:	000186a0 	.word	0x000186a0
 8006e34:	0800f092 	.word	0x0800f092
 8006e38:	0800f0d5 	.word	0x0800f0d5
 8006e3c:	0800f0fe 	.word	0x0800f0fe
 8006e40:	0800f131 	.word	0x0800f131
 8006e44:	20001734 	.word	0x20001734
 8006e48:	0800f16e 	.word	0x0800f16e
 8006e4c:	0800f1c7 	.word	0x0800f1c7
 8006e50:	0800f202 	.word	0x0800f202
 8006e54:	0800f22e 	.word	0x0800f22e
 8006e58:	0800f252 	.word	0x0800f252
 8006e5c:	0800f283 	.word	0x0800f283
 8006e60:	0800f298 	.word	0x0800f298
 8006e64:	0800f2d2 	.word	0x0800f2d2
 8006e68:	0800f2f2 	.word	0x0800f2f2
 8006e6c:	0800f316 	.word	0x0800f316
 8006e70:	200016fc 	.word	0x200016fc
 8006e74:	20000030 	.word	0x20000030
 8006e78:	0800ef91 	.word	0x0800ef91
 8006e7c:	0800efa8 	.word	0x0800efa8
 8006e80:	0800efcc 	.word	0x0800efcc
 8006e84:	0800f0b5 	.word	0x0800f0b5
 8006e88:	0800f14d 	.word	0x0800f14d
 8006e8c:	2000002c 	.word	0x2000002c
 8006e90:	0800f334 	.word	0x0800f334
 8006e94:	20001750 	.word	0x20001750

08006e98 <HAL_UART_RxCpltCallback>:

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	flag = 1;
 8006e98:	4b04      	ldr	r3, [pc, #16]	; (8006eac <HAL_UART_RxCpltCallback+0x14>)
	HAL_UART_Receive_IT(&huart2, buffer, 784);
 8006e9a:	4905      	ldr	r1, [pc, #20]	; (8006eb0 <HAL_UART_RxCpltCallback+0x18>)
 8006e9c:	4805      	ldr	r0, [pc, #20]	; (8006eb4 <HAL_UART_RxCpltCallback+0x1c>)
	flag = 1;
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer, 784);
 8006ea2:	f44f 7244 	mov.w	r2, #784	; 0x310
 8006ea6:	f7fd be5f 	b.w	8004b68 <HAL_UART_Receive_IT>
 8006eaa:	bf00      	nop
 8006eac:	20001678 	.word	0x20001678
 8006eb0:	20001368 	.word	0x20001368
 8006eb4:	20000c00 	.word	0x20000c00

08006eb8 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 8006eb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8006eba:	f001 fa65 	bl	8008388 <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8006ebe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006ec2:	9302      	str	r3, [sp, #8]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006eca:	b2c0      	uxtb	r0, r0
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	9000      	str	r0, [sp, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <aiPlatformVersion+0x28>)
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	f000 fa1f 	bl	8007318 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 8006eda:	b007      	add	sp, #28
 8006edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ee0:	0800f35f 	.word	0x0800f35f

08006ee4 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8006ee4:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006ee6:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8006eea:	b2c4      	uxtb	r4, r0
  if (fct)
 8006eec:	b129      	cbz	r1, 8006efa <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006eee:	4622      	mov	r2, r4
 8006ef0:	4805      	ldr	r0, [pc, #20]	; (8006f08 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8006ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006ef6:	f000 ba0f 	b.w	8007318 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006efa:	4621      	mov	r1, r4
 8006efc:	4803      	ldr	r0, [pc, #12]	; (8006f0c <aiLogErr+0x28>)
}
 8006efe:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006f02:	461a      	mov	r2, r3
 8006f04:	f000 ba08 	b.w	8007318 <lc_print>
 8006f08:	0800f391 	.word	0x0800f391
 8006f0c:	0800f3be 	.word	0x0800f3be

08006f10 <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 8006f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8006f14:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 8006f16:	6807      	ldr	r7, [r0, #0]
{
 8006f18:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 8006f1a:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8006f1e:	486c      	ldr	r0, [pc, #432]	; (80070d0 <aiPrintBufferInfo+0x1c0>)
 8006f20:	6809      	ldr	r1, [r1, #0]
 8006f22:	f000 f9f9 	bl	8007318 <lc_print>
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8006f26:	696a      	ldr	r2, [r5, #20]
 8006f28:	69a8      	ldr	r0, [r5, #24]
 8006f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f2e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8006f32:	d12b      	bne.n	8006f8c <aiPrintBufferInfo+0x7c>
  {
    LC_PRINT("%d,%d)",
 8006f34:	6842      	ldr	r2, [r0, #4]
 8006f36:	6901      	ldr	r1, [r0, #16]
 8006f38:	4866      	ldr	r0, [pc, #408]	; (80070d4 <aiPrintBufferInfo+0x1c4>)
 8006f3a:	f000 f9ed 	bl	8007318 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4628      	mov	r0, r5
 8006f42:	f001 f831 	bl	8007fa8 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8006f46:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	4862      	ldr	r0, [pc, #392]	; (80070d8 <aiPrintBufferInfo+0x1c8>)
 8006f4e:	f000 f9e3 	bl	8007318 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8006f52:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8006f54:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8006f58:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8006f5c:	d125      	bne.n	8006faa <aiPrintBufferInfo+0x9a>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8006f5e:	485f      	ldr	r0, [pc, #380]	; (80070dc <aiPrintBufferInfo+0x1cc>)
 8006f60:	4621      	mov	r1, r4
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8006f62:	f000 f9d9 	bl	8007318 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8006f66:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4628      	mov	r0, r5
  if (buffer->data)
 8006f6c:	2c00      	cmp	r4, #0
 8006f6e:	f000 809e 	beq.w	80070ae <aiPrintBufferInfo+0x19e>
    LC_PRINT(" @0x%X/%d",
 8006f72:	f001 f819 	bl	8007fa8 <ai_buffer_get_size>
 8006f76:	4639      	mov	r1, r7
 8006f78:	f001 f84a 	bl	8008010 <ai_buffer_get_byte_size>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4858      	ldr	r0, [pc, #352]	; (80070e0 <aiPrintBufferInfo+0x1d0>)
 8006f80:	4621      	mov	r1, r4
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8006f82:	b003      	add	sp, #12
 8006f84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 8006f88:	f000 b9c6 	b.w	8007318 <lc_print>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8006f8c:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8006f90:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8006f92:	d105      	bne.n	8006fa0 <aiPrintBufferInfo+0x90>
    LC_PRINT("%d,%d,%d)",
 8006f94:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8006f98:	4852      	ldr	r0, [pc, #328]	; (80070e4 <aiPrintBufferInfo+0x1d4>)
 8006f9a:	f000 f9bd 	bl	8007318 <lc_print>
 8006f9e:	e7ce      	b.n	8006f3e <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8006fa0:	4851      	ldr	r0, [pc, #324]	; (80070e8 <aiPrintBufferInfo+0x1d8>)
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	f000 f9b8 	bl	8007318 <lc_print>
 8006fa8:	e7c9      	b.n	8006f3e <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8006faa:	2e03      	cmp	r6, #3
 8006fac:	d102      	bne.n	8006fb4 <aiPrintBufferInfo+0xa4>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8006fae:	484f      	ldr	r0, [pc, #316]	; (80070ec <aiPrintBufferInfo+0x1dc>)
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	e7d6      	b.n	8006f62 <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8006fb4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8007100 <aiPrintBufferInfo+0x1f0>
 8006fb8:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 8006fbc:	f108 0102 	add.w	r1, r8, #2
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	bf18      	it	ne
 8006fc4:	4641      	movne	r1, r8
 8006fc6:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 8006fca:	f000 f9a5 	bl	8007318 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8006fce:	2e02      	cmp	r6, #2
 8006fd0:	d1c9      	bne.n	8006f66 <aiPrintBufferInfo+0x56>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8006fd2:	68ab      	ldr	r3, [r5, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d059      	beq.n	800708c <aiPrintBufferInfo+0x17c>
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	07d2      	lsls	r2, r2, #31
 8006fdc:	d556      	bpl.n	800708c <aiPrintBufferInfo+0x17c>
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d053      	beq.n	800708c <aiPrintBufferInfo+0x17c>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8006fe4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 8006fe8:	f108 0040 	add.w	r0, r8, #64	; 0x40
      const int max_ = s_> 4?4:s_;
 8006fec:	f1b9 0f04 	cmp.w	r9, #4
      LC_PRINT(" %d:", s_);
 8006ff0:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 8006ff2:	46ca      	mov	sl, r9
 8006ff4:	bf28      	it	cs
 8006ff6:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 8006ffa:	f000 f98d 	bl	8007318 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8006ffe:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007000:	f04f 0b00 	mov.w	fp, #0
        LC_PRINT("(%f,%d),", scale, zero_point);
 8007004:	f108 0845 	add.w	r8, r8, #69	; 0x45
      for (int idx=0; idx<max_; idx++) {
 8007008:	4556      	cmp	r6, sl
 800700a:	db07      	blt.n	800701c <aiPrintBufferInfo+0x10c>
      LC_PRINT((s_ > max_)?"..":"");
 800700c:	4b38      	ldr	r3, [pc, #224]	; (80070f0 <aiPrintBufferInfo+0x1e0>)
 800700e:	1cd8      	adds	r0, r3, #3
 8007010:	45ca      	cmp	sl, r9
 8007012:	bf38      	it	cc
 8007014:	4618      	movcc	r0, r3
 8007016:	f000 f97f 	bl	8007318 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800701a:	e7a4      	b.n	8006f66 <aiPrintBufferInfo+0x56>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800701c:	68aa      	ldr	r2, [r5, #8]
 800701e:	2a00      	cmp	r2, #0
 8007020:	d02f      	beq.n	8007082 <aiPrintBufferInfo+0x172>
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	f013 0401 	ands.w	r4, r3, #1
 8007028:	d02e      	beq.n	8007088 <aiPrintBufferInfo+0x178>
 800702a:	6853      	ldr	r3, [r2, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d04a      	beq.n	80070c6 <aiPrintBufferInfo+0x1b6>
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	2a00      	cmp	r2, #0
 8007034:	d04a      	beq.n	80070cc <aiPrintBufferInfo+0x1bc>
 8007036:	8859      	ldrh	r1, [r3, #2]
 8007038:	42b1      	cmp	r1, r6
 800703a:	dd47      	ble.n	80070cc <aiPrintBufferInfo+0x1bc>
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8007042:	6810      	ldr	r0, [r2, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007044:	2b00      	cmp	r3, #0
 8007046:	d03f      	beq.n	80070c8 <aiPrintBufferInfo+0x1b8>
 8007048:	881a      	ldrh	r2, [r3, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800704a:	685c      	ldr	r4, [r3, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800704c:	f012 0202 	ands.w	r2, r2, #2
 8007050:	d00f      	beq.n	8007072 <aiPrintBufferInfo+0x162>
 8007052:	b124      	cbz	r4, 800705e <aiPrintBufferInfo+0x14e>
 8007054:	885b      	ldrh	r3, [r3, #2]
 8007056:	42b3      	cmp	r3, r6
 8007058:	dd36      	ble.n	80070c8 <aiPrintBufferInfo+0x1b8>
 800705a:	6863      	ldr	r3, [r4, #4]
 800705c:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", scale, zero_point);
 800705e:	f7f9 fa73 	bl	8000548 <__aeabi_f2d>
 8007062:	9400      	str	r4, [sp, #0]
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4640      	mov	r0, r8
 800706a:	f000 f955 	bl	8007318 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800706e:	3601      	adds	r6, #1
 8007070:	e7ca      	b.n	8007008 <aiPrintBufferInfo+0xf8>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007072:	2c00      	cmp	r4, #0
 8007074:	d0f3      	beq.n	800705e <aiPrintBufferInfo+0x14e>
 8007076:	885b      	ldrh	r3, [r3, #2]
 8007078:	42b3      	cmp	r3, r6
 800707a:	dd03      	ble.n	8007084 <aiPrintBufferInfo+0x174>
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	579c      	ldrsb	r4, [r3, r6]
 8007080:	e7ed      	b.n	800705e <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007082:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007084:	4614      	mov	r4, r2
 8007086:	e7ea      	b.n	800705e <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007088:	4658      	mov	r0, fp
 800708a:	e7e8      	b.n	800705e <aiPrintBufferInfo+0x14e>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 800708c:	f019 0f78 	tst.w	r9, #120	; 0x78
 8007090:	d102      	bne.n	8007098 <aiPrintBufferInfo+0x188>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8007092:	4818      	ldr	r0, [pc, #96]	; (80070f4 <aiPrintBufferInfo+0x1e4>)
 8007094:	4621      	mov	r1, r4
 8007096:	e764      	b.n	8006f62 <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 8007098:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 800709c:	3a40      	subs	r2, #64	; 0x40
 800709e:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 80070a2:	4411      	add	r1, r2
 80070a4:	4814      	ldr	r0, [pc, #80]	; (80070f8 <aiPrintBufferInfo+0x1e8>)
 80070a6:	1a61      	subs	r1, r4, r1
 80070a8:	f000 f936 	bl	8007318 <lc_print>
 80070ac:	e75b      	b.n	8006f66 <aiPrintBufferInfo+0x56>
    LC_PRINT(" (User Domain)/%d",
 80070ae:	f000 ff7b 	bl	8007fa8 <ai_buffer_get_size>
 80070b2:	4639      	mov	r1, r7
 80070b4:	f000 ffac 	bl	8008010 <ai_buffer_get_byte_size>
 80070b8:	4601      	mov	r1, r0
 80070ba:	4810      	ldr	r0, [pc, #64]	; (80070fc <aiPrintBufferInfo+0x1ec>)
}
 80070bc:	b003      	add	sp, #12
 80070be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 80070c2:	f000 b929 	b.w	8007318 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80070c6:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80070c8:	2400      	movs	r4, #0
 80070ca:	e7c8      	b.n	800705e <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80070cc:	4658      	mov	r0, fp
 80070ce:	e7b9      	b.n	8007044 <aiPrintBufferInfo+0x134>
 80070d0:	0800f3ee 	.word	0x0800f3ee
 80070d4:	0800f3f9 	.word	0x0800f3f9
 80070d8:	0800f40e 	.word	0x0800f40e
 80070dc:	0800f412 	.word	0x0800f412
 80070e0:	0800f447 	.word	0x0800f447
 80070e4:	0800f400 	.word	0x0800f400
 80070e8:	0800f40a 	.word	0x0800f40a
 80070ec:	0800f41a 	.word	0x0800f41a
 80070f0:	0800f3ea 	.word	0x0800f3ea
 80070f4:	0800f434 	.word	0x0800f434
 80070f8:	0800f43f 	.word	0x0800f43f
 80070fc:	0800f451 	.word	0x0800f451
 8007100:	0800f3e6 	.word	0x0800f3e6

08007104 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007108:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 800710a:	484e      	ldr	r0, [pc, #312]	; (8007244 <aiPrintNetworkInfo+0x140>)
 800710c:	f000 f904 	bl	8007318 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8007110:	6821      	ldr	r1, [r4, #0]
 8007112:	484d      	ldr	r0, [pc, #308]	; (8007248 <aiPrintNetworkInfo+0x144>)
 8007114:	f000 f900 	bl	8007318 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8007118:	6861      	ldr	r1, [r4, #4]
 800711a:	484c      	ldr	r0, [pc, #304]	; (800724c <aiPrintNetworkInfo+0x148>)
 800711c:	f000 f8fc 	bl	8007318 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8007120:	68a1      	ldr	r1, [r4, #8]
 8007122:	484b      	ldr	r0, [pc, #300]	; (8007250 <aiPrintNetworkInfo+0x14c>)
 8007124:	f000 f8f8 	bl	8007318 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8007128:	68e1      	ldr	r1, [r4, #12]
 800712a:	484a      	ldr	r0, [pc, #296]	; (8007254 <aiPrintNetworkInfo+0x150>)
 800712c:	f000 f8f4 	bl	8007318 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8007130:	7da3      	ldrb	r3, [r4, #22]
 8007132:	7d21      	ldrb	r1, [r4, #20]
 8007134:	7d62      	ldrb	r2, [r4, #21]
 8007136:	4848      	ldr	r0, [pc, #288]	; (8007258 <aiPrintNetworkInfo+0x154>)
 8007138:	f000 f8ee 	bl	8007318 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 800713c:	69a1      	ldr	r1, [r4, #24]
 800713e:	780b      	ldrb	r3, [r1, #0]
 8007140:	b113      	cbz	r3, 8007148 <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8007142:	4846      	ldr	r0, [pc, #280]	; (800725c <aiPrintNetworkInfo+0x158>)
 8007144:	f000 f8e8 	bl	8007318 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8007148:	7fa3      	ldrb	r3, [r4, #30]
 800714a:	7f62      	ldrb	r2, [r4, #29]
 800714c:	7f21      	ldrb	r1, [r4, #28]
 800714e:	4844      	ldr	r0, [pc, #272]	; (8007260 <aiPrintNetworkInfo+0x15c>)
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8007150:	4f44      	ldr	r7, [pc, #272]	; (8007264 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8007152:	f000 f8e1 	bl	8007318 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8007156:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007158:	4843      	ldr	r0, [pc, #268]	; (8007268 <aiPrintNetworkInfo+0x164>)
 800715a:	f000 f8dd 	bl	8007318 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 800715e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007160:	4842      	ldr	r0, [pc, #264]	; (800726c <aiPrintNetworkInfo+0x168>)
 8007162:	f000 f8d9 	bl	8007318 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8007166:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800716a:	4841      	ldr	r0, [pc, #260]	; (8007270 <aiPrintNetworkInfo+0x16c>)
 800716c:	f000 f8d4 	bl	8007318 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8007170:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8007172:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8007176:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800717a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800717e:	42ab      	cmp	r3, r5
 8007180:	dc25      	bgt.n	80071ce <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8007182:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8007186:	483b      	ldr	r0, [pc, #236]	; (8007274 <aiPrintNetworkInfo+0x170>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8007188:	4f36      	ldr	r7, [pc, #216]	; (8007264 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 800718a:	f000 f8c5 	bl	8007318 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800718e:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8007190:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8007194:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8007198:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800719c:	42ab      	cmp	r3, r5
 800719e:	dc25      	bgt.n	80071ec <aiPrintNetworkInfo+0xe8>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80071a0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80071a2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80071a4:	4834      	ldr	r0, [pc, #208]	; (8007278 <aiPrintNetworkInfo+0x174>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 80071a6:	4e35      	ldr	r6, [pc, #212]	; (800727c <aiPrintNetworkInfo+0x178>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80071a8:	f000 f8b6 	bl	8007318 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80071ac:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80071ae:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80071b0:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  for (int i=0; i<report->n_inputs; i++) {
 80071b4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80071b6:	42ab      	cmp	r3, r5
 80071b8:	dc27      	bgt.n	800720a <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 80071ba:	4e31      	ldr	r6, [pc, #196]	; (8007280 <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 80071bc:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80071be:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80071c0:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80071c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80071c6:	42ab      	cmp	r3, r5
 80071c8:	dc2d      	bgt.n	8007226 <aiPrintNetworkInfo+0x122>
  }
}
 80071ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80071ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 80071d0:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80071d2:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80071d6:	4638      	mov	r0, r7
 80071d8:	f000 f89e 	bl	8007318 <lc_print>
      aiPrintBufferInfo(buffer);
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff fe97 	bl	8006f10 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80071e2:	4648      	mov	r0, r9
 80071e4:	f000 f898 	bl	8007318 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80071e8:	3501      	adds	r5, #1
 80071ea:	e7c6      	b.n	800717a <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80071ec:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 80071ee:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80071f0:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80071f4:	4638      	mov	r0, r7
 80071f6:	f000 f88f 	bl	8007318 <lc_print>
      aiPrintBufferInfo(buffer);
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff fe88 	bl	8006f10 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8007200:	4648      	mov	r0, r9
 8007202:	f000 f889 	bl	8007318 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8007206:	3501      	adds	r5, #1
 8007208:	e7c6      	b.n	8007198 <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 800720a:	4629      	mov	r1, r5
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f883 	bl	8007318 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8007212:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007214:	fb07 0005 	mla	r0, r7, r5, r0
 8007218:	f7ff fe7a 	bl	8006f10 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800721c:	4640      	mov	r0, r8
 800721e:	f000 f87b 	bl	8007318 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8007222:	3501      	adds	r5, #1
 8007224:	e7c6      	b.n	80071b4 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 8007226:	4629      	mov	r1, r5
 8007228:	4630      	mov	r0, r6
 800722a:	f000 f875 	bl	8007318 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 800722e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007230:	fb07 0005 	mla	r0, r7, r5, r0
 8007234:	f7ff fe6c 	bl	8006f10 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8007238:	4640      	mov	r0, r8
 800723a:	f000 f86d 	bl	8007318 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 800723e:	3501      	adds	r5, #1
 8007240:	e7c0      	b.n	80071c4 <aiPrintNetworkInfo+0xc0>
 8007242:	bf00      	nop
 8007244:	0800f463 	.word	0x0800f463
 8007248:	0800f47d 	.word	0x0800f47d
 800724c:	0800f498 	.word	0x0800f498
 8007250:	0800f4b3 	.word	0x0800f4b3
 8007254:	0800f4ce 	.word	0x0800f4ce
 8007258:	0800f4e9 	.word	0x0800f4e9
 800725c:	0800f50a 	.word	0x0800f50a
 8007260:	0800f525 	.word	0x0800f525
 8007264:	0800f59d 	.word	0x0800f59d
 8007268:	0800f546 	.word	0x0800f546
 800726c:	0800f567 	.word	0x0800f567
 8007270:	0800f582 	.word	0x0800f582
 8007274:	0800f5a8 	.word	0x0800f5a8
 8007278:	0800f5c3 	.word	0x0800f5c3
 800727c:	0800f5e1 	.word	0x0800f5e1
 8007280:	0800f5ea 	.word	0x0800f5ea

08007284 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL)

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8007284:	b507      	push	{r0, r1, r2, lr}
  if (_ioWriteAllowed)
 8007286:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <_put_c_driver+0x24>)
{
 8007288:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b13b      	cbz	r3, 80072a0 <_put_c_driver+0x1c>
    HAL_UART_Transmit(&UartHandle, (uint8_t *)&c, 1, HAL_MAX_DELAY);
 8007290:	4806      	ldr	r0, [pc, #24]	; (80072ac <_put_c_driver+0x28>)
 8007292:	f04f 33ff 	mov.w	r3, #4294967295
 8007296:	2201      	movs	r2, #1
 8007298:	f10d 0107 	add.w	r1, sp, #7
 800729c:	f7fd fad2 	bl	8004844 <HAL_UART_Transmit>
}
 80072a0:	b003      	add	sp, #12
 80072a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80072a6:	bf00      	nop
 80072a8:	20000034 	.word	0x20000034
 80072ac:	20000c00 	.word	0x20000c00

080072b0 <ioRawGetUint8>:
{
 80072b0:	b508      	push	{r3, lr}
 80072b2:	460b      	mov	r3, r1
  if (!c)
 80072b4:	4601      	mov	r1, r0
 80072b6:	b910      	cbnz	r0, 80072be <ioRawGetUint8+0xe>
    return -1;
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80072bc:	bd08      	pop	{r3, pc}
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1,
 80072be:	4805      	ldr	r0, [pc, #20]	; (80072d4 <ioRawGetUint8+0x24>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	f7fd fb19 	bl	80048f8 <HAL_UART_Receive>
  if (status == HAL_TIMEOUT)
 80072c6:	2803      	cmp	r0, #3
 80072c8:	d0f6      	beq.n	80072b8 <ioRawGetUint8+0x8>
  return (status == HAL_OK ? 1 : 0);
 80072ca:	fab0 f080 	clz	r0, r0
 80072ce:	0940      	lsrs	r0, r0, #5
 80072d0:	e7f4      	b.n	80072bc <ioRawGetUint8+0xc>
 80072d2:	bf00      	nop
 80072d4:	20000c00 	.word	0x20000c00

080072d8 <_write>:
{
 80072d8:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80072da:	1e14      	subs	r4, r2, #0
 80072dc:	da0a      	bge.n	80072f4 <_write+0x1c>
 80072de:	3801      	subs	r0, #1
 80072e0:	2801      	cmp	r0, #1
 80072e2:	d907      	bls.n	80072f4 <_write+0x1c>
    errno = EBADF;
 80072e4:	f004 f972 	bl	800b5cc <__errno>
 80072e8:	2309      	movs	r3, #9
 80072ea:	6003      	str	r3, [r0, #0]
    return -1;
 80072ec:	f04f 34ff 	mov.w	r4, #4294967295
}
 80072f0:	4620      	mov	r0, r4
 80072f2:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80072f4:	4b06      	ldr	r3, [pc, #24]	; (8007310 <_write+0x38>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0f9      	beq.n	80072f0 <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 80072fc:	b2a2      	uxth	r2, r4
 80072fe:	4805      	ldr	r0, [pc, #20]	; (8007314 <_write+0x3c>)
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	f7fd fa9e 	bl	8004844 <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8007308:	2800      	cmp	r0, #0
 800730a:	bf18      	it	ne
 800730c:	2400      	movne	r4, #0
 800730e:	e7ef      	b.n	80072f0 <_write+0x18>
 8007310:	20000034 	.word	0x20000034
 8007314:	20000c00 	.word	0x20000c00

08007318 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8007318:	b40f      	push	{r0, r1, r2, r3}
 800731a:	b507      	push	{r0, r1, r2, lr}
 800731c:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800731e:	2100      	movs	r1, #0
{
 8007320:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8007324:	4804      	ldr	r0, [pc, #16]	; (8007338 <lc_print+0x20>)
  va_start(ap, fmt);
 8007326:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8007328:	f000 fb0c 	bl	8007944 <vlc_print>
  va_end(ap);
}
 800732c:	b003      	add	sp, #12
 800732e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007332:	b004      	add	sp, #16
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	08007285 	.word	0x08007285

0800733c <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 800733c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800733e:	4d11      	ldr	r5, [pc, #68]	; (8007384 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8007340:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8007342:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8007344:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8007348:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800734c:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8007350:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8007352:	f004 fb33 	bl	800b9bc <malloc>

  /* remember size */
  if (ptr) {
 8007356:	b1a0      	cbz	r0, 8007382 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8007358:	1903      	adds	r3, r0, r4
 800735a:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 800735c:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800735e:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d50c      	bpl.n	8007380 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8007366:	68eb      	ldr	r3, [r5, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 800736c:	686b      	ldr	r3, [r5, #4]
 800736e:	4423      	add	r3, r4
 8007370:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8007372:	69ab      	ldr	r3, [r5, #24]
 8007374:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8007376:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8007378:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 800737a:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 800737c:	bf88      	it	hi
 800737e:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8007380:	3004      	adds	r0, #4
}
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	20001734 	.word	0x20001734
 8007388:	efdcba98 	.word	0xefdcba98

0800738c <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <__wrap_free+0x48>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	f042 0204 	orr.w	r2, r2, #4
{
 8007394:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8007396:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8007398:	4602      	mov	r2, r0
 800739a:	b1c0      	cbz	r0, 80073ce <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 800739c:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 80073a0:	4c0d      	ldr	r4, [pc, #52]	; (80073d8 <__wrap_free+0x4c>)
 80073a2:	5855      	ldr	r5, [r2, r1]
 80073a4:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 80073a6:	bf04      	itt	eq
 80073a8:	2400      	moveq	r4, #0
 80073aa:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 80073b0:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 80073b4:	d508      	bpl.n	80073c8 <__wrap_free+0x3c>
    io_malloc.free_req++;
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	3201      	adds	r2, #1
 80073ba:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	440a      	add	r2, r1
 80073c0:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 80073c2:	699a      	ldr	r2, [r3, #24]
 80073c4:	1a52      	subs	r2, r2, r1
 80073c6:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 80073c8:	bc30      	pop	{r4, r5}
  __real_free(p);
 80073ca:	f004 baff 	b.w	800b9cc <free>
}
 80073ce:	bc30      	pop	{r4, r5}
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20001734 	.word	0x20001734
 80073d8:	efdcba98 	.word	0xefdcba98

080073dc <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 80073dc:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 80073de:	4c12      	ldr	r4, [pc, #72]	; (8007428 <stackMonInit+0x4c>)
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  io_stack.estack = (uint32_t)_estack;
 80073e0:	4b12      	ldr	r3, [pc, #72]	; (800742c <stackMonInit+0x50>)
 80073e2:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 80073e4:	1a9b      	subs	r3, r3, r2
  memset(&io_stack, 0, sizeof(struct io_stack));
 80073e6:	2500      	movs	r5, #0
  io_stack.bstack = io_stack.estack - msize;
 80073e8:	61e3      	str	r3, [r4, #28]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 80073ea:	0783      	lsls	r3, r0, #30
  memset(&io_stack, 0, sizeof(struct io_stack));
 80073ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073f0:	60e5      	str	r5, [r4, #12]
  io_stack.ctrl = ctrl;
 80073f2:	6020      	str	r0, [r4, #0]
  io_stack.cstack = cstack;
 80073f4:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 80073f6:	6162      	str	r2, [r4, #20]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 80073f8:	d512      	bpl.n	8007420 <stackMonInit+0x44>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 80073fa:	480d      	ldr	r0, [pc, #52]	; (8007430 <stackMonInit+0x54>)
 80073fc:	f7ff ff8c 	bl	8007318 <lc_print>
    io_stack.stack_mon = false;
 8007400:	7125      	strb	r5, [r4, #4]
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8007402:	69a3      	ldr	r3, [r4, #24]
 8007404:	6921      	ldr	r1, [r4, #16]
 8007406:	1ac9      	subs	r1, r1, r3

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8007408:	7923      	ldrb	r3, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 800740a:	60e1      	str	r1, [r4, #12]
  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 800740c:	b13b      	cbz	r3, 800741e <stackMonInit+0x42>
 800740e:	6962      	ldr	r2, [r4, #20]
 8007410:	4291      	cmp	r1, r2
 8007412:	d904      	bls.n	800741e <stackMonInit+0x42>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8007414:	4807      	ldr	r0, [pc, #28]	; (8007434 <stackMonInit+0x58>)
 8007416:	f7ff ff7f 	bl	8007318 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 800741a:	2300      	movs	r3, #0
 800741c:	7123      	strb	r3, [r4, #4]
  }
}
 800741e:	bd38      	pop	{r3, r4, r5, pc}
    io_stack.stack_mon = true;
 8007420:	2301      	movs	r3, #1
 8007422:	7123      	strb	r3, [r4, #4]
 8007424:	e7ed      	b.n	8007402 <stackMonInit+0x26>
 8007426:	bf00      	nop
 8007428:	20001750 	.word	0x20001750
 800742c:	20018000 	.word	0x20018000
 8007430:	0800f5f3 	.word	0x0800f5f3
 8007434:	0800f633 	.word	0x0800f633

08007438 <crcIpInit>:
 */

struct cyclesCount cyclesCount;

void crcIpInit(void)
{
 8007438:	b513      	push	{r0, r1, r4, lr}
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 800743a:	4c09      	ldr	r4, [pc, #36]	; (8007460 <crcIpInit+0x28>)
 800743c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800743e:	04db      	lsls	r3, r3, #19
 8007440:	d402      	bmi.n	8007448 <crcIpInit+0x10>
    LC_PRINT("W: CRC IP clock is NOT enabled\r\n");
 8007442:	4808      	ldr	r0, [pc, #32]	; (8007464 <crcIpInit+0x2c>)
 8007444:	f7ff ff68 	bl	8007318 <lc_print>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8007448:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800744a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800744e:	64a3      	str	r3, [r4, #72]	; 0x48
 8007450:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	9b01      	ldr	r3, [sp, #4]
#endif
}
 800745a:	b002      	add	sp, #8
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	40021000 	.word	0x40021000
 8007464:	0800f659 	.word	0x0800f659

08007468 <dwtCyclesToTime>:
  return HAL_RCC_GetSysClockFreq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8007468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	4604      	mov	r4, r0
 800746e:	468a      	mov	sl, r1
  if (!t)
 8007470:	4617      	mov	r7, r2
 8007472:	b382      	cbz	r2, 80074d6 <dwtCyclesToTime+0x6e>
  return HAL_RCC_GetHCLKFreq();
 8007474:	f7fb fef2 	bl	800325c <HAL_RCC_GetHCLKFreq>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
 8007478:	2300      	movs	r3, #0
  return HAL_RCC_GetHCLKFreq();
 800747a:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 800747c:	9001      	str	r0, [sp, #4]
 800747e:	4651      	mov	r1, sl
 8007480:	4620      	mov	r0, r4
 8007482:	f7f9 fc9f 	bl	8000dc4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8007486:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 800748a:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 800748c:	fba4 0106 	umull	r0, r1, r4, r6
 8007490:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8007492:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80074dc <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 8007496:	2300      	movs	r3, #0
 8007498:	fb06 110a 	mla	r1, r6, sl, r1
 800749c:	f7f9 fc92 	bl	8000dc4 <__aeabi_uldivmod>
  ms -= (s * 1000);
 80074a0:	fbab 3106 	umull	r3, r1, fp, r6
 80074a4:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80074a6:	fba4 0109 	umull	r0, r1, r4, r9
 80074aa:	9a01      	ldr	r2, [sp, #4]
 80074ac:	fb09 110a 	mla	r1, r9, sl, r1
 80074b0:	2300      	movs	r3, #0
 80074b2:	f7f9 fc87 	bl	8000dc4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 80074b6:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 80074b8:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 80074ba:	fbab 8909 	umull	r8, r9, fp, r9
 80074be:	eba0 0008 	sub.w	r0, r0, r8
 80074c2:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 80074c6:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 80074ca:	1b40      	subs	r0, r0, r5
  t->us = us;
 80074cc:	60f8      	str	r0, [r7, #12]
  return 0;
 80074ce:	2000      	movs	r0, #0
}
 80074d0:	b003      	add	sp, #12
 80074d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	e7f9      	b.n	80074d0 <dwtCyclesToTime+0x68>
 80074dc:	000f4240 	.word	0x000f4240

080074e0 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 80074e0:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <getFlashCacheConf+0x38>)
{
 80074e2:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80074e8:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80074ea:	9b01      	ldr	r3, [sp, #4]
 80074ec:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 80074ee:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80074f0:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 80074f4:	bf4c      	ite	mi
 80074f6:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80074fa:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 80074fe:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8007500:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 8007502:	bf48      	it	mi
 8007504:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8007508:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 800750a:	bf48      	it	mi
 800750c:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf |= MCONF_FPU;  /* FPU present and used */
#endif

  return mconf;
}
 8007510:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007514:	b002      	add	sp, #8
 8007516:	4770      	bx	lr
 8007518:	40022000 	.word	0x40022000

0800751c <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 800751c:	b510      	push	{r4, lr}
 800751e:	4604      	mov	r4, r0
  return HAL_RCC_GetHCLKFreq();
 8007520:	f7fb fe9c 	bl	800325c <HAL_RCC_GetHCLKFreq>
  conf->sclk = systemCoreClock();
 8007524:	6020      	str	r0, [r4, #0]
  conf->hclk = HAL_RCC_GetHCLKFreq();
 8007526:	f7fb fe99 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800752a:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 800752c:	f7ff ffd8 	bl	80074e0 <getFlashCacheConf>
 8007530:	60a0      	str	r0, [r4, #8]
  conf->devid = HAL_GetDEVID();
 8007532:	f7fa fb67 	bl	8001c04 <HAL_GetDEVID>
 8007536:	60e0      	str	r0, [r4, #12]
  conf->revid = HAL_GetREVID();
 8007538:	f7fa fb5e 	bl	8001bf8 <HAL_GetREVID>
 800753c:	6120      	str	r0, [r4, #16]
}
 800753e:	bd10      	pop	{r4, pc}

08007540 <systemSettingLog>:

void systemSettingLog(void)
{
 8007540:	b530      	push	{r4, r5, lr}
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8007542:	2301      	movs	r3, #1
{
 8007544:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8007546:	2203      	movs	r2, #3
 8007548:	210a      	movs	r1, #10
 800754a:	4834      	ldr	r0, [pc, #208]	; (800761c <systemSettingLog+0xdc>)
 800754c:	f7ff fee4 	bl	8007318 <lc_print>
  if (!conf)
 8007550:	a803      	add	r0, sp, #12
 8007552:	f7ff ffe3 	bl	800751c <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT("STM32 Runtime configuration...\r\n");
 8007556:	4832      	ldr	r0, [pc, #200]	; (8007620 <systemSettingLog+0xe0>)
 8007558:	f7ff fede 	bl	8007318 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800755c:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 800755e:	f240 4262 	movw	r2, #1122	; 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8007562:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8007564:	4293      	cmp	r3, r2
 8007566:	d054      	beq.n	8007612 <systemSettingLog+0xd2>
 8007568:	d84b      	bhi.n	8007602 <systemSettingLog+0xc2>
 800756a:	f240 4215 	movw	r2, #1045	; 0x415
 800756e:	4293      	cmp	r3, r2
 8007570:	d051      	beq.n	8007616 <systemSettingLog+0xd6>
  case 0x435: str = "STM32L43xxx"; break;
 8007572:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <systemSettingLog+0xe4>)
 8007574:	f240 4435 	movw	r4, #1077	; 0x435
 8007578:	f102 0014 	add.w	r0, r2, #20
 800757c:	42a3      	cmp	r3, r4
 800757e:	bf08      	it	eq
 8007580:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8007582:	9b07      	ldr	r3, [sp, #28]
 8007584:	4828      	ldr	r0, [pc, #160]	; (8007628 <systemSettingLog+0xe8>)
      "no FPU", ""
#endif
  );

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8007586:	4c29      	ldr	r4, [pc, #164]	; (800762c <systemSettingLog+0xec>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8007588:	f7ff fec6 	bl	8007318 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 800758c:	4b28      	ldr	r3, [pc, #160]	; (8007630 <systemSettingLog+0xf0>)
 800758e:	2104      	movs	r1, #4
 8007590:	1d5a      	adds	r2, r3, #5
 8007592:	f103 000a 	add.w	r0, r3, #10
 8007596:	f7ff febf 	bl	8007318 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 800759a:	f7fa fb29 	bl	8001bf0 <HAL_GetHalVersion>
 800759e:	4601      	mov	r1, r0
 80075a0:	4824      	ldr	r0, [pc, #144]	; (8007634 <systemSettingLog+0xf4>)
 80075a2:	f7ff feb9 	bl	8007318 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80075a6:	9903      	ldr	r1, [sp, #12]
 80075a8:	4823      	ldr	r0, [pc, #140]	; (8007638 <systemSettingLog+0xf8>)
 80075aa:	fb91 f1f4 	sdiv	r1, r1, r4
 80075ae:	f7ff feb3 	bl	8007318 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 80075b2:	9904      	ldr	r1, [sp, #16]
 80075b4:	4821      	ldr	r0, [pc, #132]	; (800763c <systemSettingLog+0xfc>)
 80075b6:	fb91 f1f4 	sdiv	r1, r1, r4
 80075ba:	f7ff fead 	bl	8007318 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  __I uint32_t acr = FLASH->ACR;
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <systemSettingLog+0x100>)
    return "False";
 80075c0:	4820      	ldr	r0, [pc, #128]	; (8007644 <systemSettingLog+0x104>)
  __I uint32_t acr = FLASH->ACR;
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	9302      	str	r3, [sp, #8]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80075c6:	9902      	ldr	r1, [sp, #8]
 80075c8:	9b02      	ldr	r3, [sp, #8]
    return "False";
 80075ca:	f413 7f80 	tst.w	r3, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80075ce:	9b02      	ldr	r3, [sp, #8]
 80075d0:	9d02      	ldr	r5, [sp, #8]
    return "False";
 80075d2:	f100 0405 	add.w	r4, r0, #5
 80075d6:	bf14      	ite	ne
 80075d8:	4602      	movne	r2, r0
 80075da:	4622      	moveq	r2, r4
 80075dc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80075e0:	bf14      	ite	ne
 80075e2:	4603      	movne	r3, r0
 80075e4:	4623      	moveq	r3, r4
 80075e6:	f415 6f80 	tst.w	r5, #1024	; 0x400
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80075ea:	9d02      	ldr	r5, [sp, #8]
    return "False";
 80075ec:	bf18      	it	ne
 80075ee:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80075f0:	f005 0507 	and.w	r5, r5, #7
 80075f4:	e9cd 4500 	strd	r4, r5, [sp]
 80075f8:	30ed      	adds	r0, #237	; 0xed
 80075fa:	f7ff fe8d 	bl	8007318 <lc_print>

#if defined(STM32L5) || defined(STM32U5)
  LC_PRINT(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif

}
 80075fe:	b009      	add	sp, #36	; 0x24
 8007600:	bd30      	pop	{r4, r5, pc}
  case 0x470: str = "STM32L4Rxxx"; break;
 8007602:	4a08      	ldr	r2, [pc, #32]	; (8007624 <systemSettingLog+0xe4>)
 8007604:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8007608:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 800760c:	bf08      	it	eq
 800760e:	4602      	moveq	r2, r0
 8007610:	e7b7      	b.n	8007582 <systemSettingLog+0x42>
  switch (dev_id) {
 8007612:	4a0d      	ldr	r2, [pc, #52]	; (8007648 <systemSettingLog+0x108>)
 8007614:	e7b5      	b.n	8007582 <systemSettingLog+0x42>
  case 0x415: str = "STM32L4x6xx"; break;
 8007616:	4a0d      	ldr	r2, [pc, #52]	; (800764c <systemSettingLog+0x10c>)
 8007618:	e7b3      	b.n	8007582 <systemSettingLog+0x42>
 800761a:	bf00      	nop
 800761c:	0800f6bd 	.word	0x0800f6bd
 8007620:	0800f6da 	.word	0x0800f6da
 8007624:	0800f67a 	.word	0x0800f67a
 8007628:	0800f6fb 	.word	0x0800f6fb
 800762c:	000f4240 	.word	0x000f4240
 8007630:	0800f72c 	.word	0x0800f72c
 8007634:	0800f754 	.word	0x0800f754
 8007638:	0800f76d 	.word	0x0800f76d
 800763c:	0800f786 	.word	0x0800f786
 8007640:	40022000 	.word	0x40022000
 8007644:	0800f6b2 	.word	0x0800f6b2
 8007648:	0800f682 	.word	0x0800f682
 800764c:	0800f69a 	.word	0x0800f69a

08007650 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <ai_mnetwork_handle+0x18>)
 8007652:	b120      	cbz	r0, 800765e <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8007654:	4298      	cmp	r0, r3
 8007656:	bf0c      	ite	eq
 8007658:	4618      	moveq	r0, r3
 800765a:	2000      	movne	r0, #0
 800765c:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800765e:	681a      	ldr	r2, [r3, #0]
            return inst;
 8007660:	2a00      	cmp	r2, #0
 8007662:	bf08      	it	eq
 8007664:	4618      	moveq	r0, r3
}
 8007666:	4770      	bx	lr
 8007668:	20001778 	.word	0x20001778

0800766c <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 800766c:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800766e:	4604      	mov	r4, r0
 8007670:	b160      	cbz	r0, 800768c <ai_mnetwork_is_valid.constprop.0+0x20>
 8007672:	f7f8 fdad 	bl	80001d0 <strlen>
 8007676:	2803      	cmp	r0, #3
 8007678:	4602      	mov	r2, r0
 800767a:	d107      	bne.n	800768c <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800767c:	4804      	ldr	r0, [pc, #16]	; (8007690 <ai_mnetwork_is_valid.constprop.0+0x24>)
 800767e:	4621      	mov	r1, r4
 8007680:	f004 ff8d 	bl	800c59e <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8007684:	fab0 f080 	clz	r0, r0
 8007688:	0940      	lsrs	r0, r0, #5
}
 800768a:	bd10      	pop	{r4, pc}
    return false;
 800768c:	2000      	movs	r0, #0
 800768e:	e7fc      	b.n	800768a <ai_mnetwork_is_valid.constprop.0+0x1e>
 8007690:	0800f864 	.word	0x0800f864

08007694 <MX_X_CUBE_AI_Init>:
{
 8007694:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8007696:	f7fa f9b7 	bl	8001a08 <MX_USART2_UART_Init>
}
 800769a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 800769e:	f7ff b81f 	b.w	80066e0 <aiSystemPerformanceInit>

080076a2 <MX_X_CUBE_AI_Process>:
{
 80076a2:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 80076a4:	f7ff f8d2 	bl	800684c <aiSystemPerformanceProcess>
}
 80076a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 80076ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076b0:	f7fa ba8a 	b.w	8001bc8 <HAL_Delay>

080076b4 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80076b4:	b510      	push	{r4, lr}
 80076b6:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80076b8:	f7ff ffd8 	bl	800766c <ai_mnetwork_is_valid.constprop.0>
 80076bc:	b920      	cbnz	r0, 80076c8 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 80076be:	2c00      	cmp	r4, #0
 80076c0:	4802      	ldr	r0, [pc, #8]	; (80076cc <ai_mnetwork_find+0x18>)
 80076c2:	bf18      	it	ne
 80076c4:	2000      	movne	r0, #0
}
 80076c6:	bd10      	pop	{r4, pc}
            return entry->name;
 80076c8:	4800      	ldr	r0, [pc, #0]	; (80076cc <ai_mnetwork_find+0x18>)
 80076ca:	e7fc      	b.n	80076c6 <ai_mnetwork_find+0x12>
 80076cc:	0800f864 	.word	0x0800f864

080076d0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80076d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076d2:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80076d4:	2000      	movs	r0, #0
{
 80076d6:	460d      	mov	r5, r1
 80076d8:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80076da:	f7ff ffb9 	bl	8007650 <ai_mnetwork_handle>

    if (!inst) {
 80076de:	4604      	mov	r4, r0
 80076e0:	b930      	cbnz	r0, 80076f0 <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 80076e2:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 80076e6:	b002      	add	sp, #8
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 80076ea:	f241 0014 	movw	r0, #4116	; 0x1014
 80076ee:	e7fa      	b.n	80076e6 <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 80076f0:	4630      	mov	r0, r6
 80076f2:	9101      	str	r1, [sp, #4]
 80076f4:	f7ff ffba 	bl	800766c <ai_mnetwork_is_valid.constprop.0>
 80076f8:	9901      	ldr	r1, [sp, #4]
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d0f5      	beq.n	80076ea <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 fb8a 	bl	8007e18 <ai_mlp_create>
 8007704:	b2c2      	uxtb	r2, r0
 8007706:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800770a:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 800770e:	d104      	bne.n	800771a <ai_mnetwork_create+0x4a>
        inst->entry = found;
 8007710:	4905      	ldr	r1, [pc, #20]	; (8007728 <ai_mnetwork_create+0x58>)
 8007712:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8007714:	6829      	ldr	r1, [r5, #0]
 8007716:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8007718:	602c      	str	r4, [r5, #0]
    return err;
 800771a:	2000      	movs	r0, #0
 800771c:	f362 0007 	bfi	r0, r2, #0, #8
 8007720:	f363 201f 	bfi	r0, r3, #8, #24
 8007724:	e7df      	b.n	80076e6 <ai_mnetwork_create+0x16>
 8007726:	bf00      	nop
 8007728:	0800f868 	.word	0x0800f868

0800772c <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8007730:	f7ff ff8e 	bl	8007650 <ai_mnetwork_handle>
    if (inn) {
 8007734:	4605      	mov	r5, r0
 8007736:	b160      	cbz	r0, 8007752 <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8007738:	6803      	ldr	r3, [r0, #0]
 800773a:	6840      	ldr	r0, [r0, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	4798      	blx	r3
        if (hdl != inn->handle) {
 8007740:	686b      	ldr	r3, [r5, #4]
 8007742:	4283      	cmp	r3, r0
 8007744:	d005      	beq.n	8007752 <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8007746:	4b04      	ldr	r3, [pc, #16]	; (8007758 <ai_mnetwork_destroy+0x2c>)
 8007748:	429d      	cmp	r5, r3
 800774a:	f04f 0400 	mov.w	r4, #0
 800774e:	d100      	bne.n	8007752 <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8007750:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8007752:	4620      	mov	r0, r4
 8007754:	bd38      	pop	{r3, r4, r5, pc}
 8007756:	bf00      	nop
 8007758:	20001778 	.word	0x20001778

0800775c <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 800775c:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800775e:	f7ff ff77 	bl	8007650 <ai_mnetwork_handle>
    if (inn)
 8007762:	b128      	cbz	r0, 8007770 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8007764:	6802      	ldr	r2, [r0, #0]
 8007766:	6840      	ldr	r0, [r0, #4]
 8007768:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 800776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 800776e:	4710      	bx	r2
}
 8007770:	bd10      	pop	{r4, pc}

08007772 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8007772:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8007774:	f7ff ff6c 	bl	8007650 <ai_mnetwork_handle>
    if (inn)
 8007778:	b128      	cbz	r0, 8007786 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	6840      	ldr	r0, [r0, #4]
 800777e:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8007780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8007784:	4718      	bx	r3
}
 8007786:	f241 0014 	movw	r0, #4116	; 0x1014
 800778a:	bd10      	pop	{r4, pc}

0800778c <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 800778c:	b530      	push	{r4, r5, lr}
 800778e:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8007790:	f7ff ff5e 	bl	8007650 <ai_mnetwork_handle>
    if (inn) {
 8007794:	4604      	mov	r4, r0
 8007796:	b168      	cbz	r0, 80077b4 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8007798:	6803      	ldr	r3, [r0, #0]
 800779a:	4668      	mov	r0, sp
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80077a0:	2500      	movs	r5, #0
 80077a2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80077a6:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80077a8:	42aa      	cmp	r2, r5
 80077aa:	dc05      	bgt.n	80077b8 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	6860      	ldr	r0, [r4, #4]
 80077b0:	4669      	mov	r1, sp
 80077b2:	4798      	blx	r3
    }
    else
        return false;
}
 80077b4:	b00f      	add	sp, #60	; 0x3c
 80077b6:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	4629      	mov	r1, r5
 80077bc:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80077c0:	a803      	add	r0, sp, #12
 80077c2:	f000 fc37 	bl	8008034 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 80077c6:	3501      	adds	r5, #1
 80077c8:	e7eb      	b.n	80077a2 <ai_mnetwork_init+0x16>

080077ca <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 80077ca:	b513      	push	{r0, r1, r4, lr}
 80077cc:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80077ce:	f7ff ff3f 	bl	8007650 <ai_mnetwork_handle>
    if (inn)
 80077d2:	4603      	mov	r3, r0
 80077d4:	b140      	cbz	r0, 80077e8 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 80077d6:	6800      	ldr	r0, [r0, #0]
 80077d8:	9a01      	ldr	r2, [sp, #4]
 80077da:	6a04      	ldr	r4, [r0, #32]
 80077dc:	6858      	ldr	r0, [r3, #4]
 80077de:	4623      	mov	r3, r4
    else
        return 0;
}
 80077e0:	b002      	add	sp, #8
 80077e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80077e6:	4718      	bx	r3
}
 80077e8:	b002      	add	sp, #8
 80077ea:	bd10      	pop	{r4, pc}

080077ec <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 80077f0:	f7ff ff2e 	bl	8007650 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 80077f4:	b188      	cbz	r0, 800781a <ai_mnetwork_get_private_handle+0x2e>
 80077f6:	b181      	cbz	r1, 800781a <ai_mnetwork_get_private_handle+0x2e>
 80077f8:	b17d      	cbz	r5, 800781a <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 80077fa:	6843      	ldr	r3, [r0, #4]
 80077fc:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 80077fe:	f100 0408 	add.w	r4, r0, #8
 8007802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800780a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800780c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800780e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007812:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8007816:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8007818:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 800781a:	f04f 30ff 	mov.w	r0, #4294967295
 800781e:	e7fb      	b.n	8007818 <ai_mnetwork_get_private_handle+0x2c>

08007820 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8007824:	6896      	ldr	r6, [r2, #8]
{
 8007826:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8007828:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 800782a:	f016 0304 	ands.w	r3, r6, #4
{
 800782e:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8007830:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8007834:	d028      	beq.n	8007888 <_write_number+0x68>
    if ((int64_t)number < 0) {
 8007836:	42a9      	cmp	r1, r5
 8007838:	da07      	bge.n	800784a <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 800783a:	6813      	ldr	r3, [r2, #0]
      number = -number;
 800783c:	4240      	negs	r0, r0
      specifier->width -= 1;
 800783e:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8007842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8007846:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8007848:	252d      	movs	r5, #45	; 0x2d
 800784a:	f016 0f08 	tst.w	r6, #8
 800784e:	bf14      	ite	ne
 8007850:	f04f 0841 	movne.w	r8, #65	; 0x41
 8007854:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8007858:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800785c:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 800785e:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007862:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8007866:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 800786a:	f1ba 0f00 	cmp.w	sl, #0
 800786e:	d032      	beq.n	80078d6 <_write_number+0xb6>
      chr = number & 0x0F;
 8007870:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8007874:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007876:	2b09      	cmp	r3, #9
      t = number >> 4;
 8007878:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 800787c:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007880:	d906      	bls.n	8007890 <_write_number+0x70>
 8007882:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8007884:	b2db      	uxtb	r3, r3
 8007886:	e004      	b.n	8007892 <_write_number+0x72>
  char sign_neg = 0;
 8007888:	461d      	mov	r5, r3
 800788a:	e7de      	b.n	800784a <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 800788c:	4617      	mov	r7, r2
 800788e:	e7ea      	b.n	8007866 <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007890:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8007892:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8007896:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 800789a:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 800789e:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 80078a2:	d1f3      	bne.n	800788c <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 80078a4:	f006 0101 	and.w	r1, r6, #1
 80078a8:	b14d      	cbz	r5, 80078be <_write_number+0x9e>
 80078aa:	b941      	cbnz	r1, 80078be <_write_number+0x9e>
    buf[idx--] = sign_neg;
 80078ac:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80078b0:	eb0d 0203 	add.w	r2, sp, r3
    count++;
 80078b4:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 80078b8:	f802 5c40 	strb.w	r5, [r2, #-64]
 80078bc:	1eba      	subs	r2, r7, #2
 80078be:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	bf14      	ite	ne
 80078c4:	2130      	movne	r1, #48	; 0x30
 80078c6:	2120      	moveq	r1, #32
 80078c8:	f006 0602 	and.w	r6, r6, #2
 80078cc:	455b      	cmp	r3, fp
 80078ce:	dd13      	ble.n	80078f8 <_write_number+0xd8>
 80078d0:	b166      	cbz	r6, 80078ec <_write_number+0xcc>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80078d2:	b9a5      	cbnz	r5, 80078fe <_write_number+0xde>
 80078d4:	e01b      	b.n	800790e <_write_number+0xee>
      t = number / 10;
 80078d6:	2300      	movs	r3, #0
 80078d8:	220a      	movs	r2, #10
 80078da:	f7f9 fa73 	bl	8000dc4 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80078de:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80078e2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80078e6:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 80078ea:	e7cb      	b.n	8007884 <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80078ec:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80078f0:	f10b 0b01 	add.w	fp, fp, #1
 80078f4:	3a01      	subs	r2, #1
 80078f6:	e7e9      	b.n	80078cc <_write_number+0xac>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80078f8:	b14d      	cbz	r5, 800790e <_write_number+0xee>
 80078fa:	455b      	cmp	r3, fp
 80078fc:	d107      	bne.n	800790e <_write_number+0xee>
    buf[idx--] = sign_neg;
 80078fe:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8007902:	446b      	add	r3, sp
    count++;
 8007904:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8007908:	f803 5c40 	strb.w	r5, [r3, #-64]
 800790c:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 800790e:	eb0d 0602 	add.w	r6, sp, r2
 8007912:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8007914:	68e3      	ldr	r3, [r4, #12]
 8007916:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800791a:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 800791c:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800791e:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8007920:	45ab      	cmp	fp, r5
 8007922:	d1f7      	bne.n	8007914 <_write_number+0xf4>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8007924:	68a3      	ldr	r3, [r4, #8]
 8007926:	079b      	lsls	r3, r3, #30
 8007928:	d408      	bmi.n	800793c <_write_number+0x11c>
      _WRITE_C(' ');
    }
  }

  return count;
}
 800792a:	4628      	mov	r0, r5
 800792c:	b011      	add	sp, #68	; 0x44
 800792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	6920      	ldr	r0, [r4, #16]
 8007936:	2120      	movs	r1, #32
 8007938:	4798      	blx	r3
 800793a:	3501      	adds	r5, #1
    while (count < specifier->width) {
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	42ab      	cmp	r3, r5
 8007940:	dcf7      	bgt.n	8007932 <_write_number+0x112>
 8007942:	e7f2      	b.n	800792a <_write_number+0x10a>

08007944 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	ed2d 8b02 	vpush	{d8}
 800794c:	4683      	mov	fp, r0
 800794e:	b09d      	sub	sp, #116	; 0x74
 8007950:	460f      	mov	r7, r1
 8007952:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8007954:	2500      	movs	r5, #0
  return *(*fmtP)++;
 8007956:	4613      	mov	r3, r2
 8007958:	f813 1b01 	ldrb.w	r1, [r3], #1
 800795c:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 800795e:	b929      	cbnz	r1, 800796c <vlc_print+0x28>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8007960:	4628      	mov	r0, r5
 8007962:	b01d      	add	sp, #116	; 0x74
 8007964:	ecbd 8b02 	vpop	{d8}
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 800796c:	290a      	cmp	r1, #10
 800796e:	d103      	bne.n	8007978 <vlc_print+0x34>
      putc_fct(user, c);
 8007970:	4638      	mov	r0, r7
 8007972:	47d8      	blx	fp
      count++;
 8007974:	3501      	adds	r5, #1
 8007976:	e0c5      	b.n	8007b04 <vlc_print+0x1c0>
    else if (c == '%')
 8007978:	2925      	cmp	r1, #37	; 0x25
 800797a:	d1f9      	bne.n	8007970 <vlc_print+0x2c>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800797c:	2300      	movs	r3, #0
 800797e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007982:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
 8007986:	970b      	str	r7, [sp, #44]	; 0x2c
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4698      	mov	r8, r3
 800798c:	461a      	mov	r2, r3
 800798e:	469e      	mov	lr, r3
 8007990:	4618      	mov	r0, r3
      bool has_precision = false;
 8007992:	469c      	mov	ip, r3
 8007994:	f04f 090a 	mov.w	r9, #10
  return *(*fmtP)++;
 8007998:	9e04      	ldr	r6, [sp, #16]
 800799a:	f816 1b01 	ldrb.w	r1, [r6], #1
 800799e:	9604      	str	r6, [sp, #16]
        if (!c)
 80079a0:	2900      	cmp	r1, #0
 80079a2:	f000 81d6 	beq.w	8007d52 <vlc_print+0x40e>
        else if (c == '0')
 80079a6:	2930      	cmp	r1, #48	; 0x30
 80079a8:	d116      	bne.n	80079d8 <vlc_print+0x94>
          if (!specifier.width && !specifier.precision) {
 80079aa:	ea50 0102 	orrs.w	r1, r0, r2
 80079ae:	d107      	bne.n	80079c0 <vlc_print+0x7c>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80079b0:	9b00      	ldr	r3, [sp, #0]
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	460a      	mov	r2, r1
 80079ba:	4608      	mov	r0, r1
 80079bc:	2301      	movs	r3, #1
 80079be:	e7eb      	b.n	8007998 <vlc_print+0x54>
          } else if (has_precision) {
 80079c0:	f1bc 0f00 	cmp.w	ip, #0
 80079c4:	d003      	beq.n	80079ce <vlc_print+0x8a>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80079c6:	fb09 f202 	mul.w	r2, r9, r2
 80079ca:	46e0      	mov	r8, ip
 80079cc:	e7e4      	b.n	8007998 <vlc_print+0x54>
            specifier.width = specifier.width * 10 + (c - '0');
 80079ce:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 80079d2:	f04f 0e01 	mov.w	lr, #1
 80079d6:	e7df      	b.n	8007998 <vlc_print+0x54>
        else if (c == '-')
 80079d8:	292d      	cmp	r1, #45	; 0x2d
 80079da:	d104      	bne.n	80079e6 <vlc_print+0xa2>
          specifier.flags |= FLAG_NEG_PAD;
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	f043 0302 	orr.w	r3, r3, #2
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	e7ea      	b.n	80079bc <vlc_print+0x78>
        else if (c == '.')
 80079e6:	292e      	cmp	r1, #46	; 0x2e
 80079e8:	f000 81c1 	beq.w	8007d6e <vlc_print+0x42a>
        else if ((c >= '1') && (c <= '9'))
 80079ec:	f1a1 0631 	sub.w	r6, r1, #49	; 0x31
 80079f0:	2e08      	cmp	r6, #8
 80079f2:	d809      	bhi.n	8007a08 <vlc_print+0xc4>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80079f4:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 80079f6:	f1bc 0f00 	cmp.w	ip, #0
 80079fa:	d002      	beq.n	8007a02 <vlc_print+0xbe>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80079fc:	fb09 1202 	mla	r2, r9, r2, r1
 8007a00:	e7e3      	b.n	80079ca <vlc_print+0x86>
            specifier.width = specifier.width * 10 + (c - '0');
 8007a02:	fb09 1000 	mla	r0, r9, r0, r1
 8007a06:	e7e4      	b.n	80079d2 <vlc_print+0x8e>
        else if (c == 'l')
 8007a08:	296c      	cmp	r1, #108	; 0x6c
 8007a0a:	d0c5      	beq.n	8007998 <vlc_print+0x54>
 8007a0c:	f1be 0f00 	cmp.w	lr, #0
 8007a10:	d000      	beq.n	8007a14 <vlc_print+0xd0>
 8007a12:	9007      	str	r0, [sp, #28]
 8007a14:	f1b8 0f00 	cmp.w	r8, #0
 8007a18:	d000      	beq.n	8007a1c <vlc_print+0xd8>
 8007a1a:	9208      	str	r2, [sp, #32]
 8007a1c:	b10b      	cbz	r3, 8007a22 <vlc_print+0xde>
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	9309      	str	r3, [sp, #36]	; 0x24
          switch(c)
 8007a22:	2978      	cmp	r1, #120	; 0x78
 8007a24:	d809      	bhi.n	8007a3a <vlc_print+0xf6>
 8007a26:	2962      	cmp	r1, #98	; 0x62
 8007a28:	d813      	bhi.n	8007a52 <vlc_print+0x10e>
 8007a2a:	2946      	cmp	r1, #70	; 0x46
 8007a2c:	f000 80b1 	beq.w	8007b92 <vlc_print+0x24e>
 8007a30:	2958      	cmp	r1, #88	; 0x58
 8007a32:	f000 808e 	beq.w	8007b52 <vlc_print+0x20e>
 8007a36:	2925      	cmp	r1, #37	; 0x25
 8007a38:	d09a      	beq.n	8007970 <vlc_print+0x2c>
        putc_fct(user, '<');
 8007a3a:	213c      	movs	r1, #60	; 0x3c
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	47d8      	blx	fp
        putc_fct(user, '!');
 8007a40:	2121      	movs	r1, #33	; 0x21
 8007a42:	4638      	mov	r0, r7
 8007a44:	47d8      	blx	fp
        putc_fct(user, '>');
 8007a46:	213e      	movs	r1, #62	; 0x3e
 8007a48:	4638      	mov	r0, r7
 8007a4a:	47d8      	blx	fp
        va_arg(vl, signed long);
 8007a4c:	3404      	adds	r4, #4
        count += 3;
 8007a4e:	3503      	adds	r5, #3
        error = false;
 8007a50:	e058      	b.n	8007b04 <vlc_print+0x1c0>
          switch(c)
 8007a52:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8007a56:	2b15      	cmp	r3, #21
 8007a58:	d8ef      	bhi.n	8007a3a <vlc_print+0xf6>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <vlc_print+0x11c>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007ab9 	.word	0x08007ab9
 8007a64:	08007b73 	.word	0x08007b73
 8007a68:	08007a3b 	.word	0x08007a3b
 8007a6c:	08007b93 	.word	0x08007b93
 8007a70:	08007a3b 	.word	0x08007a3b
 8007a74:	08007a3b 	.word	0x08007a3b
 8007a78:	08007b73 	.word	0x08007b73
 8007a7c:	08007a3b 	.word	0x08007a3b
 8007a80:	08007a3b 	.word	0x08007a3b
 8007a84:	08007a3b 	.word	0x08007a3b
 8007a88:	08007a3b 	.word	0x08007a3b
 8007a8c:	08007a3b 	.word	0x08007a3b
 8007a90:	08007a3b 	.word	0x08007a3b
 8007a94:	08007b47 	.word	0x08007b47
 8007a98:	08007a3b 	.word	0x08007a3b
 8007a9c:	08007a3b 	.word	0x08007a3b
 8007aa0:	08007ac1 	.word	0x08007ac1
 8007aa4:	08007a3b 	.word	0x08007a3b
 8007aa8:	08007b7b 	.word	0x08007b7b
 8007aac:	08007a3b 	.word	0x08007a3b
 8007ab0:	08007a3b 	.word	0x08007a3b
 8007ab4:	08007b5b 	.word	0x08007b5b
            t = (char)va_arg(vl, signed int);
 8007ab8:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8007abc:	b2c9      	uxtb	r1, r1
 8007abe:	e757      	b.n	8007970 <vlc_print+0x2c>
            if (!str) str = "(null)";
 8007ac0:	4bac      	ldr	r3, [pc, #688]	; (8007d74 <vlc_print+0x430>)
            str = va_arg(vl, char*);
 8007ac2:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8007ac6:	f1b9 0f00 	cmp.w	r9, #0
 8007aca:	bf08      	it	eq
 8007acc:	4699      	moveq	r9, r3
  int len = strlen(str);
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f7f8 fb7e 	bl	80001d0 <strlen>
  if (specifier->precision) {
 8007ad4:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8007ad6:	4680      	mov	r8, r0
  if (specifier->precision) {
 8007ad8:	b113      	cbz	r3, 8007ae0 <vlc_print+0x19c>
    len = (len > specifier->precision)?specifier->precision:len;
 8007ada:	4298      	cmp	r0, r3
 8007adc:	bfa8      	it	ge
 8007ade:	4698      	movge	r8, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8007ae0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007ae2:	f016 0602 	ands.w	r6, r6, #2
 8007ae6:	d014      	beq.n	8007b12 <vlc_print+0x1ce>
  int count = 0;
 8007ae8:	2600      	movs	r6, #0
 8007aea:	46ca      	mov	sl, r9
  for (int i = 0; i < len; i++) {
 8007aec:	ebaa 0309 	sub.w	r3, sl, r9
 8007af0:	4598      	cmp	r8, r3
 8007af2:	dc14      	bgt.n	8007b1e <vlc_print+0x1da>
  if (specifier->flags & FLAG_NEG_PAD) {
 8007af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af6:	f1b8 0f00 	cmp.w	r8, #0
 8007afa:	bfa8      	it	ge
 8007afc:	4446      	addge	r6, r8
 8007afe:	079b      	lsls	r3, r3, #30
 8007b00:	d41e      	bmi.n	8007b40 <vlc_print+0x1fc>
            count += _write_string(str, &specifier);
 8007b02:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8007b04:	9a04      	ldr	r2, [sp, #16]
 8007b06:	e726      	b.n	8007956 <vlc_print+0x12>
      _WRITE_C(' ');
 8007b08:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8007b0c:	2120      	movs	r1, #32
 8007b0e:	4798      	blx	r3
 8007b10:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8007b12:	9a07      	ldr	r2, [sp, #28]
 8007b14:	eb08 0306 	add.w	r3, r8, r6
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	dbf5      	blt.n	8007b08 <vlc_print+0x1c4>
 8007b1c:	e7e5      	b.n	8007aea <vlc_print+0x1a6>
    _WRITE_C(*str++);
 8007b1e:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8007b22:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007b26:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 8007b28:	e7e0      	b.n	8007aec <vlc_print+0x1a8>
      _WRITE_C(' ');
 8007b2a:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8007b2e:	2120      	movs	r1, #32
 8007b30:	4798      	blx	r3
 8007b32:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8007b34:	9a07      	ldr	r2, [sp, #28]
 8007b36:	eb08 0306 	add.w	r3, r8, r6
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	dcf5      	bgt.n	8007b2a <vlc_print+0x1e6>
 8007b3e:	e7e0      	b.n	8007b02 <vlc_print+0x1be>
 8007b40:	eba8 0806 	sub.w	r8, r8, r6
 8007b44:	e7f6      	b.n	8007b34 <vlc_print+0x1f0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	f043 0301 	orr.w	r3, r3, #1
 8007b4c:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8007b4e:	2308      	movs	r3, #8
 8007b50:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8007b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b54:	f043 0308 	orr.w	r3, r3, #8
 8007b58:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.flags |= FLAG_HEX;
 8007b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8007b5c:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8007b60:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8007b64:	aa07      	add	r2, sp, #28
 8007b66:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8007b68:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8007b6a:	f7ff fe59 	bl	8007820 <_write_number>
 8007b6e:	4405      	add	r5, r0
            break;
 8007b70:	e7c8      	b.n	8007b04 <vlc_print+0x1c0>
            specifier.flags |= FLAG_IS_SIGNED;
 8007b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b74:	f043 0304 	orr.w	r3, r3, #4
 8007b78:	9309      	str	r3, [sp, #36]	; 0x24
              val = va_arg(vl, unsigned int);
 8007b7a:	6820      	ldr	r0, [r4, #0]
            if (c == 'u')
 8007b7c:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 8007b7e:	bf0c      	ite	eq
 8007b80:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 8007b82:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 8007b84:	aa07      	add	r2, sp, #28
 8007b86:	f7ff fe4b 	bl	8007820 <_write_number>
              val = va_arg(vl, unsigned int);
 8007b8a:	1d26      	adds	r6, r4, #4
            count += _write_number(val, &specifier);
 8007b8c:	4405      	add	r5, r0
            break;
 8007b8e:	4634      	mov	r4, r6
 8007b90:	e7b8      	b.n	8007b04 <vlc_print+0x1c0>
            dbl = va_arg(vl, double);
 8007b92:	3407      	adds	r4, #7
 8007b94:	f024 0407 	bic.w	r4, r4, #7
 8007b98:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8007b9c:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8007b9e:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8007ba2:	b90b      	cbnz	r3, 8007ba8 <vlc_print+0x264>
              specifier.precision = 6;
 8007ba4:	2306      	movs	r3, #6
 8007ba6:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8007ba8:	9e08      	ldr	r6, [sp, #32]
 8007baa:	2300      	movs	r3, #0
  float mul = 1.0;
 8007bac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    mul *= 10;
 8007bb0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8007bb4:	42b3      	cmp	r3, r6
 8007bb6:	f2c0 80bc 	blt.w	8007d32 <vlc_print+0x3ee>
  if (is_signed)
 8007bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f7f8 ff8b 	bl	8000adc <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f000 80b7 	beq.w	8007d3a <vlc_print+0x3f6>
    number = -number;
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	9302      	str	r3, [sp, #8]
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bd6:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8007bd8:	ee18 0a10 	vmov	r0, s16
 8007bdc:	f7f8 fcb4 	bl	8000548 <__aeabi_f2d>
 8007be0:	4680      	mov	r8, r0
 8007be2:	4689      	mov	r9, r1
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	2000      	movs	r0, #0
 8007bea:	4963      	ldr	r1, [pc, #396]	; (8007d78 <vlc_print+0x434>)
 8007bec:	f7f8 fe2e 	bl	800084c <__aeabi_ddiv>
 8007bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bf4:	f7f8 fb4a 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	4642      	mov	r2, r8
 8007bfc:	f7f8 fcfc 	bl	80005f8 <__aeabi_dmul>
 8007c00:	f7f9 f92c 	bl	8000e5c <__aeabi_d2ulz>
  uint32_t count = 0;
 8007c04:	f04f 0800 	mov.w	r8, #0
  val = (uint64_t)(number * mul);
 8007c08:	4603      	mov	r3, r0
  uint32_t idx = sizeof(buf) - 1;
 8007c0a:	f04f 093f 	mov.w	r9, #63	; 0x3f
    uint64_t t = val / 10;
 8007c0e:	469a      	mov	sl, r3
 8007c10:	220a      	movs	r2, #10
 8007c12:	2300      	movs	r3, #0
 8007c14:	4650      	mov	r0, sl
 8007c16:	9105      	str	r1, [sp, #20]
 8007c18:	f7f9 f8d4 	bl	8000dc4 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8007c1c:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
    uint64_t t = val / 10;
 8007c20:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 8007c22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007c26:	ebac 0040 	sub.w	r0, ip, r0, lsl #1
    buf[idx--] = chr;
 8007c2a:	f109 0c70 	add.w	ip, r9, #112	; 0x70
 8007c2e:	44ec      	add	ip, sp
 8007c30:	f109 32ff 	add.w	r2, r9, #4294967295
 8007c34:	f80c 0c40 	strb.w	r0, [ip, #-64]
    count++;
 8007c38:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 8007c3c:	4286      	cmp	r6, r0
      buf[idx--] = '.';
 8007c3e:	bf01      	itttt	eq
 8007c40:	3270      	addeq	r2, #112	; 0x70
 8007c42:	446a      	addeq	r2, sp
 8007c44:	202e      	moveq	r0, #46	; 0x2e
 8007c46:	f802 0c40 	strbeq.w	r0, [r2, #-64]
    buf[idx--] = chr;
 8007c4a:	bf18      	it	ne
 8007c4c:	4691      	movne	r9, r2
  } while (val);
 8007c4e:	9a05      	ldr	r2, [sp, #20]
      buf[idx--] = '.';
 8007c50:	bf06      	itte	eq
 8007c52:	f1a9 0902 	subeq.w	r9, r9, #2
      count++;
 8007c56:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 8007c5a:	4680      	movne	r8, r0
  } while (val);
 8007c5c:	f1ba 0f0a 	cmp.w	sl, #10
 8007c60:	f172 0200 	sbcs.w	r2, r2, #0
 8007c64:	d2d3      	bcs.n	8007c0e <vlc_print+0x2ca>
    buf[idx--] = '0';
 8007c66:	45b0      	cmp	r8, r6
 8007c68:	f1c6 0001 	rsb	r0, r6, #1
 8007c6c:	4440      	add	r0, r8
 8007c6e:	f04f 0130 	mov.w	r1, #48	; 0x30
 8007c72:	bf88      	it	hi
 8007c74:	2001      	movhi	r0, #1
 8007c76:	eba6 0a08 	sub.w	sl, r6, r8
 8007c7a:	eb0d 0301 	add.w	r3, sp, r1
 8007c7e:	bf88      	it	hi
 8007c80:	f04f 0a00 	movhi.w	sl, #0
 8007c84:	4448      	add	r0, r9
 8007c86:	4418      	add	r0, r3
 8007c88:	4652      	mov	r2, sl
 8007c8a:	f003 feb5 	bl	800b9f8 <memset>
 8007c8e:	eba8 0306 	sub.w	r3, r8, r6
 8007c92:	45b0      	cmp	r8, r6
 8007c94:	bf88      	it	hi
 8007c96:	2300      	movhi	r3, #0
 8007c98:	44d0      	add	r8, sl
  if (count == specifier->precision) {
 8007c9a:	4546      	cmp	r6, r8
 8007c9c:	4499      	add	r9, r3
 8007c9e:	f106 0601 	add.w	r6, r6, #1
 8007ca2:	d108      	bne.n	8007cb6 <vlc_print+0x372>
    buf[idx--] = '.';
 8007ca4:	f109 0370 	add.w	r3, r9, #112	; 0x70
 8007ca8:	446b      	add	r3, sp
 8007caa:	222e      	movs	r2, #46	; 0x2e
 8007cac:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8007cb0:	46b0      	mov	r8, r6
    buf[idx--] = '.';
 8007cb2:	f109 39ff 	add.w	r9, r9, #4294967295
  if (count == specifier->precision + 1)
 8007cb6:	4546      	cmp	r6, r8
 8007cb8:	d109      	bne.n	8007cce <vlc_print+0x38a>
    buf[idx--] = '0';
 8007cba:	f109 0370 	add.w	r3, r9, #112	; 0x70
 8007cbe:	446b      	add	r3, sp
 8007cc0:	2230      	movs	r2, #48	; 0x30
 8007cc2:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8007cc6:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '0';
 8007cca:	f109 39ff 	add.w	r9, r9, #4294967295
  if (is_signed) {
 8007cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f7f8 ff01 	bl	8000adc <__aeabi_dcmplt>
 8007cda:	b148      	cbz	r0, 8007cf0 <vlc_print+0x3ac>
    buf[idx--] = '-';
 8007cdc:	f109 0370 	add.w	r3, r9, #112	; 0x70
 8007ce0:	446b      	add	r3, sp
 8007ce2:	222d      	movs	r2, #45	; 0x2d
 8007ce4:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8007ce8:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 8007cec:	f109 39ff 	add.w	r9, r9, #4294967295
  while (count < specifier->width) {
 8007cf0:	f8dd a01c 	ldr.w	sl, [sp, #28]
    buf[idx--] = ' ';
 8007cf4:	45d0      	cmp	r8, sl
 8007cf6:	f1ca 0001 	rsb	r0, sl, #1
 8007cfa:	4440      	add	r0, r8
 8007cfc:	bf88      	it	hi
 8007cfe:	2001      	movhi	r0, #1
 8007d00:	ebaa 0608 	sub.w	r6, sl, r8
 8007d04:	ab0c      	add	r3, sp, #48	; 0x30
 8007d06:	bf88      	it	hi
 8007d08:	2600      	movhi	r6, #0
 8007d0a:	4448      	add	r0, r9
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	4418      	add	r0, r3
 8007d10:	2120      	movs	r1, #32
 8007d12:	f003 fe71 	bl	800b9f8 <memset>
  for(int i = 0; i < count; i++) {
 8007d16:	eba8 030a 	sub.w	r3, r8, sl
 8007d1a:	45d0      	cmp	r8, sl
 8007d1c:	bf88      	it	hi
 8007d1e:	2300      	movhi	r3, #0
 8007d20:	4499      	add	r9, r3
 8007d22:	ab0c      	add	r3, sp, #48	; 0x30
 8007d24:	44b0      	add	r8, r6
 8007d26:	4499      	add	r9, r3
 8007d28:	2600      	movs	r6, #0
 8007d2a:	45b0      	cmp	r8, r6
 8007d2c:	d10a      	bne.n	8007d44 <vlc_print+0x400>
            count += _write_double(dbl, &specifier);
 8007d2e:	4445      	add	r5, r8
            break;
 8007d30:	e6e8      	b.n	8007b04 <vlc_print+0x1c0>
    mul *= 10;
 8007d32:	ee28 8a27 	vmul.f32	s16, s16, s15
  for (int i=0;i <specifier->precision; i++)
 8007d36:	3301      	adds	r3, #1
 8007d38:	e73c      	b.n	8007bb4 <vlc_print+0x270>
 8007d3a:	ed9d 7b00 	vldr	d7, [sp]
 8007d3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d42:	e749      	b.n	8007bd8 <vlc_print+0x294>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8007d44:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8007d48:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8007d4c:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7eb      	b.n	8007d2a <vlc_print+0x3e6>
 8007d52:	f1be 0f00 	cmp.w	lr, #0
 8007d56:	d000      	beq.n	8007d5a <vlc_print+0x416>
 8007d58:	9007      	str	r0, [sp, #28]
 8007d5a:	f1b8 0f00 	cmp.w	r8, #0
 8007d5e:	d000      	beq.n	8007d62 <vlc_print+0x41e>
 8007d60:	9208      	str	r2, [sp, #32]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f43f ae69 	beq.w	8007a3a <vlc_print+0xf6>
 8007d68:	9b00      	ldr	r3, [sp, #0]
 8007d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6c:	e665      	b.n	8007a3a <vlc_print+0xf6>
          has_precision = true;
 8007d6e:	f04f 0c01 	mov.w	ip, #1
 8007d72:	e611      	b.n	8007998 <vlc_print+0x54>
 8007d74:	0800f894 	.word	0x0800f894
 8007d78:	3fe00000 	.word	0x3fe00000

08007d7c <ai_mlp_get_report>:


AI_API_ENTRY
ai_bool ai_mlp_get_report(
  ai_handle network, ai_network_report* report)
{
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	b0a0      	sub	sp, #128	; 0x80
 8007d80:	4606      	mov	r6, r0
 8007d82:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8007d84:	f000 fbf6 	bl	8008574 <ai_platform_context_acquire>
 8007d88:	4604      	mov	r4, r0

  if (report && net_ctx)
 8007d8a:	2d00      	cmp	r5, #0
 8007d8c:	d032      	beq.n	8007df4 <ai_mlp_get_report+0x78>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d02d      	beq.n	8007dee <ai_mlp_get_report+0x72>
  {
    ai_network_report r = {
 8007d92:	226c      	movs	r2, #108	; 0x6c
 8007d94:	2100      	movs	r1, #0
 8007d96:	a805      	add	r0, sp, #20
 8007d98:	f003 fe2e 	bl	800b9f8 <memset>
 8007d9c:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <ai_mlp_get_report+0x7c>)
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <ai_mlp_get_report+0x80>)
 8007da2:	9302      	str	r3, [sp, #8]
 8007da4:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <ai_mlp_get_report+0x84>)
 8007da6:	9303      	str	r3, [sp, #12]
 8007da8:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <ai_mlp_get_report+0x88>)
 8007daa:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_MLP_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8007dac:	f000 faac 	bl	8008308 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8007db0:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8007db2:	f000 fae9 	bl	8008388 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <ai_mlp_get_report+0x8c>)
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f240 2307 	movw	r3, #519	; 0x207
 8007dbe:	f8ad 3020 	strh.w	r3, [sp, #32]
      .runtime_version   = ai_platform_runtime_get_version(),
 8007dc2:	9006      	str	r0, [sp, #24]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8007dc4:	f000 fb32 	bl	800842c <ai_platform_api_get_version>
 8007dc8:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8007dca:	f000 fb81 	bl	80084d0 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <ai_mlp_get_report+0x90>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8007dd0:	900b      	str	r0, [sp, #44]	; 0x2c
    ai_network_report r = {
 8007dd2:	930c      	str	r3, [sp, #48]	; 0x30
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8007dd4:	a901      	add	r1, sp, #4
    ai_network_report r = {
 8007dd6:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <ai_mlp_get_report+0x94>)
 8007dd8:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 fc90 	bl	8008700 <ai_platform_api_get_network_report>
 8007de0:	4604      	mov	r4, r0
 8007de2:	b120      	cbz	r0, 8007dee <ai_mlp_get_report+0x72>

    *report = r;
 8007de4:	227c      	movs	r2, #124	; 0x7c
 8007de6:	a901      	add	r1, sp, #4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f003 fdf7 	bl	800b9dc <memcpy>
    return true;
  }
  return false;
}
 8007dee:	4620      	mov	r0, r4
 8007df0:	b020      	add	sp, #128	; 0x80
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8007df4:	462c      	mov	r4, r5
 8007df6:	e7fa      	b.n	8007dee <ai_mlp_get_report+0x72>
 8007df8:	0800f864 	.word	0x0800f864
 8007dfc:	0800f89b 	.word	0x0800f89b
 8007e00:	0800f8bc 	.word	0x0800f8bc
 8007e04:	0800f8d5 	.word	0x0800f8d5
 8007e08:	080a8b55 	.word	0x080a8b55
 8007e0c:	00098998 	.word	0x00098998
 8007e10:	a1facade 	.word	0xa1facade

08007e14 <ai_mlp_get_error>:

AI_API_ENTRY
ai_error ai_mlp_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8007e14:	f000 bbf4 	b.w	8008600 <ai_platform_network_get_error>

08007e18 <ai_mlp_create>:
}

AI_API_ENTRY
ai_error ai_mlp_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007e18:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8007e1a:	2305      	movs	r3, #5
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	e9cd 3200 	strd	r3, r2, [sp]
 8007e22:	4a03      	ldr	r2, [pc, #12]	; (8007e30 <ai_mlp_create+0x18>)
 8007e24:	2301      	movs	r3, #1
 8007e26:	f000 ff47 	bl	8008cb8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007e2a:	b003      	add	sp, #12
 8007e2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e30:	2000060c 	.word	0x2000060c

08007e34 <ai_mlp_destroy>:
}

AI_API_ENTRY
ai_handle ai_mlp_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8007e34:	f001 b822 	b.w	8008e7c <ai_platform_network_destroy>

08007e38 <ai_mlp_init>:
}

AI_API_ENTRY
ai_bool ai_mlp_init(
  ai_handle network, const ai_network_params* params)
{
 8007e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007e40:	f001 f894 	bl	8008f6c <ai_platform_network_init>
  if (!net_ctx) return false;
 8007e44:	4604      	mov	r4, r0
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d063      	beq.n	8007f12 <ai_mlp_init+0xda>
  if (ai_platform_get_weights_map(g_mlp_weights_map, 1, params)) {
 8007e4a:	4e39      	ldr	r6, [pc, #228]	; (8007f30 <ai_mlp_init+0xf8>)
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	2101      	movs	r1, #1
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f98f 	bl	8008174 <ai_platform_get_weights_map>
 8007e56:	4605      	mov	r5, r0
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d05c      	beq.n	8007f16 <ai_mlp_init+0xde>
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007e5c:	4a35      	ldr	r2, [pc, #212]	; (8007f34 <ai_mlp_init+0xfc>)
 8007e5e:	6813      	ldr	r3, [r2, #0]
 8007e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e64:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_mlp_weights_map[0] + 0);
 8007e66:	6833      	ldr	r3, [r6, #0]
    dense_1_weights_array.data_start = AI_PTR(g_mlp_weights_map[0] + 0);
 8007e68:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007e6c:	4a32      	ldr	r2, [pc, #200]	; (8007f38 <ai_mlp_init+0x100>)
 8007e6e:	6811      	ldr	r1, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_mlp_weights_map[0] + 614656);
 8007e70:	f503 2616 	add.w	r6, r3, #614400	; 0x96000
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007e74:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8007e78:	6011      	str	r1, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_mlp_weights_map[0] + 614656);
 8007e7a:	f506 7180 	add.w	r1, r6, #256	; 0x100
    dense_1_bias_array.data_start = AI_PTR(g_mlp_weights_map[0] + 614656);
 8007e7e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8007e82:	4a2e      	ldr	r2, [pc, #184]	; (8007f3c <ai_mlp_init+0x104>)
 8007e84:	6811      	ldr	r1, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_mlp_weights_map[0] + 617792);
 8007e86:	f506 6654 	add.w	r6, r6, #3392	; 0xd40
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8007e8a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8007e8e:	6011      	str	r1, [r2, #0]
    dense_2_weights_array.data_start = AI_PTR(g_mlp_weights_map[0] + 617792);
 8007e90:	e9c2 6602 	strd	r6, r6, [r2, #8]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8007e94:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <ai_mlp_init+0x108>)
    dense_2_bias_array.data = AI_PTR(g_mlp_weights_map[0] + 625632);
 8007e96:	f503 2318 	add.w	r3, r3, #622592	; 0x98000
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8007e9a:	6811      	ldr	r1, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_mlp_weights_map[0] + 625632);
 8007e9c:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
    dense_2_bias_array.data_start = AI_PTR(g_mlp_weights_map[0] + 625632);
 8007ea0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8007ea4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8007ea8:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_mlp_activations_map, 1, params)) {
 8007eaa:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8007f68 <ai_mlp_init+0x130>
 8007eae:	4642      	mov	r2, r8
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	4648      	mov	r0, r9
 8007eb4:	f000 f9b2 	bl	800821c <ai_platform_get_activations_map>
 8007eb8:	4606      	mov	r6, r0
 8007eba:	b390      	cbz	r0, 8007f22 <ai_mlp_init+0xea>
    serving_default_dense_18_input0_output_array.data = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ebc:	f8d9 3000 	ldr.w	r3, [r9]
 8007ec0:	4a20      	ldr	r2, [pc, #128]	; (8007f44 <ai_mlp_init+0x10c>)
    serving_default_dense_18_input0_output_array.data_start = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ec2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conversion_0_output_array.data = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ec6:	4a20      	ldr	r2, [pc, #128]	; (8007f48 <ai_mlp_init+0x110>)
    conversion_0_output_array.data_start = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ec8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_scratch0_array.data = AI_PTR(g_mlp_activations_map[0] + 784);
 8007ecc:	4a1f      	ldr	r2, [pc, #124]	; (8007f4c <ai_mlp_init+0x114>)
 8007ece:	f503 7144 	add.w	r1, r3, #784	; 0x310
    dense_1_scratch0_array.data_start = AI_PTR(g_mlp_activations_map[0] + 784);
 8007ed2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_mlp_activations_map[0] + 2352);
 8007ed6:	4a1e      	ldr	r2, [pc, #120]	; (8007f50 <ai_mlp_init+0x118>)
 8007ed8:	f503 6113 	add.w	r1, r3, #2352	; 0x930
    dense_1_output_array.data_start = AI_PTR(g_mlp_activations_map[0] + 2352);
 8007edc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_scratch0_array.data = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ee0:	4a1c      	ldr	r2, [pc, #112]	; (8007f54 <ai_mlp_init+0x11c>)
    dense_2_scratch0_array.data_start = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ee2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_output_array.data = AI_PTR(g_mlp_activations_map[0] + 1568);
 8007ee6:	4a1c      	ldr	r2, [pc, #112]	; (8007f58 <ai_mlp_init+0x120>)
 8007ee8:	f503 61c4 	add.w	r1, r3, #1568	; 0x620
    dense_2_output_array.data_start = AI_PTR(g_mlp_activations_map[0] + 1568);
 8007eec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_0_conversion_output_array.data = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ef0:	4a1a      	ldr	r2, [pc, #104]	; (8007f5c <ai_mlp_init+0x124>)
    dense_2_0_conversion_output_array.data_start = AI_PTR(g_mlp_activations_map[0] + 0);
 8007ef2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_3_output_array.data = AI_PTR(g_mlp_activations_map[0] + 40);
 8007ef6:	4a1a      	ldr	r2, [pc, #104]	; (8007f60 <ai_mlp_init+0x128>)
 8007ef8:	f103 0128 	add.w	r1, r3, #40	; 0x28
    nl_3_output_array.data_start = AI_PTR(g_mlp_activations_map[0] + 40);
 8007efc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_3_0_conversion_output_array.data = AI_PTR(g_mlp_activations_map[0] + 0);
 8007f00:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <ai_mlp_init+0x12c>)
    nl_3_0_conversion_output_array.data_start = AI_PTR(g_mlp_activations_map[0] + 0);
 8007f02:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= mlp_configure_weights(net_ctx, params);
  ok &= mlp_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8007f06:	4638      	mov	r0, r7
 8007f08:	f001 f92a 	bl	8009160 <ai_platform_network_post_init>
 8007f0c:	4030      	ands	r0, r6
 8007f0e:	4028      	ands	r0, r5
 8007f10:	b2c0      	uxtb	r0, r0

  return ok;
}
 8007f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007f16:	2212      	movs	r2, #18
 8007f18:	2130      	movs	r1, #48	; 0x30
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fbea 	bl	80086f4 <ai_platform_network_set_error>
  return false;
 8007f20:	e7c3      	b.n	8007eaa <ai_mlp_init+0x72>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8007f22:	2213      	movs	r2, #19
 8007f24:	2130      	movs	r1, #48	; 0x30
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fbe4 	bl	80086f4 <ai_platform_network_set_error>
  return false;
 8007f2c:	e7eb      	b.n	8007f06 <ai_mlp_init+0xce>
 8007f2e:	bf00      	nop
 8007f30:	2000248c 	.word	0x2000248c
 8007f34:	200004e4 	.word	0x200004e4
 8007f38:	20000444 	.word	0x20000444
 8007f3c:	200005fc 	.word	0x200005fc
 8007f40:	2000055c 	.word	0x2000055c
 8007f44:	2000070c 	.word	0x2000070c
 8007f48:	20000418 	.word	0x20000418
 8007f4c:	200004b8 	.word	0x200004b8
 8007f50:	2000048c 	.word	0x2000048c
 8007f54:	200005d0 	.word	0x200005d0
 8007f58:	200005a4 	.word	0x200005a4
 8007f5c:	20000530 	.word	0x20000530
 8007f60:	200006e0 	.word	0x200006e0
 8007f64:	20000694 	.word	0x20000694
 8007f68:	20002488 	.word	0x20002488

08007f6c <ai_mlp_run>:

AI_API_ENTRY
ai_i32 ai_mlp_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8007f6c:	f001 b98c 	b.w	8009288 <ai_platform_network_process>

08007f70 <ai_mlp_forward>:
}

AI_API_ENTRY
ai_i32 ai_mlp_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8007f70:	2200      	movs	r2, #0
 8007f72:	f001 b989 	b.w	8009288 <ai_platform_network_process>
	...

08007f78 <ai_mlp_data_params_get>:
 * @ingroup mlp_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_mlp_data_params_get(ai_network_params* params)
{
 8007f78:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8007f7a:	4603      	mov	r3, r0
{
 8007f7c:	b085      	sub	sp, #20
  if (!params) return false;
 8007f7e:	b170      	cbz	r0, 8007f9e <ai_mlp_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8007f80:	4c08      	ldr	r4, [pc, #32]	; (8007fa4 <ai_mlp_data_params_get+0x2c>)
 8007f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f86:	466a      	mov	r2, sp
 8007f88:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MLP_DATA_ACTIVATIONS_COUNT, g_mlp_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007f8c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8007f90:	ad02      	add	r5, sp, #8
 8007f92:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MLP_DATA_WEIGHTS_COUNT, g_mlp_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8007f96:	4629      	mov	r1, r5
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f993 	bl	80082c4 <ai_platform_bind_network_params>
}
 8007f9e:	b005      	add	sp, #20
 8007fa0:	bd30      	pop	{r4, r5, pc}
 8007fa2:	bf00      	nop
 8007fa4:	0800f7e4 	.word	0x0800f7e4

08007fa8 <ai_buffer_get_size>:
 8007fa8:	b378      	cbz	r0, 800800a <ai_buffer_get_size+0x62>
 8007faa:	b410      	push	{r4}
 8007fac:	6803      	ldr	r3, [r0, #0]
 8007fae:	4a17      	ldr	r2, [pc, #92]	; (800800c <ai_buffer_get_size+0x64>)
 8007fb0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007fb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d01e      	beq.n	8007ffa <ai_buffer_get_size+0x52>
 8007fbc:	6984      	ldr	r4, [r0, #24]
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	7d03      	ldrb	r3, [r0, #20]
 8007fc2:	6941      	ldr	r1, [r0, #20]
 8007fc4:	f1a3 0301 	sub.w	r3, r3, #1
 8007fc8:	fab3 f383 	clz	r3, r3
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8007fd2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8007fd6:	da0b      	bge.n	8007ff0 <ai_buffer_get_size+0x48>
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d102      	bne.n	8007fe2 <ai_buffer_get_size+0x3a>
 8007fdc:	2802      	cmp	r0, #2
 8007fde:	d007      	beq.n	8007ff0 <ai_buffer_get_size+0x48>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	4298      	cmp	r0, r3
 8007fea:	fb01 f202 	mul.w	r2, r1, r2
 8007fee:	d1f3      	bne.n	8007fd8 <ai_buffer_get_size+0x30>
 8007ff0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	d0de      	beq.n	8007fbc <ai_buffer_get_size+0x14>
 8007ffe:	6984      	ldr	r4, [r0, #24]
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	331f      	adds	r3, #31
 8008004:	f023 021f 	bic.w	r2, r3, #31
 8008008:	e7da      	b.n	8007fc0 <ai_buffer_get_size+0x18>
 800800a:	4770      	bx	lr
 800800c:	000400c0 	.word	0x000400c0

08008010 <ai_buffer_get_byte_size>:
 8008010:	b128      	cbz	r0, 800801e <ai_buffer_get_byte_size+0xe>
 8008012:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8008016:	fb01 f000 	mul.w	r0, r1, r0
 800801a:	3007      	adds	r0, #7
 800801c:	08c0      	lsrs	r0, r0, #3
 800801e:	4770      	bx	lr

08008020 <ai_buffer_array_sane>:
 8008020:	b138      	cbz	r0, 8008032 <ai_buffer_array_sane+0x12>
 8008022:	6843      	ldr	r3, [r0, #4]
 8008024:	b123      	cbz	r3, 8008030 <ai_buffer_array_sane+0x10>
 8008026:	8840      	ldrh	r0, [r0, #2]
 8008028:	3800      	subs	r0, #0
 800802a:	bf18      	it	ne
 800802c:	2001      	movne	r0, #1
 800802e:	4770      	bx	lr
 8008030:	4618      	mov	r0, r3
 8008032:	4770      	bx	lr

08008034 <ai_buffer_array_item_set_address>:
 8008034:	b150      	cbz	r0, 800804c <ai_buffer_array_item_set_address+0x18>
 8008036:	6843      	ldr	r3, [r0, #4]
 8008038:	b14b      	cbz	r3, 800804e <ai_buffer_array_item_set_address+0x1a>
 800803a:	8840      	ldrh	r0, [r0, #2]
 800803c:	b900      	cbnz	r0, 8008040 <ai_buffer_array_item_set_address+0xc>
 800803e:	4770      	bx	lr
 8008040:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008044:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008048:	2001      	movs	r0, #1
 800804a:	604a      	str	r2, [r1, #4]
 800804c:	4770      	bx	lr
 800804e:	4618      	mov	r0, r3
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop

08008054 <_platform_observer_node_exec_cb>:
 8008054:	2a00      	cmp	r2, #0
 8008056:	d07d      	beq.n	8008154 <_platform_observer_node_exec_cb+0x100>
 8008058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800805c:	6815      	ldr	r5, [r2, #0]
 800805e:	b085      	sub	sp, #20
 8008060:	4614      	mov	r4, r2
 8008062:	2d00      	cmp	r5, #0
 8008064:	d078      	beq.n	8008158 <_platform_observer_node_exec_cb+0x104>
 8008066:	8992      	ldrh	r2, [r2, #12]
 8008068:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 800806c:	2a00      	cmp	r2, #0
 800806e:	460b      	mov	r3, r1
 8008070:	f240 3102 	movw	r1, #770	; 0x302
 8008074:	f240 2e02 	movw	lr, #514	; 0x202
 8008078:	bf08      	it	eq
 800807a:	460e      	moveq	r6, r1
 800807c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008080:	f240 2101 	movw	r1, #513	; 0x201
 8008084:	bf1c      	itt	ne
 8008086:	4676      	movne	r6, lr
 8008088:	f44f 7901 	movne.w	r9, #516	; 0x204
 800808c:	f240 3e01 	movw	lr, #769	; 0x301
 8008090:	bf0e      	itee	eq
 8008092:	f44f 7941 	moveq.w	r9, #772	; 0x304
 8008096:	468e      	movne	lr, r1
 8008098:	f04f 0804 	movne.w	r8, #4
 800809c:	f240 1101 	movw	r1, #257	; 0x101
 80080a0:	bf0d      	iteet	eq
 80080a2:	f44f 7882 	moveq.w	r8, #260	; 0x104
 80080a6:	2101      	movne	r1, #1
 80080a8:	2702      	movne	r7, #2
 80080aa:	f44f 7781 	moveq.w	r7, #258	; 0x102
 80080ae:	4594      	cmp	ip, r2
 80080b0:	d034      	beq.n	800811c <_platform_observer_node_exec_cb+0xc8>
 80080b2:	b300      	cbz	r0, 80080f6 <_platform_observer_node_exec_cb+0xa2>
 80080b4:	2801      	cmp	r0, #1
 80080b6:	d053      	beq.n	8008160 <_platform_observer_node_exec_cb+0x10c>
 80080b8:	2802      	cmp	r0, #2
 80080ba:	d035      	beq.n	8008128 <_platform_observer_node_exec_cb+0xd4>
 80080bc:	2803      	cmp	r0, #3
 80080be:	d116      	bne.n	80080ee <_platform_observer_node_exec_cb+0x9a>
 80080c0:	68a3      	ldr	r3, [r4, #8]
 80080c2:	075b      	lsls	r3, r3, #29
 80080c4:	d511      	bpl.n	80080ea <_platform_observer_node_exec_cb+0x96>
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	f8ad 2000 	strh.w	r2, [sp]
 80080cc:	885a      	ldrh	r2, [r3, #2]
 80080ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	f8ad 2002 	strh.w	r2, [sp, #2]
 80080d8:	699a      	ldr	r2, [r3, #24]
 80080da:	6860      	ldr	r0, [r4, #4]
 80080dc:	2300      	movs	r3, #0
 80080de:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80080e2:	4641      	mov	r1, r8
 80080e4:	466a      	mov	r2, sp
 80080e6:	47a8      	blx	r5
 80080e8:	89a2      	ldrh	r2, [r4, #12]
 80080ea:	3201      	adds	r2, #1
 80080ec:	81a2      	strh	r2, [r4, #12]
 80080ee:	2000      	movs	r0, #0
 80080f0:	b005      	add	sp, #20
 80080f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080f6:	68a6      	ldr	r6, [r4, #8]
 80080f8:	07f6      	lsls	r6, r6, #31
 80080fa:	d5f6      	bpl.n	80080ea <_platform_observer_node_exec_cb+0x96>
 80080fc:	9002      	str	r0, [sp, #8]
 80080fe:	8858      	ldrh	r0, [r3, #2]
 8008100:	f8ad 0004 	strh.w	r0, [sp, #4]
 8008104:	8818      	ldrh	r0, [r3, #0]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f8ad 2000 	strh.w	r2, [sp]
 800810c:	f8ad 0002 	strh.w	r0, [sp, #2]
 8008110:	466a      	mov	r2, sp
 8008112:	6860      	ldr	r0, [r4, #4]
 8008114:	9303      	str	r3, [sp, #12]
 8008116:	47a8      	blx	r5
 8008118:	89a2      	ldrh	r2, [r4, #12]
 800811a:	e7e6      	b.n	80080ea <_platform_observer_node_exec_cb+0x96>
 800811c:	46c8      	mov	r8, r9
 800811e:	4637      	mov	r7, r6
 8008120:	4671      	mov	r1, lr
 8008122:	2800      	cmp	r0, #0
 8008124:	d1c6      	bne.n	80080b4 <_platform_observer_node_exec_cb+0x60>
 8008126:	e7e6      	b.n	80080f6 <_platform_observer_node_exec_cb+0xa2>
 8008128:	68a1      	ldr	r1, [r4, #8]
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	0789      	lsls	r1, r1, #30
 800812e:	d5de      	bpl.n	80080ee <_platform_observer_node_exec_cb+0x9a>
 8008130:	f8ad 2000 	strh.w	r2, [sp]
 8008134:	885a      	ldrh	r2, [r3, #2]
 8008136:	f8ad 2004 	strh.w	r2, [sp, #4]
 800813a:	881a      	ldrh	r2, [r3, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	6860      	ldr	r0, [r4, #4]
 8008140:	f8ad 2002 	strh.w	r2, [sp, #2]
 8008144:	2400      	movs	r4, #0
 8008146:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800814a:	4639      	mov	r1, r7
 800814c:	466a      	mov	r2, sp
 800814e:	47a8      	blx	r5
 8008150:	4620      	mov	r0, r4
 8008152:	e7cd      	b.n	80080f0 <_platform_observer_node_exec_cb+0x9c>
 8008154:	2001      	movs	r0, #1
 8008156:	4770      	bx	lr
 8008158:	2001      	movs	r0, #1
 800815a:	b005      	add	sp, #20
 800815c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008160:	2000      	movs	r0, #0
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	81a0      	strh	r0, [r4, #12]
 8008166:	b005      	add	sp, #20
 8008168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800816c <_ai_platform_acquire_crc>:
 800816c:	2001      	movs	r0, #1
 800816e:	4770      	bx	lr

08008170 <_ai_platform_release_crc>:
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop

08008174 <ai_platform_get_weights_map>:
 8008174:	2a00      	cmp	r2, #0
 8008176:	d037      	beq.n	80081e8 <ai_platform_get_weights_map+0x74>
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	4604      	mov	r4, r0
 800817c:	b1a0      	cbz	r0, 80081a8 <ai_platform_get_weights_map+0x34>
 800817e:	460f      	mov	r7, r1
 8008180:	b191      	cbz	r1, 80081a8 <ai_platform_get_weights_map+0x34>
 8008182:	4b25      	ldr	r3, [pc, #148]	; (8008218 <ai_platform_get_weights_map+0xa4>)
 8008184:	6810      	ldr	r0, [r2, #0]
 8008186:	4298      	cmp	r0, r3
 8008188:	4615      	mov	r5, r2
 800818a:	d00f      	beq.n	80081ac <ai_platform_get_weights_map+0x38>
 800818c:	6855      	ldr	r5, [r2, #4]
 800818e:	b15d      	cbz	r5, 80081a8 <ai_platform_get_weights_map+0x34>
 8008190:	682e      	ldr	r6, [r5, #0]
 8008192:	429e      	cmp	r6, r3
 8008194:	d02a      	beq.n	80081ec <ai_platform_get_weights_map+0x78>
 8008196:	f1a1 0001 	sub.w	r0, r1, #1
 800819a:	6025      	str	r5, [r4, #0]
 800819c:	fab0 f080 	clz	r0, r0
 80081a0:	0940      	lsrs	r0, r0, #5
 80081a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a4:	42a7      	cmp	r7, r4
 80081a6:	d034      	beq.n	8008212 <ai_platform_get_weights_map+0x9e>
 80081a8:	2000      	movs	r0, #0
 80081aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ac:	1d10      	adds	r0, r2, #4
 80081ae:	f7ff ff37 	bl	8008020 <ai_buffer_array_sane>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d0f8      	beq.n	80081a8 <ai_platform_get_weights_map+0x34>
 80081b6:	88eb      	ldrh	r3, [r5, #6]
 80081b8:	429f      	cmp	r7, r3
 80081ba:	d1f5      	bne.n	80081a8 <ai_platform_get_weights_map+0x34>
 80081bc:	f04f 0e00 	mov.w	lr, #0
 80081c0:	1f23      	subs	r3, r4, #4
 80081c2:	4670      	mov	r0, lr
 80081c4:	68aa      	ldr	r2, [r5, #8]
 80081c6:	eb02 0c0e 	add.w	ip, r2, lr
 80081ca:	f10e 0e1c 	add.w	lr, lr, #28
 80081ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80081d2:	b124      	cbz	r4, 80081de <ai_platform_get_weights_map+0x6a>
 80081d4:	3001      	adds	r0, #1
 80081d6:	4287      	cmp	r7, r0
 80081d8:	f843 4f04 	str.w	r4, [r3, #4]!
 80081dc:	d1f2      	bne.n	80081c4 <ai_platform_get_weights_map+0x50>
 80081de:	1a38      	subs	r0, r7, r0
 80081e0:	fab0 f080 	clz	r0, r0
 80081e4:	0940      	lsrs	r0, r0, #5
 80081e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e8:	2000      	movs	r0, #0
 80081ea:	4770      	bx	lr
 80081ec:	1f23      	subs	r3, r4, #4
 80081ee:	4628      	mov	r0, r5
 80081f0:	2400      	movs	r4, #0
 80081f2:	e000      	b.n	80081f6 <ai_platform_get_weights_map+0x82>
 80081f4:	4614      	mov	r4, r2
 80081f6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80081fa:	42b2      	cmp	r2, r6
 80081fc:	d0d2      	beq.n	80081a4 <ai_platform_get_weights_map+0x30>
 80081fe:	f843 2f04 	str.w	r2, [r3, #4]!
 8008202:	1c62      	adds	r2, r4, #1
 8008204:	4297      	cmp	r7, r2
 8008206:	d1f5      	bne.n	80081f4 <ai_platform_get_weights_map+0x80>
 8008208:	3402      	adds	r4, #2
 800820a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800820e:	42b3      	cmp	r3, r6
 8008210:	d1ca      	bne.n	80081a8 <ai_platform_get_weights_map+0x34>
 8008212:	2001      	movs	r0, #1
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008216:	bf00      	nop
 8008218:	a1facade 	.word	0xa1facade

0800821c <ai_platform_get_activations_map>:
 800821c:	2a00      	cmp	r2, #0
 800821e:	d038      	beq.n	8008292 <ai_platform_get_activations_map+0x76>
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	4604      	mov	r4, r0
 8008224:	b1a0      	cbz	r0, 8008250 <ai_platform_get_activations_map+0x34>
 8008226:	460f      	mov	r7, r1
 8008228:	b191      	cbz	r1, 8008250 <ai_platform_get_activations_map+0x34>
 800822a:	4b25      	ldr	r3, [pc, #148]	; (80082c0 <ai_platform_get_activations_map+0xa4>)
 800822c:	6810      	ldr	r0, [r2, #0]
 800822e:	4298      	cmp	r0, r3
 8008230:	4615      	mov	r5, r2
 8008232:	d00f      	beq.n	8008254 <ai_platform_get_activations_map+0x38>
 8008234:	6a15      	ldr	r5, [r2, #32]
 8008236:	b15d      	cbz	r5, 8008250 <ai_platform_get_activations_map+0x34>
 8008238:	682e      	ldr	r6, [r5, #0]
 800823a:	429e      	cmp	r6, r3
 800823c:	d02b      	beq.n	8008296 <ai_platform_get_activations_map+0x7a>
 800823e:	f1a1 0001 	sub.w	r0, r1, #1
 8008242:	6025      	str	r5, [r4, #0]
 8008244:	fab0 f080 	clz	r0, r0
 8008248:	0940      	lsrs	r0, r0, #5
 800824a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800824c:	42a7      	cmp	r7, r4
 800824e:	d035      	beq.n	80082bc <ai_platform_get_activations_map+0xa0>
 8008250:	2000      	movs	r0, #0
 8008252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008254:	f102 000c 	add.w	r0, r2, #12
 8008258:	f7ff fee2 	bl	8008020 <ai_buffer_array_sane>
 800825c:	2800      	cmp	r0, #0
 800825e:	d0f7      	beq.n	8008250 <ai_platform_get_activations_map+0x34>
 8008260:	89eb      	ldrh	r3, [r5, #14]
 8008262:	429f      	cmp	r7, r3
 8008264:	d1f4      	bne.n	8008250 <ai_platform_get_activations_map+0x34>
 8008266:	f04f 0e00 	mov.w	lr, #0
 800826a:	1f23      	subs	r3, r4, #4
 800826c:	4670      	mov	r0, lr
 800826e:	692a      	ldr	r2, [r5, #16]
 8008270:	eb02 0c0e 	add.w	ip, r2, lr
 8008274:	f10e 0e1c 	add.w	lr, lr, #28
 8008278:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800827c:	b124      	cbz	r4, 8008288 <ai_platform_get_activations_map+0x6c>
 800827e:	3001      	adds	r0, #1
 8008280:	4287      	cmp	r7, r0
 8008282:	f843 4f04 	str.w	r4, [r3, #4]!
 8008286:	d1f2      	bne.n	800826e <ai_platform_get_activations_map+0x52>
 8008288:	1a38      	subs	r0, r7, r0
 800828a:	fab0 f080 	clz	r0, r0
 800828e:	0940      	lsrs	r0, r0, #5
 8008290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008292:	2000      	movs	r0, #0
 8008294:	4770      	bx	lr
 8008296:	1f23      	subs	r3, r4, #4
 8008298:	4628      	mov	r0, r5
 800829a:	2400      	movs	r4, #0
 800829c:	e000      	b.n	80082a0 <ai_platform_get_activations_map+0x84>
 800829e:	4614      	mov	r4, r2
 80082a0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80082a4:	42b2      	cmp	r2, r6
 80082a6:	d0d1      	beq.n	800824c <ai_platform_get_activations_map+0x30>
 80082a8:	f843 2f04 	str.w	r2, [r3, #4]!
 80082ac:	1c62      	adds	r2, r4, #1
 80082ae:	4297      	cmp	r7, r2
 80082b0:	d1f5      	bne.n	800829e <ai_platform_get_activations_map+0x82>
 80082b2:	3402      	adds	r4, #2
 80082b4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80082b8:	42b3      	cmp	r3, r6
 80082ba:	d1c9      	bne.n	8008250 <ai_platform_get_activations_map+0x34>
 80082bc:	2001      	movs	r0, #1
 80082be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c0:	a1facade 	.word	0xa1facade

080082c4 <ai_platform_bind_network_params>:
 80082c4:	b1a0      	cbz	r0, 80082f0 <ai_platform_bind_network_params+0x2c>
 80082c6:	b1b1      	cbz	r1, 80082f6 <ai_platform_bind_network_params+0x32>
 80082c8:	b1c2      	cbz	r2, 80082fc <ai_platform_bind_network_params+0x38>
 80082ca:	b410      	push	{r4}
 80082cc:	4603      	mov	r3, r0
 80082ce:	4c0d      	ldr	r4, [pc, #52]	; (8008304 <ai_platform_bind_network_params+0x40>)
 80082d0:	f843 4b04 	str.w	r4, [r3], #4
 80082d4:	f100 0c0c 	add.w	ip, r0, #12
 80082d8:	c903      	ldmia	r1, {r0, r1}
 80082da:	e883 0003 	stmia.w	r3, {r0, r1}
 80082de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80082e6:	2301      	movs	r3, #1
 80082e8:	4618      	mov	r0, r3
 80082ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	4603      	mov	r3, r0
 80082f2:	4618      	mov	r0, r3
 80082f4:	4770      	bx	lr
 80082f6:	460b      	mov	r3, r1
 80082f8:	4618      	mov	r0, r3
 80082fa:	4770      	bx	lr
 80082fc:	4613      	mov	r3, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	a1facade 	.word	0xa1facade

08008308 <ai_platform_runtime_get_revision>:
 8008308:	b508      	push	{r3, lr}
 800830a:	4a18      	ldr	r2, [pc, #96]	; (800836c <ai_platform_runtime_get_revision+0x64>)
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	f7ff ff2a 	bl	800816c <_ai_platform_acquire_crc>
 8008318:	4b15      	ldr	r3, [pc, #84]	; (8008370 <ai_platform_runtime_get_revision+0x68>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008324:	d010      	beq.n	8008348 <ai_platform_runtime_get_revision+0x40>
 8008326:	4a13      	ldr	r2, [pc, #76]	; (8008374 <ai_platform_runtime_get_revision+0x6c>)
 8008328:	2301      	movs	r3, #1
 800832a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800832e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1fb      	bne.n	800832e <ai_platform_runtime_get_revision+0x26>
 8008336:	4b10      	ldr	r3, [pc, #64]	; (8008378 <ai_platform_runtime_get_revision+0x70>)
 8008338:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800833c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008340:	4b0e      	ldr	r3, [pc, #56]	; (800837c <ai_platform_runtime_get_revision+0x74>)
 8008342:	429a      	cmp	r2, r3
 8008344:	d00c      	beq.n	8008360 <ai_platform_runtime_get_revision+0x58>
 8008346:	e7fe      	b.n	8008346 <ai_platform_runtime_get_revision+0x3e>
 8008348:	4a0d      	ldr	r2, [pc, #52]	; (8008380 <ai_platform_runtime_get_revision+0x78>)
 800834a:	2301      	movs	r3, #1
 800834c:	6093      	str	r3, [r2, #8]
 800834e:	6893      	ldr	r3, [r2, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1fc      	bne.n	800834e <ai_platform_runtime_get_revision+0x46>
 8008354:	4b08      	ldr	r3, [pc, #32]	; (8008378 <ai_platform_runtime_get_revision+0x70>)
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	4b08      	ldr	r3, [pc, #32]	; (800837c <ai_platform_runtime_get_revision+0x74>)
 800835c:	429a      	cmp	r2, r3
 800835e:	d103      	bne.n	8008368 <ai_platform_runtime_get_revision+0x60>
 8008360:	f7ff ff06 	bl	8008170 <_ai_platform_release_crc>
 8008364:	4807      	ldr	r0, [pc, #28]	; (8008384 <ai_platform_runtime_get_revision+0x7c>)
 8008366:	bd08      	pop	{r3, pc}
 8008368:	e7fe      	b.n	8008368 <ai_platform_runtime_get_revision+0x60>
 800836a:	bf00      	nop
 800836c:	e0002000 	.word	0xe0002000
 8008370:	e0042000 	.word	0xe0042000
 8008374:	58024000 	.word	0x58024000
 8008378:	f407a5c2 	.word	0xf407a5c2
 800837c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008380:	40023000 	.word	0x40023000
 8008384:	080a8614 	.word	0x080a8614

08008388 <ai_platform_runtime_get_version>:
 8008388:	b500      	push	{lr}
 800838a:	4a21      	ldr	r2, [pc, #132]	; (8008410 <ai_platform_runtime_get_version+0x88>)
 800838c:	6813      	ldr	r3, [r2, #0]
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	b083      	sub	sp, #12
 8008396:	f7ff fee9 	bl	800816c <_ai_platform_acquire_crc>
 800839a:	4b1e      	ldr	r3, [pc, #120]	; (8008414 <ai_platform_runtime_get_version+0x8c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a6:	d010      	beq.n	80083ca <ai_platform_runtime_get_version+0x42>
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <ai_platform_runtime_get_version+0x90>)
 80083aa:	2301      	movs	r3, #1
 80083ac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80083b0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1fb      	bne.n	80083b0 <ai_platform_runtime_get_version+0x28>
 80083b8:	4b18      	ldr	r3, [pc, #96]	; (800841c <ai_platform_runtime_get_version+0x94>)
 80083ba:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80083be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80083c2:	4b17      	ldr	r3, [pc, #92]	; (8008420 <ai_platform_runtime_get_version+0x98>)
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d00c      	beq.n	80083e2 <ai_platform_runtime_get_version+0x5a>
 80083c8:	e7fe      	b.n	80083c8 <ai_platform_runtime_get_version+0x40>
 80083ca:	4a16      	ldr	r2, [pc, #88]	; (8008424 <ai_platform_runtime_get_version+0x9c>)
 80083cc:	2301      	movs	r3, #1
 80083ce:	6093      	str	r3, [r2, #8]
 80083d0:	6893      	ldr	r3, [r2, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1fc      	bne.n	80083d0 <ai_platform_runtime_get_version+0x48>
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <ai_platform_runtime_get_version+0x94>)
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	6812      	ldr	r2, [r2, #0]
 80083dc:	4b10      	ldr	r3, [pc, #64]	; (8008420 <ai_platform_runtime_get_version+0x98>)
 80083de:	429a      	cmp	r2, r3
 80083e0:	d115      	bne.n	800840e <ai_platform_runtime_get_version+0x86>
 80083e2:	f7ff fec5 	bl	8008170 <_ai_platform_release_crc>
 80083e6:	4b10      	ldr	r3, [pc, #64]	; (8008428 <ai_platform_runtime_get_version+0xa0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2000      	movs	r0, #0
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	f362 0007 	bfi	r0, r2, #0, #8
 80083f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80083f6:	f362 200f 	bfi	r0, r2, #8, #8
 80083fa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80083fe:	f362 4017 	bfi	r0, r2, #16, #8
 8008402:	0e1b      	lsrs	r3, r3, #24
 8008404:	f363 601f 	bfi	r0, r3, #24, #8
 8008408:	b003      	add	sp, #12
 800840a:	f85d fb04 	ldr.w	pc, [sp], #4
 800840e:	e7fe      	b.n	800840e <ai_platform_runtime_get_version+0x86>
 8008410:	e0002000 	.word	0xe0002000
 8008414:	e0042000 	.word	0xe0042000
 8008418:	58024000 	.word	0x58024000
 800841c:	f407a5c2 	.word	0xf407a5c2
 8008420:	b5e8b5cd 	.word	0xb5e8b5cd
 8008424:	40023000 	.word	0x40023000
 8008428:	080a85c8 	.word	0x080a85c8

0800842c <ai_platform_api_get_version>:
 800842c:	b500      	push	{lr}
 800842e:	4a21      	ldr	r2, [pc, #132]	; (80084b4 <ai_platform_api_get_version+0x88>)
 8008430:	6813      	ldr	r3, [r2, #0]
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	b083      	sub	sp, #12
 800843a:	f7ff fe97 	bl	800816c <_ai_platform_acquire_crc>
 800843e:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <ai_platform_api_get_version+0x8c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800844a:	d010      	beq.n	800846e <ai_platform_api_get_version+0x42>
 800844c:	4a1b      	ldr	r2, [pc, #108]	; (80084bc <ai_platform_api_get_version+0x90>)
 800844e:	2301      	movs	r3, #1
 8008450:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008454:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1fb      	bne.n	8008454 <ai_platform_api_get_version+0x28>
 800845c:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <ai_platform_api_get_version+0x94>)
 800845e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008462:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008466:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <ai_platform_api_get_version+0x98>)
 8008468:	429a      	cmp	r2, r3
 800846a:	d00c      	beq.n	8008486 <ai_platform_api_get_version+0x5a>
 800846c:	e7fe      	b.n	800846c <ai_platform_api_get_version+0x40>
 800846e:	4a16      	ldr	r2, [pc, #88]	; (80084c8 <ai_platform_api_get_version+0x9c>)
 8008470:	2301      	movs	r3, #1
 8008472:	6093      	str	r3, [r2, #8]
 8008474:	6893      	ldr	r3, [r2, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1fc      	bne.n	8008474 <ai_platform_api_get_version+0x48>
 800847a:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <ai_platform_api_get_version+0x94>)
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <ai_platform_api_get_version+0x98>)
 8008482:	429a      	cmp	r2, r3
 8008484:	d115      	bne.n	80084b2 <ai_platform_api_get_version+0x86>
 8008486:	f7ff fe73 	bl	8008170 <_ai_platform_release_crc>
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <ai_platform_api_get_version+0xa0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2000      	movs	r0, #0
 8008490:	b2da      	uxtb	r2, r3
 8008492:	f362 0007 	bfi	r0, r2, #0, #8
 8008496:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800849a:	f362 200f 	bfi	r0, r2, #8, #8
 800849e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80084a2:	f362 4017 	bfi	r0, r2, #16, #8
 80084a6:	0e1b      	lsrs	r3, r3, #24
 80084a8:	f363 601f 	bfi	r0, r3, #24, #8
 80084ac:	b003      	add	sp, #12
 80084ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80084b2:	e7fe      	b.n	80084b2 <ai_platform_api_get_version+0x86>
 80084b4:	e0002000 	.word	0xe0002000
 80084b8:	e0042000 	.word	0xe0042000
 80084bc:	58024000 	.word	0x58024000
 80084c0:	f407a5c2 	.word	0xf407a5c2
 80084c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80084c8:	40023000 	.word	0x40023000
 80084cc:	080a85cc 	.word	0x080a85cc

080084d0 <ai_platform_interface_api_get_version>:
 80084d0:	b500      	push	{lr}
 80084d2:	4a21      	ldr	r2, [pc, #132]	; (8008558 <ai_platform_interface_api_get_version+0x88>)
 80084d4:	6813      	ldr	r3, [r2, #0]
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	b083      	sub	sp, #12
 80084de:	f7ff fe45 	bl	800816c <_ai_platform_acquire_crc>
 80084e2:	4b1e      	ldr	r3, [pc, #120]	; (800855c <ai_platform_interface_api_get_version+0x8c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ee:	d010      	beq.n	8008512 <ai_platform_interface_api_get_version+0x42>
 80084f0:	4a1b      	ldr	r2, [pc, #108]	; (8008560 <ai_platform_interface_api_get_version+0x90>)
 80084f2:	2301      	movs	r3, #1
 80084f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80084f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1fb      	bne.n	80084f8 <ai_platform_interface_api_get_version+0x28>
 8008500:	4b18      	ldr	r3, [pc, #96]	; (8008564 <ai_platform_interface_api_get_version+0x94>)
 8008502:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008506:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800850a:	4b17      	ldr	r3, [pc, #92]	; (8008568 <ai_platform_interface_api_get_version+0x98>)
 800850c:	429a      	cmp	r2, r3
 800850e:	d00c      	beq.n	800852a <ai_platform_interface_api_get_version+0x5a>
 8008510:	e7fe      	b.n	8008510 <ai_platform_interface_api_get_version+0x40>
 8008512:	4a16      	ldr	r2, [pc, #88]	; (800856c <ai_platform_interface_api_get_version+0x9c>)
 8008514:	2301      	movs	r3, #1
 8008516:	6093      	str	r3, [r2, #8]
 8008518:	6893      	ldr	r3, [r2, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1fc      	bne.n	8008518 <ai_platform_interface_api_get_version+0x48>
 800851e:	4b11      	ldr	r3, [pc, #68]	; (8008564 <ai_platform_interface_api_get_version+0x94>)
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	4b10      	ldr	r3, [pc, #64]	; (8008568 <ai_platform_interface_api_get_version+0x98>)
 8008526:	429a      	cmp	r2, r3
 8008528:	d115      	bne.n	8008556 <ai_platform_interface_api_get_version+0x86>
 800852a:	f7ff fe21 	bl	8008170 <_ai_platform_release_crc>
 800852e:	4b10      	ldr	r3, [pc, #64]	; (8008570 <ai_platform_interface_api_get_version+0xa0>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2000      	movs	r0, #0
 8008534:	b2da      	uxtb	r2, r3
 8008536:	f362 0007 	bfi	r0, r2, #0, #8
 800853a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800853e:	f362 200f 	bfi	r0, r2, #8, #8
 8008542:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008546:	f362 4017 	bfi	r0, r2, #16, #8
 800854a:	0e1b      	lsrs	r3, r3, #24
 800854c:	f363 601f 	bfi	r0, r3, #24, #8
 8008550:	b003      	add	sp, #12
 8008552:	f85d fb04 	ldr.w	pc, [sp], #4
 8008556:	e7fe      	b.n	8008556 <ai_platform_interface_api_get_version+0x86>
 8008558:	e0002000 	.word	0xe0002000
 800855c:	e0042000 	.word	0xe0042000
 8008560:	58024000 	.word	0x58024000
 8008564:	f407a5c2 	.word	0xf407a5c2
 8008568:	b5e8b5cd 	.word	0xb5e8b5cd
 800856c:	40023000 	.word	0x40023000
 8008570:	080a85d0 	.word	0x080a85d0

08008574 <ai_platform_context_acquire>:
 8008574:	b510      	push	{r4, lr}
 8008576:	4604      	mov	r4, r0
 8008578:	b120      	cbz	r0, 8008584 <ai_platform_context_acquire+0x10>
 800857a:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <ai_platform_context_acquire+0x70>)
 800857c:	6802      	ldr	r2, [r0, #0]
 800857e:	429a      	cmp	r2, r3
 8008580:	bf18      	it	ne
 8008582:	2400      	movne	r4, #0
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <ai_platform_context_acquire+0x74>)
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	f7ff fded 	bl	800816c <_ai_platform_acquire_crc>
 8008592:	4b16      	ldr	r3, [pc, #88]	; (80085ec <ai_platform_context_acquire+0x78>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800859a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859e:	d010      	beq.n	80085c2 <ai_platform_context_acquire+0x4e>
 80085a0:	4a13      	ldr	r2, [pc, #76]	; (80085f0 <ai_platform_context_acquire+0x7c>)
 80085a2:	2301      	movs	r3, #1
 80085a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80085a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1fb      	bne.n	80085a8 <ai_platform_context_acquire+0x34>
 80085b0:	4b10      	ldr	r3, [pc, #64]	; (80085f4 <ai_platform_context_acquire+0x80>)
 80085b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80085b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80085ba:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <ai_platform_context_acquire+0x84>)
 80085bc:	429a      	cmp	r2, r3
 80085be:	d00c      	beq.n	80085da <ai_platform_context_acquire+0x66>
 80085c0:	e7fe      	b.n	80085c0 <ai_platform_context_acquire+0x4c>
 80085c2:	4a0e      	ldr	r2, [pc, #56]	; (80085fc <ai_platform_context_acquire+0x88>)
 80085c4:	2301      	movs	r3, #1
 80085c6:	6093      	str	r3, [r2, #8]
 80085c8:	6893      	ldr	r3, [r2, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1fc      	bne.n	80085c8 <ai_platform_context_acquire+0x54>
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <ai_platform_context_acquire+0x80>)
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	6812      	ldr	r2, [r2, #0]
 80085d4:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <ai_platform_context_acquire+0x84>)
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d103      	bne.n	80085e2 <ai_platform_context_acquire+0x6e>
 80085da:	f7ff fdc9 	bl	8008170 <_ai_platform_release_crc>
 80085de:	4620      	mov	r0, r4
 80085e0:	bd10      	pop	{r4, pc}
 80085e2:	e7fe      	b.n	80085e2 <ai_platform_context_acquire+0x6e>
 80085e4:	a1c00100 	.word	0xa1c00100
 80085e8:	e0002000 	.word	0xe0002000
 80085ec:	e0042000 	.word	0xe0042000
 80085f0:	58024000 	.word	0x58024000
 80085f4:	f407a5c2 	.word	0xf407a5c2
 80085f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80085fc:	40023000 	.word	0x40023000

08008600 <ai_platform_network_get_error>:
 8008600:	b510      	push	{r4, lr}
 8008602:	b318      	cbz	r0, 800864c <ai_platform_network_get_error+0x4c>
 8008604:	4b34      	ldr	r3, [pc, #208]	; (80086d8 <ai_platform_network_get_error+0xd8>)
 8008606:	6802      	ldr	r2, [r0, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	4604      	mov	r4, r0
 800860c:	d11e      	bne.n	800864c <ai_platform_network_get_error+0x4c>
 800860e:	4a33      	ldr	r2, [pc, #204]	; (80086dc <ai_platform_network_get_error+0xdc>)
 8008610:	6813      	ldr	r3, [r2, #0]
 8008612:	f023 0301 	bic.w	r3, r3, #1
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	f7ff fda8 	bl	800816c <_ai_platform_acquire_crc>
 800861c:	4b30      	ldr	r3, [pc, #192]	; (80086e0 <ai_platform_network_get_error+0xe0>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008628:	d041      	beq.n	80086ae <ai_platform_network_get_error+0xae>
 800862a:	4a2e      	ldr	r2, [pc, #184]	; (80086e4 <ai_platform_network_get_error+0xe4>)
 800862c:	2301      	movs	r3, #1
 800862e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008632:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1fb      	bne.n	8008632 <ai_platform_network_get_error+0x32>
 800863a:	4b2b      	ldr	r3, [pc, #172]	; (80086e8 <ai_platform_network_get_error+0xe8>)
 800863c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008640:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008644:	4b29      	ldr	r3, [pc, #164]	; (80086ec <ai_platform_network_get_error+0xec>)
 8008646:	429a      	cmp	r2, r3
 8008648:	d03d      	beq.n	80086c6 <ai_platform_network_get_error+0xc6>
 800864a:	e7fe      	b.n	800864a <ai_platform_network_get_error+0x4a>
 800864c:	4a23      	ldr	r2, [pc, #140]	; (80086dc <ai_platform_network_get_error+0xdc>)
 800864e:	6813      	ldr	r3, [r2, #0]
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	f7ff fd89 	bl	800816c <_ai_platform_acquire_crc>
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <ai_platform_network_get_error+0xe0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008666:	d010      	beq.n	800868a <ai_platform_network_get_error+0x8a>
 8008668:	4a1e      	ldr	r2, [pc, #120]	; (80086e4 <ai_platform_network_get_error+0xe4>)
 800866a:	2301      	movs	r3, #1
 800866c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008670:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1fb      	bne.n	8008670 <ai_platform_network_get_error+0x70>
 8008678:	4b1b      	ldr	r3, [pc, #108]	; (80086e8 <ai_platform_network_get_error+0xe8>)
 800867a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800867e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008682:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <ai_platform_network_get_error+0xec>)
 8008684:	429a      	cmp	r2, r3
 8008686:	d00d      	beq.n	80086a4 <ai_platform_network_get_error+0xa4>
 8008688:	e7fe      	b.n	8008688 <ai_platform_network_get_error+0x88>
 800868a:	4a19      	ldr	r2, [pc, #100]	; (80086f0 <ai_platform_network_get_error+0xf0>)
 800868c:	2301      	movs	r3, #1
 800868e:	6093      	str	r3, [r2, #8]
 8008690:	6893      	ldr	r3, [r2, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1fc      	bne.n	8008690 <ai_platform_network_get_error+0x90>
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <ai_platform_network_get_error+0xe8>)
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	4b13      	ldr	r3, [pc, #76]	; (80086ec <ai_platform_network_get_error+0xec>)
 800869e:	429a      	cmp	r2, r3
 80086a0:	d000      	beq.n	80086a4 <ai_platform_network_get_error+0xa4>
 80086a2:	e7fe      	b.n	80086a2 <ai_platform_network_get_error+0xa2>
 80086a4:	f7ff fd64 	bl	8008170 <_ai_platform_release_crc>
 80086a8:	f241 0010 	movw	r0, #4112	; 0x1010
 80086ac:	bd10      	pop	{r4, pc}
 80086ae:	4a10      	ldr	r2, [pc, #64]	; (80086f0 <ai_platform_network_get_error+0xf0>)
 80086b0:	2301      	movs	r3, #1
 80086b2:	6093      	str	r3, [r2, #8]
 80086b4:	6893      	ldr	r3, [r2, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1fc      	bne.n	80086b4 <ai_platform_network_get_error+0xb4>
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <ai_platform_network_get_error+0xe8>)
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	6812      	ldr	r2, [r2, #0]
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <ai_platform_network_get_error+0xec>)
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d107      	bne.n	80086d6 <ai_platform_network_get_error+0xd6>
 80086c6:	f7ff fd53 	bl	8008170 <_ai_platform_release_crc>
 80086ca:	f104 0010 	add.w	r0, r4, #16
 80086ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d2:	f001 bcc5 	b.w	800a060 <core_get_error>
 80086d6:	e7fe      	b.n	80086d6 <ai_platform_network_get_error+0xd6>
 80086d8:	a1c00100 	.word	0xa1c00100
 80086dc:	e0002000 	.word	0xe0002000
 80086e0:	e0042000 	.word	0xe0042000
 80086e4:	58024000 	.word	0x58024000
 80086e8:	f407a5c2 	.word	0xf407a5c2
 80086ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80086f0:	40023000 	.word	0x40023000

080086f4 <ai_platform_network_set_error>:
 80086f4:	b110      	cbz	r0, 80086fc <ai_platform_network_set_error+0x8>
 80086f6:	3010      	adds	r0, #16
 80086f8:	f001 bcb8 	b.w	800a06c <core_set_error>
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop

08008700 <ai_platform_api_get_network_report>:
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	b087      	sub	sp, #28
 8008706:	b320      	cbz	r0, 8008752 <ai_platform_api_get_network_report+0x52>
 8008708:	4b98      	ldr	r3, [pc, #608]	; (800896c <ai_platform_api_get_network_report+0x26c>)
 800870a:	6802      	ldr	r2, [r0, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	4607      	mov	r7, r0
 8008710:	d11f      	bne.n	8008752 <ai_platform_api_get_network_report+0x52>
 8008712:	4a97      	ldr	r2, [pc, #604]	; (8008970 <ai_platform_api_get_network_report+0x270>)
 8008714:	6813      	ldr	r3, [r2, #0]
 8008716:	f023 0301 	bic.w	r3, r3, #1
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	468b      	mov	fp, r1
 800871e:	f7ff fd25 	bl	800816c <_ai_platform_acquire_crc>
 8008722:	4b94      	ldr	r3, [pc, #592]	; (8008974 <ai_platform_api_get_network_report+0x274>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872e:	d043      	beq.n	80087b8 <ai_platform_api_get_network_report+0xb8>
 8008730:	4a91      	ldr	r2, [pc, #580]	; (8008978 <ai_platform_api_get_network_report+0x278>)
 8008732:	2301      	movs	r3, #1
 8008734:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008738:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1fb      	bne.n	8008738 <ai_platform_api_get_network_report+0x38>
 8008740:	4b8e      	ldr	r3, [pc, #568]	; (800897c <ai_platform_api_get_network_report+0x27c>)
 8008742:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008746:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800874a:	4b8d      	ldr	r3, [pc, #564]	; (8008980 <ai_platform_api_get_network_report+0x280>)
 800874c:	429a      	cmp	r2, r3
 800874e:	d03f      	beq.n	80087d0 <ai_platform_api_get_network_report+0xd0>
 8008750:	e7fe      	b.n	8008750 <ai_platform_api_get_network_report+0x50>
 8008752:	4a87      	ldr	r2, [pc, #540]	; (8008970 <ai_platform_api_get_network_report+0x270>)
 8008754:	6813      	ldr	r3, [r2, #0]
 8008756:	f023 0301 	bic.w	r3, r3, #1
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	f7ff fd06 	bl	800816c <_ai_platform_acquire_crc>
 8008760:	4b84      	ldr	r3, [pc, #528]	; (8008974 <ai_platform_api_get_network_report+0x274>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876c:	d010      	beq.n	8008790 <ai_platform_api_get_network_report+0x90>
 800876e:	4a82      	ldr	r2, [pc, #520]	; (8008978 <ai_platform_api_get_network_report+0x278>)
 8008770:	2301      	movs	r3, #1
 8008772:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008776:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1fb      	bne.n	8008776 <ai_platform_api_get_network_report+0x76>
 800877e:	4b7f      	ldr	r3, [pc, #508]	; (800897c <ai_platform_api_get_network_report+0x27c>)
 8008780:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008784:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008788:	4b7d      	ldr	r3, [pc, #500]	; (8008980 <ai_platform_api_get_network_report+0x280>)
 800878a:	429a      	cmp	r2, r3
 800878c:	d00d      	beq.n	80087aa <ai_platform_api_get_network_report+0xaa>
 800878e:	e7fe      	b.n	800878e <ai_platform_api_get_network_report+0x8e>
 8008790:	4a7c      	ldr	r2, [pc, #496]	; (8008984 <ai_platform_api_get_network_report+0x284>)
 8008792:	2301      	movs	r3, #1
 8008794:	6093      	str	r3, [r2, #8]
 8008796:	6893      	ldr	r3, [r2, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1fc      	bne.n	8008796 <ai_platform_api_get_network_report+0x96>
 800879c:	4b77      	ldr	r3, [pc, #476]	; (800897c <ai_platform_api_get_network_report+0x27c>)
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	6812      	ldr	r2, [r2, #0]
 80087a2:	4b77      	ldr	r3, [pc, #476]	; (8008980 <ai_platform_api_get_network_report+0x280>)
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d000      	beq.n	80087aa <ai_platform_api_get_network_report+0xaa>
 80087a8:	e7fe      	b.n	80087a8 <ai_platform_api_get_network_report+0xa8>
 80087aa:	f7ff fce1 	bl	8008170 <_ai_platform_release_crc>
 80087ae:	2400      	movs	r4, #0
 80087b0:	4620      	mov	r0, r4
 80087b2:	b007      	add	sp, #28
 80087b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b8:	4a72      	ldr	r2, [pc, #456]	; (8008984 <ai_platform_api_get_network_report+0x284>)
 80087ba:	2301      	movs	r3, #1
 80087bc:	6093      	str	r3, [r2, #8]
 80087be:	6893      	ldr	r3, [r2, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1fc      	bne.n	80087be <ai_platform_api_get_network_report+0xbe>
 80087c4:	4b6d      	ldr	r3, [pc, #436]	; (800897c <ai_platform_api_get_network_report+0x27c>)
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	4b6d      	ldr	r3, [pc, #436]	; (8008980 <ai_platform_api_get_network_report+0x280>)
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d112      	bne.n	80087f6 <ai_platform_api_get_network_report+0xf6>
 80087d0:	f7ff fcce 	bl	8008170 <_ai_platform_release_crc>
 80087d4:	f1bb 0f00 	cmp.w	fp, #0
 80087d8:	d0e9      	beq.n	80087ae <ai_platform_api_get_network_report+0xae>
 80087da:	2400      	movs	r4, #0
 80087dc:	f8cb 4074 	str.w	r4, [fp, #116]	; 0x74
 80087e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e2:	b14b      	cbz	r3, 80087f8 <ai_platform_api_get_network_report+0xf8>
 80087e4:	3401      	adds	r4, #1
 80087e6:	f8cb 4074 	str.w	r4, [fp, #116]	; 0x74
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d003      	beq.n	80087f8 <ai_platform_api_get_network_report+0xf8>
 80087f0:	b112      	cbz	r2, 80087f8 <ai_platform_api_get_network_report+0xf8>
 80087f2:	4613      	mov	r3, r2
 80087f4:	e7f5      	b.n	80087e2 <ai_platform_api_get_network_report+0xe2>
 80087f6:	e7fe      	b.n	80087f6 <ai_platform_api_get_network_report+0xf6>
 80087f8:	2c00      	cmp	r4, #0
 80087fa:	f000 81a4 	beq.w	8008b46 <ai_platform_api_get_network_report+0x446>
 80087fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d04e      	beq.n	80088a2 <ai_platform_api_get_network_report+0x1a2>
 8008804:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8008808:	f1b9 0f00 	cmp.w	r9, #0
 800880c:	d049      	beq.n	80088a2 <ai_platform_api_get_network_report+0x1a2>
 800880e:	f04f 0a00 	mov.w	sl, #0
 8008812:	e9cd 7b00 	strd	r7, fp, [sp]
 8008816:	4655      	mov	r5, sl
 8008818:	e016      	b.n	8008848 <ai_platform_api_get_network_report+0x148>
 800881a:	2101      	movs	r1, #1
 800881c:	f847 100e 	str.w	r1, [r7, lr]
 8008820:	69b1      	ldr	r1, [r6, #24]
 8008822:	6849      	ldr	r1, [r1, #4]
 8008824:	60a3      	str	r3, [r4, #8]
 8008826:	f04f 0301 	mov.w	r3, #1
 800882a:	7523      	strb	r3, [r4, #20]
 800882c:	2300      	movs	r3, #0
 800882e:	60e3      	str	r3, [r4, #12]
 8008830:	6963      	ldr	r3, [r4, #20]
 8008832:	6121      	str	r1, [r4, #16]
 8008834:	e9c4 0200 	strd	r0, r2, [r4]
 8008838:	f368 231f 	bfi	r3, r8, #8, #24
 800883c:	f8c4 b018 	str.w	fp, [r4, #24]
 8008840:	3501      	adds	r5, #1
 8008842:	f10a 0a1c 	add.w	sl, sl, #28
 8008846:	6163      	str	r3, [r4, #20]
 8008848:	f8b9 3000 	ldrh.w	r3, [r9]
 800884c:	42ab      	cmp	r3, r5
 800884e:	b2aa      	uxth	r2, r5
 8008850:	d931      	bls.n	80088b6 <ai_platform_api_get_network_report+0x1b6>
 8008852:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008856:	b373      	cbz	r3, 80088b6 <ai_platform_api_get_network_report+0x1b6>
 8008858:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800885c:	b35e      	cbz	r6, 80088b6 <ai_platform_api_get_network_report+0x1b6>
 800885e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008862:	69b2      	ldr	r2, [r6, #24]
 8008864:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8008868:	6810      	ldr	r0, [r2, #0]
 800886a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800886e:	68b3      	ldr	r3, [r6, #8]
 8008870:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8008874:	f002 fe2c 	bl	800b4d0 <ai_array_to_buffer_fmt>
 8008878:	69b1      	ldr	r1, [r6, #24]
 800887a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800887e:	688a      	ldr	r2, [r1, #8]
 8008880:	4454      	add	r4, sl
 8008882:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0cb      	beq.n	8008822 <ai_platform_api_get_network_report+0x122>
 800888a:	2100      	movs	r1, #0
 800888c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8008890:	6831      	ldr	r1, [r6, #0]
 8008892:	6059      	str	r1, [r3, #4]
 8008894:	b111      	cbz	r1, 800889c <ai_platform_api_get_network_report+0x19c>
 8008896:	8849      	ldrh	r1, [r1, #2]
 8008898:	2900      	cmp	r1, #0
 800889a:	d1be      	bne.n	800881a <ai_platform_api_get_network_report+0x11a>
 800889c:	69b1      	ldr	r1, [r6, #24]
 800889e:	2300      	movs	r3, #0
 80088a0:	e7bf      	b.n	8008822 <ai_platform_api_get_network_report+0x122>
 80088a2:	2400      	movs	r4, #0
 80088a4:	f8ab 4030 	strh.w	r4, [fp, #48]	; 0x30
 80088a8:	2218      	movs	r2, #24
 80088aa:	2112      	movs	r1, #18
 80088ac:	f107 0010 	add.w	r0, r7, #16
 80088b0:	f001 fbdc 	bl	800a06c <core_set_error>
 80088b4:	e77c      	b.n	80087b0 <ai_platform_api_get_network_report+0xb0>
 80088b6:	e9dd 7b00 	ldrd	r7, fp, [sp]
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	d0f1      	beq.n	80088a2 <ai_platform_api_get_network_report+0x1a2>
 80088be:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80088c8:	f8ab 2030 	strh.w	r2, [fp, #48]	; 0x30
 80088cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	f240 8140 	bls.w	8008b54 <ai_platform_api_get_network_report+0x454>
 80088d4:	f04f 0a00 	mov.w	sl, #0
 80088d8:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80088dc:	4655      	mov	r5, sl
 80088de:	e016      	b.n	800890e <ai_platform_api_get_network_report+0x20e>
 80088e0:	2101      	movs	r1, #1
 80088e2:	f847 100e 	str.w	r1, [r7, lr]
 80088e6:	69b1      	ldr	r1, [r6, #24]
 80088e8:	6849      	ldr	r1, [r1, #4]
 80088ea:	60a3      	str	r3, [r4, #8]
 80088ec:	f04f 0301 	mov.w	r3, #1
 80088f0:	7523      	strb	r3, [r4, #20]
 80088f2:	2300      	movs	r3, #0
 80088f4:	60e3      	str	r3, [r4, #12]
 80088f6:	6963      	ldr	r3, [r4, #20]
 80088f8:	6121      	str	r1, [r4, #16]
 80088fa:	e9c4 0200 	strd	r0, r2, [r4]
 80088fe:	f368 231f 	bfi	r3, r8, #8, #24
 8008902:	f8c4 b018 	str.w	fp, [r4, #24]
 8008906:	3501      	adds	r5, #1
 8008908:	f10a 0a1c 	add.w	sl, sl, #28
 800890c:	6163      	str	r3, [r4, #20]
 800890e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008912:	42ab      	cmp	r3, r5
 8008914:	b2aa      	uxth	r2, r5
 8008916:	d937      	bls.n	8008988 <ai_platform_api_get_network_report+0x288>
 8008918:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d033      	beq.n	8008988 <ai_platform_api_get_network_report+0x288>
 8008920:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8008924:	2e00      	cmp	r6, #0
 8008926:	d02f      	beq.n	8008988 <ai_platform_api_get_network_report+0x288>
 8008928:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800892c:	69b2      	ldr	r2, [r6, #24]
 800892e:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8008932:	6810      	ldr	r0, [r2, #0]
 8008934:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8008938:	68b3      	ldr	r3, [r6, #8]
 800893a:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800893e:	f002 fdc7 	bl	800b4d0 <ai_array_to_buffer_fmt>
 8008942:	69b1      	ldr	r1, [r6, #24]
 8008944:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8008948:	688a      	ldr	r2, [r1, #8]
 800894a:	4454      	add	r4, sl
 800894c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0c9      	beq.n	80088e8 <ai_platform_api_get_network_report+0x1e8>
 8008954:	2100      	movs	r1, #0
 8008956:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800895a:	6831      	ldr	r1, [r6, #0]
 800895c:	6059      	str	r1, [r3, #4]
 800895e:	b111      	cbz	r1, 8008966 <ai_platform_api_get_network_report+0x266>
 8008960:	8849      	ldrh	r1, [r1, #2]
 8008962:	2900      	cmp	r1, #0
 8008964:	d1bc      	bne.n	80088e0 <ai_platform_api_get_network_report+0x1e0>
 8008966:	69b1      	ldr	r1, [r6, #24]
 8008968:	2300      	movs	r3, #0
 800896a:	e7bd      	b.n	80088e8 <ai_platform_api_get_network_report+0x1e8>
 800896c:	a1c00100 	.word	0xa1c00100
 8008970:	e0002000 	.word	0xe0002000
 8008974:	e0042000 	.word	0xe0042000
 8008978:	58024000 	.word	0x58024000
 800897c:	f407a5c2 	.word	0xf407a5c2
 8008980:	b5e8b5cd 	.word	0xb5e8b5cd
 8008984:	40023000 	.word	0x40023000
 8008988:	e9dd 7b00 	ldrd	r7, fp, [sp]
 800898c:	2a00      	cmp	r2, #0
 800898e:	f000 80e1 	beq.w	8008b54 <ai_platform_api_get_network_report+0x454>
 8008992:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008996:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 80089a0:	f8ab 2032 	strh.w	r2, [fp, #50]	; 0x32
 80089a4:	4628      	mov	r0, r5
 80089a6:	f7ff fb3b 	bl	8008020 <ai_buffer_array_sane>
 80089aa:	4604      	mov	r4, r0
 80089ac:	b938      	cbnz	r0, 80089be <ai_platform_api_get_network_report+0x2be>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f7ff fb36 	bl	8008020 <ai_buffer_array_sane>
 80089b4:	b118      	cbz	r0, 80089be <ai_platform_api_get_network_report+0x2be>
 80089b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f040 80d7 	bne.w	8008b6c <ai_platform_api_get_network_report+0x46c>
 80089be:	f107 061c 	add.w	r6, r7, #28
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7ff fb2c 	bl	8008020 <ai_buffer_array_sane>
 80089c8:	4604      	mov	r4, r0
 80089ca:	b938      	cbnz	r0, 80089dc <ai_platform_api_get_network_report+0x2dc>
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff fb27 	bl	8008020 <ai_buffer_array_sane>
 80089d2:	b118      	cbz	r0, 80089dc <ai_platform_api_get_network_report+0x2dc>
 80089d4:	8bfb      	ldrh	r3, [r7, #30]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f040 80cf 	bne.w	8008b7a <ai_platform_api_get_network_report+0x47a>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4aac      	ldr	r2, [pc, #688]	; (8008c90 <ai_platform_api_get_network_report+0x590>)
 80089e0:	f8cb 3078 	str.w	r3, [fp, #120]	; 0x78
 80089e4:	6813      	ldr	r3, [r2, #0]
 80089e6:	f023 0301 	bic.w	r3, r3, #1
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	f7ff fbbe 	bl	800816c <_ai_platform_acquire_crc>
 80089f0:	4ba8      	ldr	r3, [pc, #672]	; (8008c94 <ai_platform_api_get_network_report+0x594>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089fc:	d010      	beq.n	8008a20 <ai_platform_api_get_network_report+0x320>
 80089fe:	4aa6      	ldr	r2, [pc, #664]	; (8008c98 <ai_platform_api_get_network_report+0x598>)
 8008a00:	2301      	movs	r3, #1
 8008a02:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008a06:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1fb      	bne.n	8008a06 <ai_platform_api_get_network_report+0x306>
 8008a0e:	4ba3      	ldr	r3, [pc, #652]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008a10:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008a14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008a18:	4ba1      	ldr	r3, [pc, #644]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d00d      	beq.n	8008a3a <ai_platform_api_get_network_report+0x33a>
 8008a1e:	e7fe      	b.n	8008a1e <ai_platform_api_get_network_report+0x31e>
 8008a20:	4aa0      	ldr	r2, [pc, #640]	; (8008ca4 <ai_platform_api_get_network_report+0x5a4>)
 8008a22:	2301      	movs	r3, #1
 8008a24:	6093      	str	r3, [r2, #8]
 8008a26:	6893      	ldr	r3, [r2, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1fc      	bne.n	8008a26 <ai_platform_api_get_network_report+0x326>
 8008a2c:	4b9b      	ldr	r3, [pc, #620]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	4b9b      	ldr	r3, [pc, #620]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008a34:	429a      	cmp	r2, r3
 8008a36:	f040 8097 	bne.w	8008b68 <ai_platform_api_get_network_report+0x468>
 8008a3a:	f7ff fb99 	bl	8008170 <_ai_platform_release_crc>
 8008a3e:	4a94      	ldr	r2, [pc, #592]	; (8008c90 <ai_platform_api_get_network_report+0x590>)
 8008a40:	4b99      	ldr	r3, [pc, #612]	; (8008ca8 <ai_platform_api_get_network_report+0x5a8>)
 8008a42:	f8cb 3010 	str.w	r3, [fp, #16]
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	f7ff fb8d 	bl	800816c <_ai_platform_acquire_crc>
 8008a52:	4b90      	ldr	r3, [pc, #576]	; (8008c94 <ai_platform_api_get_network_report+0x594>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5e:	d010      	beq.n	8008a82 <ai_platform_api_get_network_report+0x382>
 8008a60:	4b8d      	ldr	r3, [pc, #564]	; (8008c98 <ai_platform_api_get_network_report+0x598>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008a68:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	d1fb      	bne.n	8008a68 <ai_platform_api_get_network_report+0x368>
 8008a70:	4a8a      	ldr	r2, [pc, #552]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008a72:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008a76:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008a7a:	4b89      	ldr	r3, [pc, #548]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d00c      	beq.n	8008a9a <ai_platform_api_get_network_report+0x39a>
 8008a80:	e7fe      	b.n	8008a80 <ai_platform_api_get_network_report+0x380>
 8008a82:	4b88      	ldr	r3, [pc, #544]	; (8008ca4 <ai_platform_api_get_network_report+0x5a4>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	609a      	str	r2, [r3, #8]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	d1fc      	bne.n	8008a88 <ai_platform_api_get_network_report+0x388>
 8008a8e:	4a83      	ldr	r2, [pc, #524]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	4b82      	ldr	r3, [pc, #520]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d167      	bne.n	8008b6a <ai_platform_api_get_network_report+0x46a>
 8008a9a:	f7ff fb69 	bl	8008170 <_ai_platform_release_crc>
 8008a9e:	4a7c      	ldr	r2, [pc, #496]	; (8008c90 <ai_platform_api_get_network_report+0x590>)
 8008aa0:	f240 2307 	movw	r3, #519	; 0x207
 8008aa4:	f8cb 3014 	str.w	r3, [fp, #20]
 8008aa8:	6813      	ldr	r3, [r2, #0]
 8008aaa:	f023 0301 	bic.w	r3, r3, #1
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	f7ff fb5c 	bl	800816c <_ai_platform_acquire_crc>
 8008ab4:	4b77      	ldr	r3, [pc, #476]	; (8008c94 <ai_platform_api_get_network_report+0x594>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac0:	d010      	beq.n	8008ae4 <ai_platform_api_get_network_report+0x3e4>
 8008ac2:	4b75      	ldr	r3, [pc, #468]	; (8008c98 <ai_platform_api_get_network_report+0x598>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008aca:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8008ace:	2a00      	cmp	r2, #0
 8008ad0:	d1fb      	bne.n	8008aca <ai_platform_api_get_network_report+0x3ca>
 8008ad2:	4a72      	ldr	r2, [pc, #456]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008ad4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008ad8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008adc:	4b70      	ldr	r3, [pc, #448]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d00c      	beq.n	8008afc <ai_platform_api_get_network_report+0x3fc>
 8008ae2:	e7fe      	b.n	8008ae2 <ai_platform_api_get_network_report+0x3e2>
 8008ae4:	4b6f      	ldr	r3, [pc, #444]	; (8008ca4 <ai_platform_api_get_network_report+0x5a4>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	609a      	str	r2, [r3, #8]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	2a00      	cmp	r2, #0
 8008aee:	d1fc      	bne.n	8008aea <ai_platform_api_get_network_report+0x3ea>
 8008af0:	4a6a      	ldr	r2, [pc, #424]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	4b6a      	ldr	r3, [pc, #424]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d145      	bne.n	8008b88 <ai_platform_api_get_network_report+0x488>
 8008afc:	f7ff fb38 	bl	8008170 <_ai_platform_release_crc>
 8008b00:	4a63      	ldr	r2, [pc, #396]	; (8008c90 <ai_platform_api_get_network_report+0x590>)
 8008b02:	f240 2301 	movw	r3, #513	; 0x201
 8008b06:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8008b0a:	6813      	ldr	r3, [r2, #0]
 8008b0c:	f023 0301 	bic.w	r3, r3, #1
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	f7ff fb2b 	bl	800816c <_ai_platform_acquire_crc>
 8008b16:	4b5f      	ldr	r3, [pc, #380]	; (8008c94 <ai_platform_api_get_network_report+0x594>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b22:	d032      	beq.n	8008b8a <ai_platform_api_get_network_report+0x48a>
 8008b24:	4b5c      	ldr	r3, [pc, #368]	; (8008c98 <ai_platform_api_get_network_report+0x598>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008b2c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	d1fb      	bne.n	8008b2c <ai_platform_api_get_network_report+0x42c>
 8008b34:	4a59      	ldr	r2, [pc, #356]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008b36:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008b3a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008b3e:	4b58      	ldr	r3, [pc, #352]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d02e      	beq.n	8008ba2 <ai_platform_api_get_network_report+0x4a2>
 8008b44:	e7fe      	b.n	8008b44 <ai_platform_api_get_network_report+0x444>
 8008b46:	2218      	movs	r2, #24
 8008b48:	2111      	movs	r1, #17
 8008b4a:	f107 0010 	add.w	r0, r7, #16
 8008b4e:	f001 fa8d 	bl	800a06c <core_set_error>
 8008b52:	e62d      	b.n	80087b0 <ai_platform_api_get_network_report+0xb0>
 8008b54:	2400      	movs	r4, #0
 8008b56:	f8ab 4032 	strh.w	r4, [fp, #50]	; 0x32
 8008b5a:	2218      	movs	r2, #24
 8008b5c:	2113      	movs	r1, #19
 8008b5e:	f107 0010 	add.w	r0, r7, #16
 8008b62:	f001 fa83 	bl	800a06c <core_set_error>
 8008b66:	e623      	b.n	80087b0 <ai_platform_api_get_network_report+0xb0>
 8008b68:	e7fe      	b.n	8008b68 <ai_platform_api_get_network_report+0x468>
 8008b6a:	e7fe      	b.n	8008b6a <ai_platform_api_get_network_report+0x46a>
 8008b6c:	2213      	movs	r2, #19
 8008b6e:	2111      	movs	r1, #17
 8008b70:	f107 0010 	add.w	r0, r7, #16
 8008b74:	f001 fa7a 	bl	800a06c <core_set_error>
 8008b78:	e61a      	b.n	80087b0 <ai_platform_api_get_network_report+0xb0>
 8008b7a:	2212      	movs	r2, #18
 8008b7c:	2111      	movs	r1, #17
 8008b7e:	f107 0010 	add.w	r0, r7, #16
 8008b82:	f001 fa73 	bl	800a06c <core_set_error>
 8008b86:	e613      	b.n	80087b0 <ai_platform_api_get_network_report+0xb0>
 8008b88:	e7fe      	b.n	8008b88 <ai_platform_api_get_network_report+0x488>
 8008b8a:	4b46      	ldr	r3, [pc, #280]	; (8008ca4 <ai_platform_api_get_network_report+0x5a4>)
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	609a      	str	r2, [r3, #8]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	2a00      	cmp	r2, #0
 8008b94:	d1fc      	bne.n	8008b90 <ai_platform_api_get_network_report+0x490>
 8008b96:	4a41      	ldr	r2, [pc, #260]	; (8008c9c <ai_platform_api_get_network_report+0x59c>)
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	4b40      	ldr	r3, [pc, #256]	; (8008ca0 <ai_platform_api_get_network_report+0x5a0>)
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d149      	bne.n	8008c36 <ai_platform_api_get_network_report+0x536>
 8008ba2:	f7ff fae5 	bl	8008170 <_ai_platform_release_crc>
 8008ba6:	f240 5301 	movw	r3, #1281	; 0x501
 8008baa:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8008bae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008bb0:	f002 fc64 	bl	800b47c <ai_platform_version_get>
 8008bb4:	4b3d      	ldr	r3, [pc, #244]	; (8008cac <ai_platform_api_get_network_report+0x5ac>)
 8008bb6:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 8008bba:	f8cb 0020 	str.w	r0, [fp, #32]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d10d      	bne.n	8008bde <ai_platform_api_get_network_report+0x4de>
 8008bc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008bc6:	f10b 0248 	add.w	r2, fp, #72	; 0x48
 8008bca:	e882 0003 	stmia.w	r2, {r0, r1}
 8008bce:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008bd2:	f10b 0340 	add.w	r3, fp, #64	; 0x40
 8008bd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8008bda:	2401      	movs	r4, #1
 8008bdc:	e5e8      	b.n	80087b0 <ai_platform_api_get_network_report+0xb0>
 8008bde:	2200      	movs	r2, #0
 8008be0:	e9cb 2210 	strd	r2, r2, [fp, #64]	; 0x40
 8008be4:	e9cb 2212 	strd	r2, r2, [fp, #72]	; 0x48
 8008be8:	4b31      	ldr	r3, [pc, #196]	; (8008cb0 <ai_platform_api_get_network_report+0x5b0>)
 8008bea:	4a32      	ldr	r2, [pc, #200]	; (8008cb4 <ai_platform_api_get_network_report+0x5b4>)
 8008bec:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
 8008bf0:	f240 4201 	movw	r2, #1025	; 0x401
 8008bf4:	f8cb 2050 	str.w	r2, [fp, #80]	; 0x50
 8008bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bfa:	f10d 0908 	add.w	r9, sp, #8
 8008bfe:	f10b 043c 	add.w	r4, fp, #60	; 0x3c
 8008c02:	f8cb 9054 	str.w	r9, [fp, #84]	; 0x54
 8008c06:	46a6      	mov	lr, r4
 8008c08:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8008c0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008c10:	f10b 0858 	add.w	r8, fp, #88	; 0x58
 8008c14:	46c4      	mov	ip, r8
 8008c16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c1a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008c1e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7ff f9fc 	bl	8008020 <ai_buffer_array_sane>
 8008c28:	b990      	cbnz	r0, 8008c50 <ai_platform_api_get_network_report+0x550>
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7ff f9f8 	bl	8008020 <ai_buffer_array_sane>
 8008c30:	b910      	cbnz	r0, 8008c38 <ai_platform_api_get_network_report+0x538>
 8008c32:	2401      	movs	r4, #1
 8008c34:	e5bc      	b.n	80087b0 <ai_platform_api_get_network_report+0xb0>
 8008c36:	e7fe      	b.n	8008c36 <ai_platform_api_get_network_report+0x536>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff f9f1 	bl	8008020 <ai_buffer_array_sane>
 8008c3e:	b1b0      	cbz	r0, 8008c6e <ai_platform_api_get_network_report+0x56e>
 8008c40:	6a3d      	ldr	r5, [r7, #32]
 8008c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c4e:	e7f0      	b.n	8008c32 <ai_platform_api_get_network_report+0x532>
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7ff f9e5 	bl	8008020 <ai_buffer_array_sane>
 8008c56:	b190      	cbz	r0, 8008c7e <ai_platform_api_get_network_report+0x57e>
 8008c58:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 8008c5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008c60:	4645      	mov	r5, r8
 8008c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c64:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008c68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008c6c:	e7dd      	b.n	8008c2a <ai_platform_api_get_network_report+0x52a>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c7c:	deff      	udf	#255	; 0xff
 8008c7e:	4604      	mov	r4, r0
 8008c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c82:	4645      	mov	r5, r8
 8008c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c86:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008c8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008c8e:	deff      	udf	#255	; 0xff
 8008c90:	e0002000 	.word	0xe0002000
 8008c94:	e0042000 	.word	0xe0042000
 8008c98:	58024000 	.word	0x58024000
 8008c9c:	f407a5c2 	.word	0xf407a5c2
 8008ca0:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ca4:	40023000 	.word	0x40023000
 8008ca8:	080a8614 	.word	0x080a8614
 8008cac:	a1facade 	.word	0xa1facade
 8008cb0:	0800f7f4 	.word	0x0800f7f4
 8008cb4:	00040440 	.word	0x00040440

08008cb8 <ai_platform_network_create>:
 8008cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8008cc4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8008cc8:	4615      	mov	r5, r2
 8008cca:	461f      	mov	r7, r3
 8008ccc:	f7ff fa4e 	bl	800816c <_ai_platform_acquire_crc>
 8008cd0:	b188      	cbz	r0, 8008cf6 <ai_platform_network_create+0x3e>
 8008cd2:	4a62      	ldr	r2, [pc, #392]	; (8008e5c <ai_platform_network_create+0x1a4>)
 8008cd4:	6812      	ldr	r2, [r2, #0]
 8008cd6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008cda:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008cde:	4603      	mov	r3, r0
 8008ce0:	d00e      	beq.n	8008d00 <ai_platform_network_create+0x48>
 8008ce2:	4a5f      	ldr	r2, [pc, #380]	; (8008e60 <ai_platform_network_create+0x1a8>)
 8008ce4:	2118      	movs	r1, #24
 8008ce6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8008cea:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8008cee:	2918      	cmp	r1, #24
 8008cf0:	d018      	beq.n	8008d24 <ai_platform_network_create+0x6c>
 8008cf2:	f7ff fa3d 	bl	8008170 <_ai_platform_release_crc>
 8008cf6:	f244 1033 	movw	r0, #16691	; 0x4133
 8008cfa:	b003      	add	sp, #12
 8008cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d00:	4a58      	ldr	r2, [pc, #352]	; (8008e64 <ai_platform_network_create+0x1ac>)
 8008d02:	2101      	movs	r1, #1
 8008d04:	6091      	str	r1, [r2, #8]
 8008d06:	2114      	movs	r1, #20
 8008d08:	e001      	b.n	8008d0e <ai_platform_network_create+0x56>
 8008d0a:	3901      	subs	r1, #1
 8008d0c:	d002      	beq.n	8008d14 <ai_platform_network_create+0x5c>
 8008d0e:	6894      	ldr	r4, [r2, #8]
 8008d10:	2c00      	cmp	r4, #0
 8008d12:	d1fa      	bne.n	8008d0a <ai_platform_network_create+0x52>
 8008d14:	4a53      	ldr	r2, [pc, #332]	; (8008e64 <ai_platform_network_create+0x1ac>)
 8008d16:	6891      	ldr	r1, [r2, #8]
 8008d18:	b911      	cbnz	r1, 8008d20 <ai_platform_network_create+0x68>
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	3201      	adds	r2, #1
 8008d1e:	d008      	beq.n	8008d32 <ai_platform_network_create+0x7a>
 8008d20:	4618      	mov	r0, r3
 8008d22:	e7e6      	b.n	8008cf2 <ai_platform_network_create+0x3a>
 8008d24:	2101      	movs	r1, #1
 8008d26:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8008d2a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8008d2e:	2900      	cmp	r1, #0
 8008d30:	d1fb      	bne.n	8008d2a <ai_platform_network_create+0x72>
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fa1c 	bl	8008170 <_ai_platform_release_crc>
 8008d38:	4a4b      	ldr	r2, [pc, #300]	; (8008e68 <ai_platform_network_create+0x1b0>)
 8008d3a:	6813      	ldr	r3, [r2, #0]
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	f7ff fa13 	bl	800816c <_ai_platform_acquire_crc>
 8008d46:	4b45      	ldr	r3, [pc, #276]	; (8008e5c <ai_platform_network_create+0x1a4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d52:	d010      	beq.n	8008d76 <ai_platform_network_create+0xbe>
 8008d54:	4b42      	ldr	r3, [pc, #264]	; (8008e60 <ai_platform_network_create+0x1a8>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008d5c:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8008d60:	2900      	cmp	r1, #0
 8008d62:	d1fb      	bne.n	8008d5c <ai_platform_network_create+0xa4>
 8008d64:	4a41      	ldr	r2, [pc, #260]	; (8008e6c <ai_platform_network_create+0x1b4>)
 8008d66:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008d6a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008d6e:	4b40      	ldr	r3, [pc, #256]	; (8008e70 <ai_platform_network_create+0x1b8>)
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d00c      	beq.n	8008d8e <ai_platform_network_create+0xd6>
 8008d74:	e7fe      	b.n	8008d74 <ai_platform_network_create+0xbc>
 8008d76:	4a3b      	ldr	r2, [pc, #236]	; (8008e64 <ai_platform_network_create+0x1ac>)
 8008d78:	2301      	movs	r3, #1
 8008d7a:	6093      	str	r3, [r2, #8]
 8008d7c:	6893      	ldr	r3, [r2, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1fc      	bne.n	8008d7c <ai_platform_network_create+0xc4>
 8008d82:	4b3a      	ldr	r3, [pc, #232]	; (8008e6c <ai_platform_network_create+0x1b4>)
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	6812      	ldr	r2, [r2, #0]
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <ai_platform_network_create+0x1b8>)
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d128      	bne.n	8008de0 <ai_platform_network_create+0x128>
 8008d8e:	f7ff f9ef 	bl	8008170 <_ai_platform_release_crc>
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	d036      	beq.n	8008e04 <ai_platform_network_create+0x14c>
 8008d96:	4b37      	ldr	r3, [pc, #220]	; (8008e74 <ai_platform_network_create+0x1bc>)
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	6035      	str	r5, [r6, #0]
 8008d9c:	f001 f95e 	bl	800a05c <core_init>
 8008da0:	b1f8      	cbz	r0, 8008de2 <ai_platform_network_create+0x12a>
 8008da2:	4a31      	ldr	r2, [pc, #196]	; (8008e68 <ai_platform_network_create+0x1b0>)
 8008da4:	6813      	ldr	r3, [r2, #0]
 8008da6:	f023 0301 	bic.w	r3, r3, #1
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	f7ff f9de 	bl	800816c <_ai_platform_acquire_crc>
 8008db0:	4b2a      	ldr	r3, [pc, #168]	; (8008e5c <ai_platform_network_create+0x1a4>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dbc:	d025      	beq.n	8008e0a <ai_platform_network_create+0x152>
 8008dbe:	4a28      	ldr	r2, [pc, #160]	; (8008e60 <ai_platform_network_create+0x1a8>)
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008dc6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1fb      	bne.n	8008dc6 <ai_platform_network_create+0x10e>
 8008dce:	4b27      	ldr	r3, [pc, #156]	; (8008e6c <ai_platform_network_create+0x1b4>)
 8008dd0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008dd4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008dd8:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <ai_platform_network_create+0x1b8>)
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d022      	beq.n	8008e24 <ai_platform_network_create+0x16c>
 8008dde:	e7fe      	b.n	8008dde <ai_platform_network_create+0x126>
 8008de0:	e7fe      	b.n	8008de0 <ai_platform_network_create+0x128>
 8008de2:	2430      	movs	r4, #48	; 0x30
 8008de4:	2300      	movs	r3, #0
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	2610      	movs	r6, #16
 8008dea:	464a      	mov	r2, r9
 8008dec:	4641      	mov	r1, r8
 8008dee:	4638      	mov	r0, r7
 8008df0:	f002 fb3e 	bl	800b470 <ai_version_get>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2000      	movs	r0, #0
 8008df8:	f364 0007 	bfi	r0, r4, #0, #8
 8008dfc:	64ab      	str	r3, [r5, #72]	; 0x48
 8008dfe:	f366 201f 	bfi	r0, r6, #8, #24
 8008e02:	e77a      	b.n	8008cfa <ai_platform_network_create+0x42>
 8008e04:	f241 0010 	movw	r0, #4112	; 0x1010
 8008e08:	e777      	b.n	8008cfa <ai_platform_network_create+0x42>
 8008e0a:	4a16      	ldr	r2, [pc, #88]	; (8008e64 <ai_platform_network_create+0x1ac>)
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	6093      	str	r3, [r2, #8]
 8008e10:	6893      	ldr	r3, [r2, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1fc      	bne.n	8008e10 <ai_platform_network_create+0x158>
 8008e16:	4b15      	ldr	r3, [pc, #84]	; (8008e6c <ai_platform_network_create+0x1b4>)
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <ai_platform_network_create+0x1b8>)
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d000      	beq.n	8008e24 <ai_platform_network_create+0x16c>
 8008e22:	e7fe      	b.n	8008e22 <ai_platform_network_create+0x16a>
 8008e24:	f7ff f9a4 	bl	8008170 <_ai_platform_release_crc>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4641      	mov	r1, r8
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	f002 fb1f 	bl	800b470 <ai_version_get>
 8008e32:	2200      	movs	r2, #0
 8008e34:	4604      	mov	r4, r0
 8008e36:	2105      	movs	r1, #5
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f002 fb19 	bl	800b470 <ai_version_get>
 8008e3e:	4284      	cmp	r4, r0
 8008e40:	d001      	beq.n	8008e46 <ai_platform_network_create+0x18e>
 8008e42:	2401      	movs	r4, #1
 8008e44:	e7ce      	b.n	8008de4 <ai_platform_network_create+0x12c>
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <ai_platform_network_create+0x1c0>)
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	a801      	add	r0, sp, #4
 8008e4c:	f001 fb42 	bl	800a4d4 <ai_check_custom_types>
 8008e50:	b110      	cbz	r0, 8008e58 <ai_platform_network_create+0x1a0>
 8008e52:	2600      	movs	r6, #0
 8008e54:	4634      	mov	r4, r6
 8008e56:	e7c8      	b.n	8008dea <ai_platform_network_create+0x132>
 8008e58:	2402      	movs	r4, #2
 8008e5a:	e7c3      	b.n	8008de4 <ai_platform_network_create+0x12c>
 8008e5c:	e0042000 	.word	0xe0042000
 8008e60:	58024000 	.word	0x58024000
 8008e64:	40023000 	.word	0x40023000
 8008e68:	e0002000 	.word	0xe0002000
 8008e6c:	f407a5c2 	.word	0xf407a5c2
 8008e70:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e74:	a1c00100 	.word	0xa1c00100
 8008e78:	84048403 	.word	0x84048403

08008e7c <ai_platform_network_destroy>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	4604      	mov	r4, r0
 8008e80:	b310      	cbz	r0, 8008ec8 <ai_platform_network_destroy+0x4c>
 8008e82:	4b33      	ldr	r3, [pc, #204]	; (8008f50 <ai_platform_network_destroy+0xd4>)
 8008e84:	6802      	ldr	r2, [r0, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d11e      	bne.n	8008ec8 <ai_platform_network_destroy+0x4c>
 8008e8a:	4a32      	ldr	r2, [pc, #200]	; (8008f54 <ai_platform_network_destroy+0xd8>)
 8008e8c:	6813      	ldr	r3, [r2, #0]
 8008e8e:	f023 0301 	bic.w	r3, r3, #1
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	f7ff f96a 	bl	800816c <_ai_platform_acquire_crc>
 8008e98:	4b2f      	ldr	r3, [pc, #188]	; (8008f58 <ai_platform_network_destroy+0xdc>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea4:	d040      	beq.n	8008f28 <ai_platform_network_destroy+0xac>
 8008ea6:	4a2d      	ldr	r2, [pc, #180]	; (8008f5c <ai_platform_network_destroy+0xe0>)
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008eae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1fb      	bne.n	8008eae <ai_platform_network_destroy+0x32>
 8008eb6:	4b2a      	ldr	r3, [pc, #168]	; (8008f60 <ai_platform_network_destroy+0xe4>)
 8008eb8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008ebc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008ec0:	4b28      	ldr	r3, [pc, #160]	; (8008f64 <ai_platform_network_destroy+0xe8>)
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d03c      	beq.n	8008f40 <ai_platform_network_destroy+0xc4>
 8008ec6:	e7fe      	b.n	8008ec6 <ai_platform_network_destroy+0x4a>
 8008ec8:	4a22      	ldr	r2, [pc, #136]	; (8008f54 <ai_platform_network_destroy+0xd8>)
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	f7ff f94b 	bl	800816c <_ai_platform_acquire_crc>
 8008ed6:	4b20      	ldr	r3, [pc, #128]	; (8008f58 <ai_platform_network_destroy+0xdc>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee2:	d010      	beq.n	8008f06 <ai_platform_network_destroy+0x8a>
 8008ee4:	4a1d      	ldr	r2, [pc, #116]	; (8008f5c <ai_platform_network_destroy+0xe0>)
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008eec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1fb      	bne.n	8008eec <ai_platform_network_destroy+0x70>
 8008ef4:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <ai_platform_network_destroy+0xe4>)
 8008ef6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008efa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008efe:	4b19      	ldr	r3, [pc, #100]	; (8008f64 <ai_platform_network_destroy+0xe8>)
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d00d      	beq.n	8008f20 <ai_platform_network_destroy+0xa4>
 8008f04:	e7fe      	b.n	8008f04 <ai_platform_network_destroy+0x88>
 8008f06:	4a18      	ldr	r2, [pc, #96]	; (8008f68 <ai_platform_network_destroy+0xec>)
 8008f08:	2301      	movs	r3, #1
 8008f0a:	6093      	str	r3, [r2, #8]
 8008f0c:	6893      	ldr	r3, [r2, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1fc      	bne.n	8008f0c <ai_platform_network_destroy+0x90>
 8008f12:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <ai_platform_network_destroy+0xe4>)
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <ai_platform_network_destroy+0xe8>)
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d000      	beq.n	8008f20 <ai_platform_network_destroy+0xa4>
 8008f1e:	e7fe      	b.n	8008f1e <ai_platform_network_destroy+0xa2>
 8008f20:	f7ff f926 	bl	8008170 <_ai_platform_release_crc>
 8008f24:	4620      	mov	r0, r4
 8008f26:	bd10      	pop	{r4, pc}
 8008f28:	4a0f      	ldr	r2, [pc, #60]	; (8008f68 <ai_platform_network_destroy+0xec>)
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	6093      	str	r3, [r2, #8]
 8008f2e:	6893      	ldr	r3, [r2, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1fc      	bne.n	8008f2e <ai_platform_network_destroy+0xb2>
 8008f34:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <ai_platform_network_destroy+0xe4>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <ai_platform_network_destroy+0xe8>)
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d106      	bne.n	8008f4e <ai_platform_network_destroy+0xd2>
 8008f40:	f7ff f916 	bl	8008170 <_ai_platform_release_crc>
 8008f44:	4620      	mov	r0, r4
 8008f46:	f001 fb8b 	bl	800a660 <ai_layers_destroy_all>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	e7fe      	b.n	8008f4e <ai_platform_network_destroy+0xd2>
 8008f50:	a1c00100 	.word	0xa1c00100
 8008f54:	e0002000 	.word	0xe0002000
 8008f58:	e0042000 	.word	0xe0042000
 8008f5c:	58024000 	.word	0x58024000
 8008f60:	f407a5c2 	.word	0xf407a5c2
 8008f64:	b5e8b5cd 	.word	0xb5e8b5cd
 8008f68:	40023000 	.word	0x40023000

08008f6c <ai_platform_network_init>:
 8008f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f70:	b320      	cbz	r0, 8008fbc <ai_platform_network_init+0x50>
 8008f72:	4b73      	ldr	r3, [pc, #460]	; (8009140 <ai_platform_network_init+0x1d4>)
 8008f74:	6802      	ldr	r2, [r0, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	4604      	mov	r4, r0
 8008f7a:	d11f      	bne.n	8008fbc <ai_platform_network_init+0x50>
 8008f7c:	4a71      	ldr	r2, [pc, #452]	; (8009144 <ai_platform_network_init+0x1d8>)
 8008f7e:	6813      	ldr	r3, [r2, #0]
 8008f80:	f023 0301 	bic.w	r3, r3, #1
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	460e      	mov	r6, r1
 8008f88:	f7ff f8f0 	bl	800816c <_ai_platform_acquire_crc>
 8008f8c:	4b6e      	ldr	r3, [pc, #440]	; (8009148 <ai_platform_network_init+0x1dc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f98:	d042      	beq.n	8009020 <ai_platform_network_init+0xb4>
 8008f9a:	4a6c      	ldr	r2, [pc, #432]	; (800914c <ai_platform_network_init+0x1e0>)
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008fa2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1fb      	bne.n	8008fa2 <ai_platform_network_init+0x36>
 8008faa:	4b69      	ldr	r3, [pc, #420]	; (8009150 <ai_platform_network_init+0x1e4>)
 8008fac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008fb0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008fb4:	4b67      	ldr	r3, [pc, #412]	; (8009154 <ai_platform_network_init+0x1e8>)
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d03e      	beq.n	8009038 <ai_platform_network_init+0xcc>
 8008fba:	e7fe      	b.n	8008fba <ai_platform_network_init+0x4e>
 8008fbc:	4a61      	ldr	r2, [pc, #388]	; (8009144 <ai_platform_network_init+0x1d8>)
 8008fbe:	6813      	ldr	r3, [r2, #0]
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	f7ff f8d1 	bl	800816c <_ai_platform_acquire_crc>
 8008fca:	4b5f      	ldr	r3, [pc, #380]	; (8009148 <ai_platform_network_init+0x1dc>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd6:	d010      	beq.n	8008ffa <ai_platform_network_init+0x8e>
 8008fd8:	4a5c      	ldr	r2, [pc, #368]	; (800914c <ai_platform_network_init+0x1e0>)
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008fe0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1fb      	bne.n	8008fe0 <ai_platform_network_init+0x74>
 8008fe8:	4b59      	ldr	r3, [pc, #356]	; (8009150 <ai_platform_network_init+0x1e4>)
 8008fea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008fee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008ff2:	4b58      	ldr	r3, [pc, #352]	; (8009154 <ai_platform_network_init+0x1e8>)
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d00d      	beq.n	8009014 <ai_platform_network_init+0xa8>
 8008ff8:	e7fe      	b.n	8008ff8 <ai_platform_network_init+0x8c>
 8008ffa:	4a57      	ldr	r2, [pc, #348]	; (8009158 <ai_platform_network_init+0x1ec>)
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	6093      	str	r3, [r2, #8]
 8009000:	6893      	ldr	r3, [r2, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1fc      	bne.n	8009000 <ai_platform_network_init+0x94>
 8009006:	4b52      	ldr	r3, [pc, #328]	; (8009150 <ai_platform_network_init+0x1e4>)
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	6812      	ldr	r2, [r2, #0]
 800900c:	4b51      	ldr	r3, [pc, #324]	; (8009154 <ai_platform_network_init+0x1e8>)
 800900e:	429a      	cmp	r2, r3
 8009010:	d000      	beq.n	8009014 <ai_platform_network_init+0xa8>
 8009012:	e7fe      	b.n	8009012 <ai_platform_network_init+0xa6>
 8009014:	f7ff f8ac 	bl	8008170 <_ai_platform_release_crc>
 8009018:	2600      	movs	r6, #0
 800901a:	4630      	mov	r0, r6
 800901c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009020:	4a4d      	ldr	r2, [pc, #308]	; (8009158 <ai_platform_network_init+0x1ec>)
 8009022:	2301      	movs	r3, #1
 8009024:	6093      	str	r3, [r2, #8]
 8009026:	6893      	ldr	r3, [r2, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1fc      	bne.n	8009026 <ai_platform_network_init+0xba>
 800902c:	4b48      	ldr	r3, [pc, #288]	; (8009150 <ai_platform_network_init+0x1e4>)
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	6812      	ldr	r2, [r2, #0]
 8009032:	4b48      	ldr	r3, [pc, #288]	; (8009154 <ai_platform_network_init+0x1e8>)
 8009034:	429a      	cmp	r2, r3
 8009036:	d11c      	bne.n	8009072 <ai_platform_network_init+0x106>
 8009038:	f7ff f89a 	bl	8008170 <_ai_platform_release_crc>
 800903c:	2e00      	cmp	r6, #0
 800903e:	d06f      	beq.n	8009120 <ai_platform_network_init+0x1b4>
 8009040:	4b46      	ldr	r3, [pc, #280]	; (800915c <ai_platform_network_init+0x1f0>)
 8009042:	6832      	ldr	r2, [r6, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d115      	bne.n	8009074 <ai_platform_network_init+0x108>
 8009048:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800904c:	6933      	ldr	r3, [r6, #16]
 800904e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8009052:	89f7      	ldrh	r7, [r6, #14]
 8009054:	62a3      	str	r3, [r4, #40]	; 0x28
 8009056:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800905a:	2303      	movs	r3, #3
 800905c:	84e7      	strh	r7, [r4, #38]	; 0x26
 800905e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8009062:	60e3      	str	r3, [r4, #12]
 8009064:	4620      	mov	r0, r4
 8009066:	4626      	mov	r6, r4
 8009068:	f001 fa8c 	bl	800a584 <ai_layers_init_all>
 800906c:	4630      	mov	r0, r6
 800906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009072:	e7fe      	b.n	8009072 <ai_platform_network_init+0x106>
 8009074:	2101      	movs	r1, #1
 8009076:	4630      	mov	r0, r6
 8009078:	4635      	mov	r5, r6
 800907a:	6876      	ldr	r6, [r6, #4]
 800907c:	f7fe ff94 	bl	8007fa8 <ai_buffer_get_size>
 8009080:	f105 081c 	add.w	r8, r5, #28
 8009084:	4681      	mov	r9, r0
 8009086:	2101      	movs	r1, #1
 8009088:	4640      	mov	r0, r8
 800908a:	6a2f      	ldr	r7, [r5, #32]
 800908c:	f7fe ff8c 	bl	8007fa8 <ai_buffer_get_size>
 8009090:	f1b9 0f00 	cmp.w	r9, #0
 8009094:	d025      	beq.n	80090e2 <ai_platform_network_init+0x176>
 8009096:	2201      	movs	r2, #1
 8009098:	4696      	mov	lr, r2
 800909a:	bb30      	cbnz	r0, 80090ea <ai_platform_network_init+0x17e>
 800909c:	4680      	mov	r8, r0
 800909e:	4607      	mov	r7, r0
 80090a0:	b376      	cbz	r6, 8009100 <ai_platform_network_init+0x194>
 80090a2:	8be3      	ldrh	r3, [r4, #30]
 80090a4:	4573      	cmp	r3, lr
 80090a6:	d323      	bcc.n	80090f0 <ai_platform_network_init+0x184>
 80090a8:	b142      	cbz	r2, 80090bc <ai_platform_network_init+0x150>
 80090aa:	46ac      	mov	ip, r5
 80090ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80090b0:	6a25      	ldr	r5, [r4, #32]
 80090b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090b4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80090b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80090bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80090be:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80090c2:	2600      	movs	r6, #0
 80090c4:	42bb      	cmp	r3, r7
 80090c6:	83a6      	strh	r6, [r4, #28]
 80090c8:	d323      	bcc.n	8009112 <ai_platform_network_init+0x1a6>
 80090ca:	b37f      	cbz	r7, 800912c <ai_platform_network_init+0x1c0>
 80090cc:	46c4      	mov	ip, r8
 80090ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80090d2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80090d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090d6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80090da:	46b6      	mov	lr, r6
 80090dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80090e0:	e7bb      	b.n	800905a <ai_platform_network_init+0xee>
 80090e2:	464a      	mov	r2, r9
 80090e4:	46ce      	mov	lr, r9
 80090e6:	464d      	mov	r5, r9
 80090e8:	e7d7      	b.n	800909a <ai_platform_network_init+0x12e>
 80090ea:	b30f      	cbz	r7, 8009130 <ai_platform_network_init+0x1c4>
 80090ec:	2701      	movs	r7, #1
 80090ee:	e7d7      	b.n	80090a0 <ai_platform_network_init+0x134>
 80090f0:	2212      	movs	r2, #18
 80090f2:	2116      	movs	r1, #22
 80090f4:	f104 0010 	add.w	r0, r4, #16
 80090f8:	f000 ffb8 	bl	800a06c <core_set_error>
 80090fc:	2600      	movs	r6, #0
 80090fe:	e78c      	b.n	800901a <ai_platform_network_init+0xae>
 8009100:	f1b9 0f00 	cmp.w	r9, #0
 8009104:	d0cd      	beq.n	80090a2 <ai_platform_network_init+0x136>
 8009106:	2110      	movs	r1, #16
 8009108:	2212      	movs	r2, #18
 800910a:	1860      	adds	r0, r4, r1
 800910c:	f000 ffae 	bl	800a06c <core_set_error>
 8009110:	e783      	b.n	800901a <ai_platform_network_init+0xae>
 8009112:	2213      	movs	r2, #19
 8009114:	2116      	movs	r1, #22
 8009116:	f104 0010 	add.w	r0, r4, #16
 800911a:	f000 ffa7 	bl	800a06c <core_set_error>
 800911e:	e77c      	b.n	800901a <ai_platform_network_init+0xae>
 8009120:	2110      	movs	r1, #16
 8009122:	2211      	movs	r2, #17
 8009124:	1860      	adds	r0, r4, r1
 8009126:	f000 ffa1 	bl	800a06c <core_set_error>
 800912a:	e776      	b.n	800901a <ai_platform_network_init+0xae>
 800912c:	46be      	mov	lr, r7
 800912e:	e794      	b.n	800905a <ai_platform_network_init+0xee>
 8009130:	2110      	movs	r1, #16
 8009132:	2213      	movs	r2, #19
 8009134:	1860      	adds	r0, r4, r1
 8009136:	f000 ff99 	bl	800a06c <core_set_error>
 800913a:	463e      	mov	r6, r7
 800913c:	e76d      	b.n	800901a <ai_platform_network_init+0xae>
 800913e:	bf00      	nop
 8009140:	a1c00100 	.word	0xa1c00100
 8009144:	e0002000 	.word	0xe0002000
 8009148:	e0042000 	.word	0xe0042000
 800914c:	58024000 	.word	0x58024000
 8009150:	f407a5c2 	.word	0xf407a5c2
 8009154:	b5e8b5cd 	.word	0xb5e8b5cd
 8009158:	40023000 	.word	0x40023000
 800915c:	a1facade 	.word	0xa1facade

08009160 <ai_platform_network_post_init>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	b318      	cbz	r0, 80091ac <ai_platform_network_post_init+0x4c>
 8009164:	4b41      	ldr	r3, [pc, #260]	; (800926c <ai_platform_network_post_init+0x10c>)
 8009166:	6802      	ldr	r2, [r0, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	4604      	mov	r4, r0
 800916c:	d11e      	bne.n	80091ac <ai_platform_network_post_init+0x4c>
 800916e:	4a40      	ldr	r2, [pc, #256]	; (8009270 <ai_platform_network_post_init+0x110>)
 8009170:	6813      	ldr	r3, [r2, #0]
 8009172:	f023 0301 	bic.w	r3, r3, #1
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	f7fe fff8 	bl	800816c <_ai_platform_acquire_crc>
 800917c:	4b3d      	ldr	r3, [pc, #244]	; (8009274 <ai_platform_network_post_init+0x114>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009188:	d040      	beq.n	800920c <ai_platform_network_post_init+0xac>
 800918a:	4a3b      	ldr	r2, [pc, #236]	; (8009278 <ai_platform_network_post_init+0x118>)
 800918c:	2301      	movs	r3, #1
 800918e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009192:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1fb      	bne.n	8009192 <ai_platform_network_post_init+0x32>
 800919a:	4b38      	ldr	r3, [pc, #224]	; (800927c <ai_platform_network_post_init+0x11c>)
 800919c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80091a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80091a4:	4b36      	ldr	r3, [pc, #216]	; (8009280 <ai_platform_network_post_init+0x120>)
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d03c      	beq.n	8009224 <ai_platform_network_post_init+0xc4>
 80091aa:	e7fe      	b.n	80091aa <ai_platform_network_post_init+0x4a>
 80091ac:	4a30      	ldr	r2, [pc, #192]	; (8009270 <ai_platform_network_post_init+0x110>)
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	f023 0301 	bic.w	r3, r3, #1
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	f7fe ffd9 	bl	800816c <_ai_platform_acquire_crc>
 80091ba:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <ai_platform_network_post_init+0x114>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091c6:	d010      	beq.n	80091ea <ai_platform_network_post_init+0x8a>
 80091c8:	4a2b      	ldr	r2, [pc, #172]	; (8009278 <ai_platform_network_post_init+0x118>)
 80091ca:	2301      	movs	r3, #1
 80091cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80091d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1fb      	bne.n	80091d0 <ai_platform_network_post_init+0x70>
 80091d8:	4b28      	ldr	r3, [pc, #160]	; (800927c <ai_platform_network_post_init+0x11c>)
 80091da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80091de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80091e2:	4b27      	ldr	r3, [pc, #156]	; (8009280 <ai_platform_network_post_init+0x120>)
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d00d      	beq.n	8009204 <ai_platform_network_post_init+0xa4>
 80091e8:	e7fe      	b.n	80091e8 <ai_platform_network_post_init+0x88>
 80091ea:	4a26      	ldr	r2, [pc, #152]	; (8009284 <ai_platform_network_post_init+0x124>)
 80091ec:	2301      	movs	r3, #1
 80091ee:	6093      	str	r3, [r2, #8]
 80091f0:	6893      	ldr	r3, [r2, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1fc      	bne.n	80091f0 <ai_platform_network_post_init+0x90>
 80091f6:	4b21      	ldr	r3, [pc, #132]	; (800927c <ai_platform_network_post_init+0x11c>)
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	4b20      	ldr	r3, [pc, #128]	; (8009280 <ai_platform_network_post_init+0x120>)
 80091fe:	429a      	cmp	r2, r3
 8009200:	d000      	beq.n	8009204 <ai_platform_network_post_init+0xa4>
 8009202:	e7fe      	b.n	8009202 <ai_platform_network_post_init+0xa2>
 8009204:	f7fe ffb4 	bl	8008170 <_ai_platform_release_crc>
 8009208:	2000      	movs	r0, #0
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	4a1d      	ldr	r2, [pc, #116]	; (8009284 <ai_platform_network_post_init+0x124>)
 800920e:	2301      	movs	r3, #1
 8009210:	6093      	str	r3, [r2, #8]
 8009212:	6893      	ldr	r3, [r2, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1fc      	bne.n	8009212 <ai_platform_network_post_init+0xb2>
 8009218:	4b18      	ldr	r3, [pc, #96]	; (800927c <ai_platform_network_post_init+0x11c>)
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	4b18      	ldr	r3, [pc, #96]	; (8009280 <ai_platform_network_post_init+0x120>)
 8009220:	429a      	cmp	r2, r3
 8009222:	d11a      	bne.n	800925a <ai_platform_network_post_init+0xfa>
 8009224:	f7fe ffa4 	bl	8008170 <_ai_platform_release_crc>
 8009228:	68e3      	ldr	r3, [r4, #12]
 800922a:	f013 0502 	ands.w	r5, r3, #2
 800922e:	d015      	beq.n	800925c <ai_platform_network_post_init+0xfc>
 8009230:	4620      	mov	r0, r4
 8009232:	f001 f9b5 	bl	800a5a0 <ai_layers_post_init_all>
 8009236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009238:	b16b      	cbz	r3, 8009256 <ai_platform_network_post_init+0xf6>
 800923a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800923c:	e007      	b.n	800924e <ai_platform_network_post_init+0xee>
 800923e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8009242:	4798      	blx	r3
 8009244:	692b      	ldr	r3, [r5, #16]
 8009246:	42ab      	cmp	r3, r5
 8009248:	d005      	beq.n	8009256 <ai_platform_network_post_init+0xf6>
 800924a:	b123      	cbz	r3, 8009256 <ai_platform_network_post_init+0xf6>
 800924c:	461d      	mov	r5, r3
 800924e:	4629      	mov	r1, r5
 8009250:	2000      	movs	r0, #0
 8009252:	2d00      	cmp	r5, #0
 8009254:	d1f3      	bne.n	800923e <ai_platform_network_post_init+0xde>
 8009256:	2001      	movs	r0, #1
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	e7fe      	b.n	800925a <ai_platform_network_post_init+0xfa>
 800925c:	2210      	movs	r2, #16
 800925e:	2111      	movs	r1, #17
 8009260:	18a0      	adds	r0, r4, r2
 8009262:	f000 ff03 	bl	800a06c <core_set_error>
 8009266:	4628      	mov	r0, r5
 8009268:	bd38      	pop	{r3, r4, r5, pc}
 800926a:	bf00      	nop
 800926c:	a1c00100 	.word	0xa1c00100
 8009270:	e0002000 	.word	0xe0002000
 8009274:	e0042000 	.word	0xe0042000
 8009278:	58024000 	.word	0x58024000
 800927c:	f407a5c2 	.word	0xf407a5c2
 8009280:	b5e8b5cd 	.word	0xb5e8b5cd
 8009284:	40023000 	.word	0x40023000

08009288 <ai_platform_network_process>:
 8009288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	460e      	mov	r6, r1
 800928e:	b085      	sub	sp, #20
 8009290:	4693      	mov	fp, r2
 8009292:	4605      	mov	r5, r0
 8009294:	b120      	cbz	r0, 80092a0 <ai_platform_network_process+0x18>
 8009296:	4bb7      	ldr	r3, [pc, #732]	; (8009574 <ai_platform_network_process+0x2ec>)
 8009298:	6802      	ldr	r2, [r0, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	bf18      	it	ne
 800929e:	2500      	movne	r5, #0
 80092a0:	4ab5      	ldr	r2, [pc, #724]	; (8009578 <ai_platform_network_process+0x2f0>)
 80092a2:	6813      	ldr	r3, [r2, #0]
 80092a4:	f023 0301 	bic.w	r3, r3, #1
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	f7fe ff5f 	bl	800816c <_ai_platform_acquire_crc>
 80092ae:	4bb3      	ldr	r3, [pc, #716]	; (800957c <ai_platform_network_process+0x2f4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ba:	d010      	beq.n	80092de <ai_platform_network_process+0x56>
 80092bc:	4ab0      	ldr	r2, [pc, #704]	; (8009580 <ai_platform_network_process+0x2f8>)
 80092be:	2301      	movs	r3, #1
 80092c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80092c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1fb      	bne.n	80092c4 <ai_platform_network_process+0x3c>
 80092cc:	4bad      	ldr	r3, [pc, #692]	; (8009584 <ai_platform_network_process+0x2fc>)
 80092ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80092d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092d6:	4bac      	ldr	r3, [pc, #688]	; (8009588 <ai_platform_network_process+0x300>)
 80092d8:	429a      	cmp	r2, r3
 80092da:	d00d      	beq.n	80092f8 <ai_platform_network_process+0x70>
 80092dc:	e7fe      	b.n	80092dc <ai_platform_network_process+0x54>
 80092de:	4aab      	ldr	r2, [pc, #684]	; (800958c <ai_platform_network_process+0x304>)
 80092e0:	2301      	movs	r3, #1
 80092e2:	6093      	str	r3, [r2, #8]
 80092e4:	6893      	ldr	r3, [r2, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1fc      	bne.n	80092e4 <ai_platform_network_process+0x5c>
 80092ea:	4ba6      	ldr	r3, [pc, #664]	; (8009584 <ai_platform_network_process+0x2fc>)
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	4ba5      	ldr	r3, [pc, #660]	; (8009588 <ai_platform_network_process+0x300>)
 80092f2:	429a      	cmp	r2, r3
 80092f4:	f040 812c 	bne.w	8009550 <ai_platform_network_process+0x2c8>
 80092f8:	f7fe ff3a 	bl	8008170 <_ai_platform_release_crc>
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	f000 8155 	beq.w	80095ac <ai_platform_network_process+0x324>
 8009302:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8124 	beq.w	8009552 <ai_platform_network_process+0x2ca>
 800930a:	68eb      	ldr	r3, [r5, #12]
 800930c:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	2700      	movs	r7, #0
 8009316:	2b03      	cmp	r3, #3
 8009318:	616f      	str	r7, [r5, #20]
 800931a:	f040 813f 	bne.w	800959c <ai_platform_network_process+0x314>
 800931e:	2e00      	cmp	r6, #0
 8009320:	f000 811d 	beq.w	800955e <ai_platform_network_process+0x2d6>
 8009324:	f1ba 0f00 	cmp.w	sl, #0
 8009328:	f000 8119 	beq.w	800955e <ai_platform_network_process+0x2d6>
 800932c:	f8ba 3000 	ldrh.w	r3, [sl]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8114 	beq.w	800955e <ai_platform_network_process+0x2d6>
 8009336:	69b3      	ldr	r3, [r6, #24]
 8009338:	f8cd b00c 	str.w	fp, [sp, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8009342:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d072      	beq.n	8009430 <ai_platform_network_process+0x1a8>
 800934a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800934e:	2c00      	cmp	r4, #0
 8009350:	d06e      	beq.n	8009430 <ai_platform_network_process+0x1a8>
 8009352:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009356:	f8d3 9000 	ldr.w	r9, [r3]
 800935a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800935e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009362:	f000 81e1 	beq.w	8009728 <ai_platform_network_process+0x4a0>
 8009366:	69a3      	ldr	r3, [r4, #24]
 8009368:	2101      	movs	r1, #1
 800936a:	4630      	mov	r0, r6
 800936c:	685d      	ldr	r5, [r3, #4]
 800936e:	f7fe fe1b 	bl	8007fa8 <ai_buffer_get_size>
 8009372:	4285      	cmp	r5, r0
 8009374:	f0c0 811c 	bcc.w	80095b0 <ai_platform_network_process+0x328>
 8009378:	68e0      	ldr	r0, [r4, #12]
 800937a:	69b1      	ldr	r1, [r6, #24]
 800937c:	68c2      	ldr	r2, [r0, #12]
 800937e:	68cb      	ldr	r3, [r1, #12]
 8009380:	429a      	cmp	r2, r3
 8009382:	f040 8115 	bne.w	80095b0 <ai_platform_network_process+0x328>
 8009386:	6882      	ldr	r2, [r0, #8]
 8009388:	688b      	ldr	r3, [r1, #8]
 800938a:	429a      	cmp	r2, r3
 800938c:	f040 8110 	bne.w	80095b0 <ai_platform_network_process+0x328>
 8009390:	6842      	ldr	r2, [r0, #4]
 8009392:	684b      	ldr	r3, [r1, #4]
 8009394:	429a      	cmp	r2, r3
 8009396:	f040 810b 	bne.w	80095b0 <ai_platform_network_process+0x328>
 800939a:	69a3      	ldr	r3, [r4, #24]
 800939c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093a0:	f002 f902 	bl	800b5a8 <ai_array_get_data_byte_size>
 80093a4:	4605      	mov	r5, r0
 80093a6:	4620      	mov	r0, r4
 80093a8:	f002 f87a 	bl	800b4a0 <get_tensor_byte_size>
 80093ac:	4285      	cmp	r5, r0
 80093ae:	f0c0 80ff 	bcc.w	80095b0 <ai_platform_network_process+0x328>
 80093b2:	69a3      	ldr	r3, [r4, #24]
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	f002 f88b 	bl	800b4d0 <ai_array_to_buffer_fmt>
 80093ba:	6833      	ldr	r3, [r6, #0]
 80093bc:	4058      	eors	r0, r3
 80093be:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80093c2:	f040 81bc 	bne.w	800973e <ai_platform_network_process+0x4b6>
 80093c6:	6873      	ldr	r3, [r6, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 81af 	beq.w	800972c <ai_platform_network_process+0x4a4>
 80093ce:	69b3      	ldr	r3, [r6, #24]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 819f 	beq.w	8009716 <ai_platform_network_process+0x48e>
 80093d8:	9a01      	ldr	r2, [sp, #4]
 80093da:	429a      	cmp	r2, r3
 80093dc:	bf38      	it	cc
 80093de:	461a      	movcc	r2, r3
 80093e0:	4620      	mov	r0, r4
 80093e2:	9201      	str	r2, [sp, #4]
 80093e4:	f002 f85c 	bl	800b4a0 <get_tensor_byte_size>
 80093e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80093ec:	69b3      	ldr	r3, [r6, #24]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	fb00 f303 	mul.w	r3, r0, r3
 80093f4:	f8c8 300c 	str.w	r3, [r8, #12]
 80093f8:	6871      	ldr	r1, [r6, #4]
 80093fa:	f8c8 1004 	str.w	r1, [r8, #4]
 80093fe:	440b      	add	r3, r1
 8009400:	f849 300b 	str.w	r3, [r9, fp]
 8009404:	69a0      	ldr	r0, [r4, #24]
 8009406:	6803      	ldr	r3, [r0, #0]
 8009408:	009a      	lsls	r2, r3, #2
 800940a:	f107 0701 	add.w	r7, r7, #1
 800940e:	f106 061c 	add.w	r6, r6, #28
 8009412:	f100 80bd 	bmi.w	8009590 <ai_platform_network_process+0x308>
 8009416:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	4419      	add	r1, r3
 800941e:	6081      	str	r1, [r0, #8]
 8009420:	69a3      	ldr	r3, [r4, #24]
 8009422:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009426:	60da      	str	r2, [r3, #12]
 8009428:	f8ba 3000 	ldrh.w	r3, [sl]
 800942c:	42bb      	cmp	r3, r7
 800942e:	d888      	bhi.n	8009342 <ai_platform_network_process+0xba>
 8009430:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8009434:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009436:	f1bb 0f00 	cmp.w	fp, #0
 800943a:	f000 8189 	beq.w	8009750 <ai_platform_network_process+0x4c8>
 800943e:	2a01      	cmp	r2, #1
 8009440:	f240 8161 	bls.w	8009706 <ai_platform_network_process+0x47e>
 8009444:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8009448:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 815a 	beq.w	8009706 <ai_platform_network_process+0x47e>
 8009452:	465e      	mov	r6, fp
 8009454:	2700      	movs	r7, #0
 8009456:	462c      	mov	r4, r5
 8009458:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 80b5 	beq.w	80095cc <ai_platform_network_process+0x344>
 8009462:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8009466:	2d00      	cmp	r5, #0
 8009468:	f000 80b0 	beq.w	80095cc <ai_platform_network_process+0x344>
 800946c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009470:	f8d3 8000 	ldr.w	r8, [r3]
 8009474:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8009478:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800947c:	f000 8174 	beq.w	8009768 <ai_platform_network_process+0x4e0>
 8009480:	69ab      	ldr	r3, [r5, #24]
 8009482:	2101      	movs	r1, #1
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	9302      	str	r3, [sp, #8]
 8009488:	4630      	mov	r0, r6
 800948a:	f7fe fd8d 	bl	8007fa8 <ai_buffer_get_size>
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	4283      	cmp	r3, r0
 8009492:	f0c0 8137 	bcc.w	8009704 <ai_platform_network_process+0x47c>
 8009496:	68e8      	ldr	r0, [r5, #12]
 8009498:	69b1      	ldr	r1, [r6, #24]
 800949a:	68c2      	ldr	r2, [r0, #12]
 800949c:	68cb      	ldr	r3, [r1, #12]
 800949e:	429a      	cmp	r2, r3
 80094a0:	f040 8130 	bne.w	8009704 <ai_platform_network_process+0x47c>
 80094a4:	6882      	ldr	r2, [r0, #8]
 80094a6:	688b      	ldr	r3, [r1, #8]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	f040 812b 	bne.w	8009704 <ai_platform_network_process+0x47c>
 80094ae:	6842      	ldr	r2, [r0, #4]
 80094b0:	684b      	ldr	r3, [r1, #4]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	f040 8126 	bne.w	8009704 <ai_platform_network_process+0x47c>
 80094b8:	69ab      	ldr	r3, [r5, #24]
 80094ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094be:	f002 f873 	bl	800b5a8 <ai_array_get_data_byte_size>
 80094c2:	9002      	str	r0, [sp, #8]
 80094c4:	4628      	mov	r0, r5
 80094c6:	f001 ffeb 	bl	800b4a0 <get_tensor_byte_size>
 80094ca:	9b02      	ldr	r3, [sp, #8]
 80094cc:	4283      	cmp	r3, r0
 80094ce:	f0c0 8119 	bcc.w	8009704 <ai_platform_network_process+0x47c>
 80094d2:	69ab      	ldr	r3, [r5, #24]
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f001 fffb 	bl	800b4d0 <ai_array_to_buffer_fmt>
 80094da:	6833      	ldr	r3, [r6, #0]
 80094dc:	4058      	eors	r0, r3
 80094de:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80094e2:	f040 8139 	bne.w	8009758 <ai_platform_network_process+0x4d0>
 80094e6:	6873      	ldr	r3, [r6, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8150 	beq.w	800978e <ai_platform_network_process+0x506>
 80094ee:	69b3      	ldr	r3, [r6, #24]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8142 	beq.w	800977c <ai_platform_network_process+0x4f4>
 80094f8:	9a01      	ldr	r2, [sp, #4]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	bf38      	it	cc
 80094fe:	461a      	movcc	r2, r3
 8009500:	4628      	mov	r0, r5
 8009502:	9201      	str	r2, [sp, #4]
 8009504:	f001 ffcc 	bl	800b4a0 <get_tensor_byte_size>
 8009508:	f8ca 0008 	str.w	r0, [sl, #8]
 800950c:	69b3      	ldr	r3, [r6, #24]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	fb00 f303 	mul.w	r3, r0, r3
 8009514:	f8ca 300c 	str.w	r3, [sl, #12]
 8009518:	6871      	ldr	r1, [r6, #4]
 800951a:	f8ca 1004 	str.w	r1, [sl, #4]
 800951e:	440b      	add	r3, r1
 8009520:	f848 300b 	str.w	r3, [r8, fp]
 8009524:	69a8      	ldr	r0, [r5, #24]
 8009526:	6803      	ldr	r3, [r0, #0]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	f107 0701 	add.w	r7, r7, #1
 800952e:	f106 061c 	add.w	r6, r6, #28
 8009532:	d446      	bmi.n	80095c2 <ai_platform_network_process+0x33a>
 8009534:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009538:	1a9b      	subs	r3, r3, r2
 800953a:	4419      	add	r1, r3
 800953c:	6081      	str	r1, [r0, #8]
 800953e:	69ab      	ldr	r3, [r5, #24]
 8009540:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009544:	60da      	str	r2, [r3, #12]
 8009546:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800954a:	429f      	cmp	r7, r3
 800954c:	d384      	bcc.n	8009458 <ai_platform_network_process+0x1d0>
 800954e:	e03d      	b.n	80095cc <ai_platform_network_process+0x344>
 8009550:	e7fe      	b.n	8009550 <ai_platform_network_process+0x2c8>
 8009552:	68ea      	ldr	r2, [r5, #12]
 8009554:	616b      	str	r3, [r5, #20]
 8009556:	f002 0203 	and.w	r2, r2, #3
 800955a:	2a03      	cmp	r2, #3
 800955c:	d11e      	bne.n	800959c <ai_platform_network_process+0x314>
 800955e:	2217      	movs	r2, #23
 8009560:	2112      	movs	r1, #18
 8009562:	f105 0010 	add.w	r0, r5, #16
 8009566:	f000 fd81 	bl	800a06c <core_set_error>
 800956a:	2400      	movs	r4, #0
 800956c:	4620      	mov	r0, r4
 800956e:	b005      	add	sp, #20
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	a1c00100 	.word	0xa1c00100
 8009578:	e0002000 	.word	0xe0002000
 800957c:	e0042000 	.word	0xe0042000
 8009580:	58024000 	.word	0x58024000
 8009584:	f407a5c2 	.word	0xf407a5c2
 8009588:	b5e8b5cd 	.word	0xb5e8b5cd
 800958c:	40023000 	.word	0x40023000
 8009590:	f8ba 3000 	ldrh.w	r3, [sl]
 8009594:	429f      	cmp	r7, r3
 8009596:	f4ff aed4 	bcc.w	8009342 <ai_platform_network_process+0xba>
 800959a:	e749      	b.n	8009430 <ai_platform_network_process+0x1a8>
 800959c:	2230      	movs	r2, #48	; 0x30
 800959e:	2111      	movs	r1, #17
 80095a0:	f105 0010 	add.w	r0, r5, #16
 80095a4:	f000 fd62 	bl	800a06c <core_set_error>
 80095a8:	2400      	movs	r4, #0
 80095aa:	e7df      	b.n	800956c <ai_platform_network_process+0x2e4>
 80095ac:	462c      	mov	r4, r5
 80095ae:	e7dd      	b.n	800956c <ai_platform_network_process+0x2e4>
 80095b0:	9d02      	ldr	r5, [sp, #8]
 80095b2:	2218      	movs	r2, #24
 80095b4:	2112      	movs	r1, #18
 80095b6:	f105 0010 	add.w	r0, r5, #16
 80095ba:	f000 fd57 	bl	800a06c <core_set_error>
 80095be:	2400      	movs	r4, #0
 80095c0:	e7d4      	b.n	800956c <ai_platform_network_process+0x2e4>
 80095c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80095c6:	429f      	cmp	r7, r3
 80095c8:	f4ff af46 	bcc.w	8009458 <ai_platform_network_process+0x1d0>
 80095cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80095d0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80095d2:	82a3      	strh	r3, [r4, #20]
 80095d4:	4625      	mov	r5, r4
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	f040 808e 	bne.w	80096f8 <ai_platform_network_process+0x470>
 80095dc:	4616      	mov	r6, r2
 80095de:	4617      	mov	r7, r2
 80095e0:	8aec      	ldrh	r4, [r5, #22]
 80095e2:	429c      	cmp	r4, r3
 80095e4:	bf38      	it	cc
 80095e6:	46ab      	movcc	fp, r5
 80095e8:	d2c0      	bcs.n	800956c <ai_platform_network_process+0x2e4>
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	d030      	beq.n	8009650 <ai_platform_network_process+0x3c8>
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	e014      	b.n	800961e <ai_platform_network_process+0x396>
 80095f4:	6882      	ldr	r2, [r0, #8]
 80095f6:	68c5      	ldr	r5, [r0, #12]
 80095f8:	6863      	ldr	r3, [r4, #4]
 80095fa:	1b52      	subs	r2, r2, r5
 80095fc:	4413      	add	r3, r2
 80095fe:	6083      	str	r3, [r0, #8]
 8009600:	698b      	ldr	r3, [r1, #24]
 8009602:	6862      	ldr	r2, [r4, #4]
 8009604:	60da      	str	r2, [r3, #12]
 8009606:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800960a:	f859 200a 	ldr.w	r2, [r9, sl]
 800960e:	440b      	add	r3, r1
 8009610:	4293      	cmp	r3, r2
 8009612:	bf24      	itt	cs
 8009614:	68e3      	ldrcs	r3, [r4, #12]
 8009616:	1ad3      	subcs	r3, r2, r3
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	f108 0801 	add.w	r8, r8, #1
 800961e:	8833      	ldrh	r3, [r6, #0]
 8009620:	4543      	cmp	r3, r8
 8009622:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009626:	d913      	bls.n	8009650 <ai_platform_network_process+0x3c8>
 8009628:	6873      	ldr	r3, [r6, #4]
 800962a:	b18b      	cbz	r3, 8009650 <ai_platform_network_process+0x3c8>
 800962c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009630:	b171      	cbz	r1, 8009650 <ai_platform_network_process+0x3c8>
 8009632:	6988      	ldr	r0, [r1, #24]
 8009634:	68b2      	ldr	r2, [r6, #8]
 8009636:	6803      	ldr	r3, [r0, #0]
 8009638:	f8d2 9000 	ldr.w	r9, [r2]
 800963c:	009d      	lsls	r5, r3, #2
 800963e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009642:	d5d7      	bpl.n	80095f4 <ai_platform_network_process+0x36c>
 8009644:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8009648:	6880      	ldr	r0, [r0, #8]
 800964a:	f002 f9c7 	bl	800b9dc <memcpy>
 800964e:	e7da      	b.n	8009606 <ai_platform_network_process+0x37e>
 8009650:	4658      	mov	r0, fp
 8009652:	f000 ffb9 	bl	800a5c8 <ai_layers_forward_all>
 8009656:	2f00      	cmp	r7, #0
 8009658:	d03f      	beq.n	80096da <ai_platform_network_process+0x452>
 800965a:	2400      	movs	r4, #0
 800965c:	e016      	b.n	800968c <ai_platform_network_process+0x404>
 800965e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009662:	f859 100a 	ldr.w	r1, [r9, sl]
 8009666:	4413      	add	r3, r2
 8009668:	428b      	cmp	r3, r1
 800966a:	bf24      	itt	cs
 800966c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009670:	1acb      	subcs	r3, r1, r3
 8009672:	f8c8 3004 	str.w	r3, [r8, #4]
 8009676:	6981      	ldr	r1, [r0, #24]
 8009678:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800967c:	1b52      	subs	r2, r2, r5
 800967e:	4413      	add	r3, r2
 8009680:	608b      	str	r3, [r1, #8]
 8009682:	6983      	ldr	r3, [r0, #24]
 8009684:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	3401      	adds	r4, #1
 800968c:	883b      	ldrh	r3, [r7, #0]
 800968e:	42a3      	cmp	r3, r4
 8009690:	d923      	bls.n	80096da <ai_platform_network_process+0x452>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	b30b      	cbz	r3, 80096da <ai_platform_network_process+0x452>
 8009696:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800969a:	b1f0      	cbz	r0, 80096da <ai_platform_network_process+0x452>
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	6983      	ldr	r3, [r0, #24]
 80096a0:	f8d2 9000 	ldr.w	r9, [r2]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	0092      	lsls	r2, r2, #2
 80096a8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80096ac:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80096b0:	d5d5      	bpl.n	800965e <ai_platform_network_process+0x3d6>
 80096b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80096b6:	6899      	ldr	r1, [r3, #8]
 80096b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096bc:	f002 f98e 	bl	800b9dc <memcpy>
 80096c0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80096c4:	f859 200a 	ldr.w	r2, [r9, sl]
 80096c8:	440b      	add	r3, r1
 80096ca:	4293      	cmp	r3, r2
 80096cc:	bf24      	itt	cs
 80096ce:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80096d2:	1ad3      	subcs	r3, r2, r3
 80096d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80096d8:	e7d7      	b.n	800968a <ai_platform_network_process+0x402>
 80096da:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80096de:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80096e2:	3401      	adds	r4, #1
 80096e4:	b2a4      	uxth	r4, r4
 80096e6:	42a3      	cmp	r3, r4
 80096e8:	f8ab 4016 	strh.w	r4, [fp, #22]
 80096ec:	f63f af7d 	bhi.w	80095ea <ai_platform_network_process+0x362>
 80096f0:	4620      	mov	r0, r4
 80096f2:	b005      	add	sp, #20
 80096f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f8:	2a01      	cmp	r2, #1
 80096fa:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80096fc:	d03c      	beq.n	8009778 <ai_platform_network_process+0x4f0>
 80096fe:	f106 070c 	add.w	r7, r6, #12
 8009702:	e76d      	b.n	80095e0 <ai_platform_network_process+0x358>
 8009704:	4625      	mov	r5, r4
 8009706:	2218      	movs	r2, #24
 8009708:	2113      	movs	r1, #19
 800970a:	f105 0010 	add.w	r0, r5, #16
 800970e:	f000 fcad 	bl	800a06c <core_set_error>
 8009712:	2400      	movs	r4, #0
 8009714:	e72a      	b.n	800956c <ai_platform_network_process+0x2e4>
 8009716:	9d02      	ldr	r5, [sp, #8]
 8009718:	4604      	mov	r4, r0
 800971a:	2221      	movs	r2, #33	; 0x21
 800971c:	2112      	movs	r1, #18
 800971e:	f105 0010 	add.w	r0, r5, #16
 8009722:	f000 fca3 	bl	800a06c <core_set_error>
 8009726:	e721      	b.n	800956c <ai_platform_network_process+0x2e4>
 8009728:	9d02      	ldr	r5, [sp, #8]
 800972a:	e718      	b.n	800955e <ai_platform_network_process+0x2d6>
 800972c:	9d02      	ldr	r5, [sp, #8]
 800972e:	4604      	mov	r4, r0
 8009730:	2217      	movs	r2, #23
 8009732:	2112      	movs	r1, #18
 8009734:	f105 0010 	add.w	r0, r5, #16
 8009738:	f000 fc98 	bl	800a06c <core_set_error>
 800973c:	e716      	b.n	800956c <ai_platform_network_process+0x2e4>
 800973e:	9d02      	ldr	r5, [sp, #8]
 8009740:	2219      	movs	r2, #25
 8009742:	2112      	movs	r1, #18
 8009744:	f105 0010 	add.w	r0, r5, #16
 8009748:	f000 fc90 	bl	800a06c <core_set_error>
 800974c:	2400      	movs	r4, #0
 800974e:	e70d      	b.n	800956c <ai_platform_network_process+0x2e4>
 8009750:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009754:	82ab      	strh	r3, [r5, #20]
 8009756:	e73e      	b.n	80095d6 <ai_platform_network_process+0x34e>
 8009758:	f104 0010 	add.w	r0, r4, #16
 800975c:	2219      	movs	r2, #25
 800975e:	2113      	movs	r1, #19
 8009760:	f000 fc84 	bl	800a06c <core_set_error>
 8009764:	2400      	movs	r4, #0
 8009766:	e701      	b.n	800956c <ai_platform_network_process+0x2e4>
 8009768:	f104 0010 	add.w	r0, r4, #16
 800976c:	2217      	movs	r2, #23
 800976e:	2113      	movs	r1, #19
 8009770:	f000 fc7c 	bl	800a06c <core_set_error>
 8009774:	4654      	mov	r4, sl
 8009776:	e6f9      	b.n	800956c <ai_platform_network_process+0x2e4>
 8009778:	2700      	movs	r7, #0
 800977a:	e731      	b.n	80095e0 <ai_platform_network_process+0x358>
 800977c:	4625      	mov	r5, r4
 800977e:	2221      	movs	r2, #33	; 0x21
 8009780:	4604      	mov	r4, r0
 8009782:	2113      	movs	r1, #19
 8009784:	f105 0010 	add.w	r0, r5, #16
 8009788:	f000 fc70 	bl	800a06c <core_set_error>
 800978c:	e6ee      	b.n	800956c <ai_platform_network_process+0x2e4>
 800978e:	4625      	mov	r5, r4
 8009790:	2217      	movs	r2, #23
 8009792:	4604      	mov	r4, r0
 8009794:	2113      	movs	r1, #19
 8009796:	f105 0010 	add.w	r0, r5, #16
 800979a:	f000 fc67 	bl	800a06c <core_set_error>
 800979e:	e6e5      	b.n	800956c <ai_platform_network_process+0x2e4>

080097a0 <ai_platform_observer_node_info>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	b320      	cbz	r0, 80097ee <ai_platform_observer_node_info+0x4e>
 80097a4:	4b54      	ldr	r3, [pc, #336]	; (80098f8 <ai_platform_observer_node_info+0x158>)
 80097a6:	6802      	ldr	r2, [r0, #0]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	4604      	mov	r4, r0
 80097ac:	d11f      	bne.n	80097ee <ai_platform_observer_node_info+0x4e>
 80097ae:	4a53      	ldr	r2, [pc, #332]	; (80098fc <ai_platform_observer_node_info+0x15c>)
 80097b0:	6813      	ldr	r3, [r2, #0]
 80097b2:	f023 0301 	bic.w	r3, r3, #1
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	460d      	mov	r5, r1
 80097ba:	f7fe fcd7 	bl	800816c <_ai_platform_acquire_crc>
 80097be:	4b50      	ldr	r3, [pc, #320]	; (8009900 <ai_platform_observer_node_info+0x160>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ca:	d040      	beq.n	800984e <ai_platform_observer_node_info+0xae>
 80097cc:	4a4d      	ldr	r2, [pc, #308]	; (8009904 <ai_platform_observer_node_info+0x164>)
 80097ce:	2301      	movs	r3, #1
 80097d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80097d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1fb      	bne.n	80097d4 <ai_platform_observer_node_info+0x34>
 80097dc:	4b4a      	ldr	r3, [pc, #296]	; (8009908 <ai_platform_observer_node_info+0x168>)
 80097de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80097e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097e6:	4b49      	ldr	r3, [pc, #292]	; (800990c <ai_platform_observer_node_info+0x16c>)
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d03c      	beq.n	8009866 <ai_platform_observer_node_info+0xc6>
 80097ec:	e7fe      	b.n	80097ec <ai_platform_observer_node_info+0x4c>
 80097ee:	4a43      	ldr	r2, [pc, #268]	; (80098fc <ai_platform_observer_node_info+0x15c>)
 80097f0:	6813      	ldr	r3, [r2, #0]
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	f7fe fcb8 	bl	800816c <_ai_platform_acquire_crc>
 80097fc:	4b40      	ldr	r3, [pc, #256]	; (8009900 <ai_platform_observer_node_info+0x160>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009808:	d010      	beq.n	800982c <ai_platform_observer_node_info+0x8c>
 800980a:	4a3e      	ldr	r2, [pc, #248]	; (8009904 <ai_platform_observer_node_info+0x164>)
 800980c:	2301      	movs	r3, #1
 800980e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009812:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1fb      	bne.n	8009812 <ai_platform_observer_node_info+0x72>
 800981a:	4b3b      	ldr	r3, [pc, #236]	; (8009908 <ai_platform_observer_node_info+0x168>)
 800981c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009820:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009824:	4b39      	ldr	r3, [pc, #228]	; (800990c <ai_platform_observer_node_info+0x16c>)
 8009826:	429a      	cmp	r2, r3
 8009828:	d00d      	beq.n	8009846 <ai_platform_observer_node_info+0xa6>
 800982a:	e7fe      	b.n	800982a <ai_platform_observer_node_info+0x8a>
 800982c:	4a38      	ldr	r2, [pc, #224]	; (8009910 <ai_platform_observer_node_info+0x170>)
 800982e:	2301      	movs	r3, #1
 8009830:	6093      	str	r3, [r2, #8]
 8009832:	6893      	ldr	r3, [r2, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1fc      	bne.n	8009832 <ai_platform_observer_node_info+0x92>
 8009838:	4b33      	ldr	r3, [pc, #204]	; (8009908 <ai_platform_observer_node_info+0x168>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	4b33      	ldr	r3, [pc, #204]	; (800990c <ai_platform_observer_node_info+0x16c>)
 8009840:	429a      	cmp	r2, r3
 8009842:	d000      	beq.n	8009846 <ai_platform_observer_node_info+0xa6>
 8009844:	e7fe      	b.n	8009844 <ai_platform_observer_node_info+0xa4>
 8009846:	f7fe fc93 	bl	8008170 <_ai_platform_release_crc>
 800984a:	2000      	movs	r0, #0
 800984c:	bd70      	pop	{r4, r5, r6, pc}
 800984e:	4a30      	ldr	r2, [pc, #192]	; (8009910 <ai_platform_observer_node_info+0x170>)
 8009850:	2301      	movs	r3, #1
 8009852:	6093      	str	r3, [r2, #8]
 8009854:	6893      	ldr	r3, [r2, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1fc      	bne.n	8009854 <ai_platform_observer_node_info+0xb4>
 800985a:	4b2b      	ldr	r3, [pc, #172]	; (8009908 <ai_platform_observer_node_info+0x168>)
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	6812      	ldr	r2, [r2, #0]
 8009860:	4b2a      	ldr	r3, [pc, #168]	; (800990c <ai_platform_observer_node_info+0x16c>)
 8009862:	429a      	cmp	r2, r3
 8009864:	d11d      	bne.n	80098a2 <ai_platform_observer_node_info+0x102>
 8009866:	f7fe fc83 	bl	8008170 <_ai_platform_release_crc>
 800986a:	b1dd      	cbz	r5, 80098a4 <ai_platform_observer_node_info+0x104>
 800986c:	68e3      	ldr	r3, [r4, #12]
 800986e:	f013 0602 	ands.w	r6, r3, #2
 8009872:	d03a      	beq.n	80098ea <ai_platform_observer_node_info+0x14a>
 8009874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009876:	2100      	movs	r1, #0
 8009878:	e001      	b.n	800987e <ai_platform_observer_node_info+0xde>
 800987a:	b152      	cbz	r2, 8009892 <ai_platform_observer_node_info+0xf2>
 800987c:	4613      	mov	r3, r2
 800987e:	b288      	uxth	r0, r1
 8009880:	b13b      	cbz	r3, 8009892 <ai_platform_observer_node_info+0xf2>
 8009882:	882a      	ldrh	r2, [r5, #0]
 8009884:	4282      	cmp	r2, r0
 8009886:	f101 0101 	add.w	r1, r1, #1
 800988a:	d012      	beq.n	80098b2 <ai_platform_observer_node_info+0x112>
 800988c:	691a      	ldr	r2, [r3, #16]
 800988e:	429a      	cmp	r2, r3
 8009890:	d1f3      	bne.n	800987a <ai_platform_observer_node_info+0xda>
 8009892:	2214      	movs	r2, #20
 8009894:	4611      	mov	r1, r2
 8009896:	f104 0010 	add.w	r0, r4, #16
 800989a:	f000 fbe7 	bl	800a06c <core_set_error>
 800989e:	2000      	movs	r0, #0
 80098a0:	bd70      	pop	{r4, r5, r6, pc}
 80098a2:	e7fe      	b.n	80098a2 <ai_platform_observer_node_info+0x102>
 80098a4:	2210      	movs	r2, #16
 80098a6:	4611      	mov	r1, r2
 80098a8:	18a0      	adds	r0, r4, r2
 80098aa:	f000 fbdf 	bl	800a06c <core_set_error>
 80098ae:	4628      	mov	r0, r5
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	60ea      	str	r2, [r5, #12]
 80098b6:	8819      	ldrh	r1, [r3, #0]
 80098b8:	f240 120f 	movw	r2, #271	; 0x10f
 80098bc:	4291      	cmp	r1, r2
 80098be:	d007      	beq.n	80098d0 <ai_platform_observer_node_info+0x130>
 80098c0:	885a      	ldrh	r2, [r3, #2]
 80098c2:	80aa      	strh	r2, [r5, #4]
 80098c4:	881a      	ldrh	r2, [r3, #0]
 80098c6:	806a      	strh	r2, [r5, #2]
 80098c8:	2300      	movs	r3, #0
 80098ca:	60ab      	str	r3, [r5, #8]
 80098cc:	2001      	movs	r0, #1
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	69da      	ldr	r2, [r3, #28]
 80098d2:	8853      	ldrh	r3, [r2, #2]
 80098d4:	80ab      	strh	r3, [r5, #4]
 80098d6:	8813      	ldrh	r3, [r2, #0]
 80098d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e0:	806b      	strh	r3, [r5, #2]
 80098e2:	6993      	ldr	r3, [r2, #24]
 80098e4:	60ab      	str	r3, [r5, #8]
 80098e6:	2001      	movs	r0, #1
 80098e8:	bd70      	pop	{r4, r5, r6, pc}
 80098ea:	2210      	movs	r2, #16
 80098ec:	2111      	movs	r1, #17
 80098ee:	18a0      	adds	r0, r4, r2
 80098f0:	f000 fbbc 	bl	800a06c <core_set_error>
 80098f4:	4630      	mov	r0, r6
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	a1c00100 	.word	0xa1c00100
 80098fc:	e0002000 	.word	0xe0002000
 8009900:	e0042000 	.word	0xe0042000
 8009904:	58024000 	.word	0x58024000
 8009908:	f407a5c2 	.word	0xf407a5c2
 800990c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009910:	40023000 	.word	0x40023000

08009914 <ai_platform_observer_register>:
 8009914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009918:	b330      	cbz	r0, 8009968 <ai_platform_observer_register+0x54>
 800991a:	4691      	mov	r9, r2
 800991c:	461f      	mov	r7, r3
 800991e:	6802      	ldr	r2, [r0, #0]
 8009920:	4b4a      	ldr	r3, [pc, #296]	; (8009a4c <ai_platform_observer_register+0x138>)
 8009922:	429a      	cmp	r2, r3
 8009924:	4605      	mov	r5, r0
 8009926:	d11f      	bne.n	8009968 <ai_platform_observer_register+0x54>
 8009928:	4a49      	ldr	r2, [pc, #292]	; (8009a50 <ai_platform_observer_register+0x13c>)
 800992a:	6813      	ldr	r3, [r2, #0]
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	4688      	mov	r8, r1
 8009934:	f7fe fc1a 	bl	800816c <_ai_platform_acquire_crc>
 8009938:	4b46      	ldr	r3, [pc, #280]	; (8009a54 <ai_platform_observer_register+0x140>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009944:	d041      	beq.n	80099ca <ai_platform_observer_register+0xb6>
 8009946:	4e44      	ldr	r6, [pc, #272]	; (8009a58 <ai_platform_observer_register+0x144>)
 8009948:	2301      	movs	r3, #1
 800994a:	f8c6 3c08 	str.w	r3, [r6, #3080]	; 0xc08
 800994e:	f8d6 4c08 	ldr.w	r4, [r6, #3080]	; 0xc08
 8009952:	2c00      	cmp	r4, #0
 8009954:	d1fb      	bne.n	800994e <ai_platform_observer_register+0x3a>
 8009956:	4b41      	ldr	r3, [pc, #260]	; (8009a5c <ai_platform_observer_register+0x148>)
 8009958:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
 800995c:	f8d6 2c00 	ldr.w	r2, [r6, #3072]	; 0xc00
 8009960:	4b3f      	ldr	r3, [pc, #252]	; (8009a60 <ai_platform_observer_register+0x14c>)
 8009962:	429a      	cmp	r2, r3
 8009964:	d03d      	beq.n	80099e2 <ai_platform_observer_register+0xce>
 8009966:	e7fe      	b.n	8009966 <ai_platform_observer_register+0x52>
 8009968:	4a39      	ldr	r2, [pc, #228]	; (8009a50 <ai_platform_observer_register+0x13c>)
 800996a:	6813      	ldr	r3, [r2, #0]
 800996c:	f023 0301 	bic.w	r3, r3, #1
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	f7fe fbfb 	bl	800816c <_ai_platform_acquire_crc>
 8009976:	4b37      	ldr	r3, [pc, #220]	; (8009a54 <ai_platform_observer_register+0x140>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800997e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009982:	d010      	beq.n	80099a6 <ai_platform_observer_register+0x92>
 8009984:	4a34      	ldr	r2, [pc, #208]	; (8009a58 <ai_platform_observer_register+0x144>)
 8009986:	2301      	movs	r3, #1
 8009988:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800998c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1fb      	bne.n	800998c <ai_platform_observer_register+0x78>
 8009994:	4b31      	ldr	r3, [pc, #196]	; (8009a5c <ai_platform_observer_register+0x148>)
 8009996:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800999a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800999e:	4b30      	ldr	r3, [pc, #192]	; (8009a60 <ai_platform_observer_register+0x14c>)
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d00d      	beq.n	80099c0 <ai_platform_observer_register+0xac>
 80099a4:	e7fe      	b.n	80099a4 <ai_platform_observer_register+0x90>
 80099a6:	4a2f      	ldr	r2, [pc, #188]	; (8009a64 <ai_platform_observer_register+0x150>)
 80099a8:	2301      	movs	r3, #1
 80099aa:	6093      	str	r3, [r2, #8]
 80099ac:	6893      	ldr	r3, [r2, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1fc      	bne.n	80099ac <ai_platform_observer_register+0x98>
 80099b2:	4b2a      	ldr	r3, [pc, #168]	; (8009a5c <ai_platform_observer_register+0x148>)
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	6812      	ldr	r2, [r2, #0]
 80099b8:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <ai_platform_observer_register+0x14c>)
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d000      	beq.n	80099c0 <ai_platform_observer_register+0xac>
 80099be:	e7fe      	b.n	80099be <ai_platform_observer_register+0xaa>
 80099c0:	f7fe fbd6 	bl	8008170 <_ai_platform_release_crc>
 80099c4:	2000      	movs	r0, #0
 80099c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ca:	4a26      	ldr	r2, [pc, #152]	; (8009a64 <ai_platform_observer_register+0x150>)
 80099cc:	2301      	movs	r3, #1
 80099ce:	6093      	str	r3, [r2, #8]
 80099d0:	6893      	ldr	r3, [r2, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1fc      	bne.n	80099d0 <ai_platform_observer_register+0xbc>
 80099d6:	4b21      	ldr	r3, [pc, #132]	; (8009a5c <ai_platform_observer_register+0x148>)
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	6812      	ldr	r2, [r2, #0]
 80099dc:	4b20      	ldr	r3, [pc, #128]	; (8009a60 <ai_platform_observer_register+0x14c>)
 80099de:	429a      	cmp	r2, r3
 80099e0:	d10b      	bne.n	80099fa <ai_platform_observer_register+0xe6>
 80099e2:	f7fe fbc5 	bl	8008170 <_ai_platform_release_crc>
 80099e6:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80099e8:	b144      	cbz	r4, 80099fc <ai_platform_observer_register+0xe8>
 80099ea:	2240      	movs	r2, #64	; 0x40
 80099ec:	2111      	movs	r1, #17
 80099ee:	f105 0010 	add.w	r0, r5, #16
 80099f2:	f000 fb3b 	bl	800a06c <core_set_error>
 80099f6:	2000      	movs	r0, #0
 80099f8:	e7e5      	b.n	80099c6 <ai_platform_observer_register+0xb2>
 80099fa:	e7fe      	b.n	80099fa <ai_platform_observer_register+0xe6>
 80099fc:	2014      	movs	r0, #20
 80099fe:	f000 f8b1 	bl	8009b64 <core_mem_alloc>
 8009a02:	4606      	mov	r6, r0
 8009a04:	b1d8      	cbz	r0, 8009a3e <ai_platform_observer_register+0x12a>
 8009a06:	81c4      	strh	r4, [r0, #14]
 8009a08:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	e006      	b.n	8009a1c <ai_platform_observer_register+0x108>
 8009a0e:	81f1      	strh	r1, [r6, #14]
 8009a10:	691a      	ldr	r2, [r3, #16]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	b2a1      	uxth	r1, r4
 8009a16:	d004      	beq.n	8009a22 <ai_platform_observer_register+0x10e>
 8009a18:	b11a      	cbz	r2, 8009a22 <ai_platform_observer_register+0x10e>
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	1c4c      	adds	r4, r1, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1f5      	bne.n	8009a0e <ai_platform_observer_register+0xfa>
 8009a22:	4a11      	ldr	r2, [pc, #68]	; (8009a68 <ai_platform_observer_register+0x154>)
 8009a24:	f8c6 8000 	str.w	r8, [r6]
 8009a28:	b2fb      	uxtb	r3, r7
 8009a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a2e:	2100      	movs	r1, #0
 8009a30:	e9c6 9301 	strd	r9, r3, [r6, #4]
 8009a34:	81b1      	strh	r1, [r6, #12]
 8009a36:	2001      	movs	r0, #1
 8009a38:	e9c5 260f 	strd	r2, r6, [r5, #60]	; 0x3c
 8009a3c:	e7c3      	b.n	80099c6 <ai_platform_observer_register+0xb2>
 8009a3e:	2210      	movs	r2, #16
 8009a40:	2131      	movs	r1, #49	; 0x31
 8009a42:	18a8      	adds	r0, r5, r2
 8009a44:	f000 fb12 	bl	800a06c <core_set_error>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	e7bc      	b.n	80099c6 <ai_platform_observer_register+0xb2>
 8009a4c:	a1c00100 	.word	0xa1c00100
 8009a50:	e0002000 	.word	0xe0002000
 8009a54:	e0042000 	.word	0xe0042000
 8009a58:	58024000 	.word	0x58024000
 8009a5c:	f407a5c2 	.word	0xf407a5c2
 8009a60:	b5e8b5cd 	.word	0xb5e8b5cd
 8009a64:	40023000 	.word	0x40023000
 8009a68:	08008055 	.word	0x08008055

08009a6c <ai_platform_observer_unregister>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	b318      	cbz	r0, 8009ab8 <ai_platform_observer_unregister+0x4c>
 8009a70:	4b35      	ldr	r3, [pc, #212]	; (8009b48 <ai_platform_observer_unregister+0xdc>)
 8009a72:	6802      	ldr	r2, [r0, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	4604      	mov	r4, r0
 8009a78:	d11e      	bne.n	8009ab8 <ai_platform_observer_unregister+0x4c>
 8009a7a:	4a34      	ldr	r2, [pc, #208]	; (8009b4c <ai_platform_observer_unregister+0xe0>)
 8009a7c:	6813      	ldr	r3, [r2, #0]
 8009a7e:	f023 0301 	bic.w	r3, r3, #1
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	f7fe fb72 	bl	800816c <_ai_platform_acquire_crc>
 8009a88:	4b31      	ldr	r3, [pc, #196]	; (8009b50 <ai_platform_observer_unregister+0xe4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a94:	d040      	beq.n	8009b18 <ai_platform_observer_unregister+0xac>
 8009a96:	4a2f      	ldr	r2, [pc, #188]	; (8009b54 <ai_platform_observer_unregister+0xe8>)
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1fb      	bne.n	8009a9e <ai_platform_observer_unregister+0x32>
 8009aa6:	4b2c      	ldr	r3, [pc, #176]	; (8009b58 <ai_platform_observer_unregister+0xec>)
 8009aa8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009aac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009ab0:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <ai_platform_observer_unregister+0xf0>)
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d03c      	beq.n	8009b30 <ai_platform_observer_unregister+0xc4>
 8009ab6:	e7fe      	b.n	8009ab6 <ai_platform_observer_unregister+0x4a>
 8009ab8:	4a24      	ldr	r2, [pc, #144]	; (8009b4c <ai_platform_observer_unregister+0xe0>)
 8009aba:	6813      	ldr	r3, [r2, #0]
 8009abc:	f023 0301 	bic.w	r3, r3, #1
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	f7fe fb53 	bl	800816c <_ai_platform_acquire_crc>
 8009ac6:	4b22      	ldr	r3, [pc, #136]	; (8009b50 <ai_platform_observer_unregister+0xe4>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ad2:	d010      	beq.n	8009af6 <ai_platform_observer_unregister+0x8a>
 8009ad4:	4a1f      	ldr	r2, [pc, #124]	; (8009b54 <ai_platform_observer_unregister+0xe8>)
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009adc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1fb      	bne.n	8009adc <ai_platform_observer_unregister+0x70>
 8009ae4:	4b1c      	ldr	r3, [pc, #112]	; (8009b58 <ai_platform_observer_unregister+0xec>)
 8009ae6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009aea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009aee:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <ai_platform_observer_unregister+0xf0>)
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d00d      	beq.n	8009b10 <ai_platform_observer_unregister+0xa4>
 8009af4:	e7fe      	b.n	8009af4 <ai_platform_observer_unregister+0x88>
 8009af6:	4a1a      	ldr	r2, [pc, #104]	; (8009b60 <ai_platform_observer_unregister+0xf4>)
 8009af8:	2301      	movs	r3, #1
 8009afa:	6093      	str	r3, [r2, #8]
 8009afc:	6893      	ldr	r3, [r2, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1fc      	bne.n	8009afc <ai_platform_observer_unregister+0x90>
 8009b02:	4b15      	ldr	r3, [pc, #84]	; (8009b58 <ai_platform_observer_unregister+0xec>)
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	6812      	ldr	r2, [r2, #0]
 8009b08:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <ai_platform_observer_unregister+0xf0>)
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d000      	beq.n	8009b10 <ai_platform_observer_unregister+0xa4>
 8009b0e:	e7fe      	b.n	8009b0e <ai_platform_observer_unregister+0xa2>
 8009b10:	f7fe fb2e 	bl	8008170 <_ai_platform_release_crc>
 8009b14:	2000      	movs	r0, #0
 8009b16:	bd10      	pop	{r4, pc}
 8009b18:	4a11      	ldr	r2, [pc, #68]	; (8009b60 <ai_platform_observer_unregister+0xf4>)
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	6093      	str	r3, [r2, #8]
 8009b1e:	6893      	ldr	r3, [r2, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1fc      	bne.n	8009b1e <ai_platform_observer_unregister+0xb2>
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <ai_platform_observer_unregister+0xec>)
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	6812      	ldr	r2, [r2, #0]
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <ai_platform_observer_unregister+0xf0>)
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d10a      	bne.n	8009b46 <ai_platform_observer_unregister+0xda>
 8009b30:	f7fe fb1e 	bl	8008170 <_ai_platform_release_crc>
 8009b34:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009b36:	b108      	cbz	r0, 8009b3c <ai_platform_observer_unregister+0xd0>
 8009b38:	f000 f822 	bl	8009b80 <core_mem_free>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8009b42:	2001      	movs	r0, #1
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	e7fe      	b.n	8009b46 <ai_platform_observer_unregister+0xda>
 8009b48:	a1c00100 	.word	0xa1c00100
 8009b4c:	e0002000 	.word	0xe0002000
 8009b50:	e0042000 	.word	0xe0042000
 8009b54:	58024000 	.word	0x58024000
 8009b58:	f407a5c2 	.word	0xf407a5c2
 8009b5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009b60:	40023000 	.word	0x40023000

08009b64 <core_mem_alloc>:
 8009b64:	b148      	cbz	r0, 8009b7a <core_mem_alloc+0x16>
 8009b66:	b508      	push	{r3, lr}
 8009b68:	3004      	adds	r0, #4
 8009b6a:	f7fd fbe7 	bl	800733c <__wrap_malloc>
 8009b6e:	b110      	cbz	r0, 8009b76 <core_mem_alloc+0x12>
 8009b70:	6000      	str	r0, [r0, #0]
 8009b72:	3004      	adds	r0, #4
 8009b74:	bd08      	pop	{r3, pc}
 8009b76:	2000      	movs	r0, #0
 8009b78:	bd08      	pop	{r3, pc}
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop

08009b80 <core_mem_free>:
 8009b80:	b150      	cbz	r0, 8009b98 <core_mem_free+0x18>
 8009b82:	b508      	push	{r3, lr}
 8009b84:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009b88:	1f03      	subs	r3, r0, #4
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d103      	bne.n	8009b96 <core_mem_free+0x16>
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fd fbfc 	bl	800738c <__wrap_free>
 8009b94:	2000      	movs	r0, #0
 8009b96:	bd08      	pop	{r3, pc}
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop

08009b9c <node_convert>:
 8009b9c:	6982      	ldr	r2, [r0, #24]
 8009b9e:	8813      	ldrh	r3, [r2, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d049      	beq.n	8009c38 <node_convert+0x9c>
 8009ba4:	6852      	ldr	r2, [r2, #4]
 8009ba6:	6850      	ldr	r0, [r2, #4]
 8009ba8:	b100      	cbz	r0, 8009bac <node_convert+0x10>
 8009baa:	6800      	ldr	r0, [r0, #0]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	f000 813a 	beq.w	8009e26 <node_convert+0x28a>
 8009bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb6:	6915      	ldr	r5, [r2, #16]
 8009bb8:	b105      	cbz	r5, 8009bbc <node_convert+0x20>
 8009bba:	682d      	ldr	r5, [r5, #0]
 8009bbc:	6883      	ldr	r3, [r0, #8]
 8009bbe:	0a1b      	lsrs	r3, r3, #8
 8009bc0:	f000 80eb 	beq.w	8009d9a <node_convert+0x1fe>
 8009bc4:	68c1      	ldr	r1, [r0, #12]
 8009bc6:	2401      	movs	r4, #1
 8009bc8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009bcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	fb02 f404 	mul.w	r4, r2, r4
 8009bd6:	d1f9      	bne.n	8009bcc <node_convert+0x30>
 8009bd8:	6982      	ldr	r2, [r0, #24]
 8009bda:	69af      	ldr	r7, [r5, #24]
 8009bdc:	6813      	ldr	r3, [r2, #0]
 8009bde:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8009be2:	2901      	cmp	r1, #1
 8009be4:	d02a      	beq.n	8009c3c <node_convert+0xa0>
 8009be6:	6800      	ldr	r0, [r0, #0]
 8009be8:	68bd      	ldr	r5, [r7, #8]
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d068      	beq.n	8009cc0 <node_convert+0x124>
 8009bee:	6846      	ldr	r6, [r0, #4]
 8009bf0:	6892      	ldr	r2, [r2, #8]
 8009bf2:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	f000 80b6 	beq.w	8009d68 <node_convert+0x1cc>
 8009bfc:	8843      	ldrh	r3, [r0, #2]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8087 	beq.w	8009d12 <node_convert+0x176>
 8009c04:	6833      	ldr	r3, [r6, #0]
 8009c06:	ed93 7a00 	vldr	s14, [r3]
 8009c0a:	6873      	ldr	r3, [r6, #4]
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	f000 80c2 	beq.w	8009d96 <node_convert+0x1fa>
 8009c12:	f993 1000 	ldrsb.w	r1, [r3]
 8009c16:	b16c      	cbz	r4, 8009c34 <node_convert+0x98>
 8009c18:	4414      	add	r4, r2
 8009c1a:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8009c1e:	1a5b      	subs	r3, r3, r1
 8009c20:	ee07 3a90 	vmov	s15, r3
 8009c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c28:	4294      	cmp	r4, r2
 8009c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c2e:	ece5 7a01 	vstmia	r5!, {s15}
 8009c32:	d1f2      	bne.n	8009c1a <node_convert+0x7e>
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	deff      	udf	#255	; 0xff
 8009c3c:	682e      	ldr	r6, [r5, #0]
 8009c3e:	6895      	ldr	r5, [r2, #8]
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	f000 80ac 	beq.w	8009d9e <node_convert+0x202>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	6871      	ldr	r1, [r6, #4]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d063      	beq.n	8009d1c <node_convert+0x180>
 8009c54:	8870      	ldrh	r0, [r6, #2]
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d066      	beq.n	8009d28 <node_convert+0x18c>
 8009c5a:	6808      	ldr	r0, [r1, #0]
 8009c5c:	edd0 7a00 	vldr	s15, [r0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 80d5 	beq.w	8009e10 <node_convert+0x274>
 8009c66:	684b      	ldr	r3, [r1, #4]
 8009c68:	f993 3000 	ldrsb.w	r3, [r3]
 8009c6c:	ee06 3a90 	vmov	s13, r3
 8009c70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009c74:	2c00      	cmp	r4, #0
 8009c76:	d0dd      	beq.n	8009c34 <node_convert+0x98>
 8009c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c7c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8009c80:	4414      	add	r4, r2
 8009c82:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 8009e2c <node_convert+0x290>
 8009c86:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009c8a:	ecb5 7a01 	vldmia	r5!, {s14}
 8009c8e:	eef0 7a66 	vmov.f32	s15, s13
 8009c92:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9e:	bfac      	ite	ge
 8009ca0:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8009ca4:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8009ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cac:	ee17 3a90 	vmov	r3, s15
 8009cb0:	f303 0307 	ssat	r3, #8, r3
 8009cb4:	f802 3b01 	strb.w	r3, [r2], #1
 8009cb8:	42a2      	cmp	r2, r4
 8009cba:	d1e6      	bne.n	8009c8a <node_convert+0xee>
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8009cc4:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8009cc8:	1b8e      	subs	r6, r1, r6
 8009cca:	3640      	adds	r6, #64	; 0x40
 8009ccc:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8009cd0:	2908      	cmp	r1, #8
 8009cd2:	6890      	ldr	r0, [r2, #8]
 8009cd4:	eba6 0603 	sub.w	r6, r6, r3
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f000 808a 	beq.w	8009df4 <node_convert+0x258>
 8009ce0:	f001 fafa 	bl	800b2d8 <st_dsp_arm_q15_to_float>
 8009ce4:	2e00      	cmp	r6, #0
 8009ce6:	d0a5      	beq.n	8009c34 <node_convert+0x98>
 8009ce8:	ee07 6a90 	vmov	s15, r6
 8009cec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009cf0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009cf4:	f004 fa4c 	bl	800e190 <powf>
 8009cf8:	2c00      	cmp	r4, #0
 8009cfa:	d09b      	beq.n	8009c34 <node_convert+0x98>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	ecf5 7a01 	vldmia	r5!, {s15}
 8009d02:	3301      	adds	r3, #1
 8009d04:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009d08:	429c      	cmp	r4, r3
 8009d0a:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009d0e:	d1f6      	bne.n	8009cfe <node_convert+0x162>
 8009d10:	e790      	b.n	8009c34 <node_convert+0x98>
 8009d12:	b359      	cbz	r1, 8009d6c <node_convert+0x1d0>
 8009d14:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009e30 <node_convert+0x294>
 8009d18:	4619      	mov	r1, r3
 8009d1a:	e77c      	b.n	8009c16 <node_convert+0x7a>
 8009d1c:	b133      	cbz	r3, 8009d2c <node_convert+0x190>
 8009d1e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009e30 <node_convert+0x294>
 8009d22:	eef0 7a66 	vmov.f32	s15, s13
 8009d26:	e7a5      	b.n	8009c74 <node_convert+0xd8>
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f8      	bne.n	8009d1e <node_convert+0x182>
 8009d2c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009e30 <node_convert+0x294>
 8009d30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009d34:	2c00      	cmp	r4, #0
 8009d36:	f43f af7d 	beq.w	8009c34 <node_convert+0x98>
 8009d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d3e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8009d42:	4414      	add	r4, r2
 8009d44:	ecb5 7a01 	vldmia	r5!, {s14}
 8009d48:	eef0 7a66 	vmov.f32	s15, s13
 8009d4c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d54:	ee17 3a90 	vmov	r3, s15
 8009d58:	f383 0308 	usat	r3, #8, r3
 8009d5c:	f802 3b01 	strb.w	r3, [r2], #1
 8009d60:	42a2      	cmp	r2, r4
 8009d62:	d1ef      	bne.n	8009d44 <node_convert+0x1a8>
 8009d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d68:	2900      	cmp	r1, #0
 8009d6a:	d146      	bne.n	8009dfa <node_convert+0x25e>
 8009d6c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009e30 <node_convert+0x294>
 8009d70:	2c00      	cmp	r4, #0
 8009d72:	f43f af5f 	beq.w	8009c34 <node_convert+0x98>
 8009d76:	4414      	add	r4, r2
 8009d78:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009d7c:	1a5b      	subs	r3, r3, r1
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d86:	42a2      	cmp	r2, r4
 8009d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d8c:	ece5 7a01 	vstmia	r5!, {s15}
 8009d90:	d1f2      	bne.n	8009d78 <node_convert+0x1dc>
 8009d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d96:	7819      	ldrb	r1, [r3, #0]
 8009d98:	e7ea      	b.n	8009d70 <node_convert+0x1d4>
 8009d9a:	2401      	movs	r4, #1
 8009d9c:	e71c      	b.n	8009bd8 <node_convert+0x3c>
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8009da4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8009da8:	eba8 0303 	sub.w	r3, r8, r3
 8009dac:	3340      	adds	r3, #64	; 0x40
 8009dae:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	d014      	beq.n	8009de0 <node_convert+0x244>
 8009db6:	425b      	negs	r3, r3
 8009db8:	ee00 3a90 	vmov	s1, r3
 8009dbc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009dc0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8009dc4:	f004 f9e4 	bl	800e190 <powf>
 8009dc8:	b154      	cbz	r4, 8009de0 <node_convert+0x244>
 8009dca:	4633      	mov	r3, r6
 8009dcc:	462a      	mov	r2, r5
 8009dce:	ecf2 7a01 	vldmia	r2!, {s15}
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009dde:	d1f6      	bne.n	8009dce <node_convert+0x232>
 8009de0:	f1b8 0f08 	cmp.w	r8, #8
 8009de4:	d00d      	beq.n	8009e02 <node_convert+0x266>
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	4622      	mov	r2, r4
 8009dea:	4628      	mov	r0, r5
 8009dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df0:	f001 b8ce 	b.w	800af90 <st_dsp_arm_float_to_q15>
 8009df4:	f001 fad6 	bl	800b3a4 <st_dsp_arm_q7_to_float>
 8009df8:	e774      	b.n	8009ce4 <node_convert+0x148>
 8009dfa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009e30 <node_convert+0x294>
 8009dfe:	4631      	mov	r1, r6
 8009e00:	e709      	b.n	8009c16 <node_convert+0x7a>
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	4622      	mov	r2, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	f001 b986 	b.w	800b11c <st_dsp_arm_float_to_q7>
 8009e10:	684b      	ldr	r3, [r1, #4]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	ee06 3a90 	vmov	s13, r3
 8009e18:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009e1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009e20:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009e24:	e786      	b.n	8009d34 <node_convert+0x198>
 8009e26:	2300      	movs	r3, #0
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	deff      	udf	#255	; 0xff
 8009e2c:	3efffffc 	.word	0x3efffffc
 8009e30:	00000000 	.word	0x00000000

08009e34 <node_convert_integer>:
 8009e34:	6982      	ldr	r2, [r0, #24]
 8009e36:	8813      	ldrh	r3, [r2, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d058      	beq.n	8009eee <node_convert_integer+0xba>
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	6852      	ldr	r2, [r2, #4]
 8009e40:	6856      	ldr	r6, [r2, #4]
 8009e42:	b082      	sub	sp, #8
 8009e44:	b106      	cbz	r6, 8009e48 <node_convert_integer+0x14>
 8009e46:	6836      	ldr	r6, [r6, #0]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	f000 8100 	beq.w	800a04e <node_convert_integer+0x21a>
 8009e4e:	6915      	ldr	r5, [r2, #16]
 8009e50:	b105      	cbz	r5, 8009e54 <node_convert_integer+0x20>
 8009e52:	682d      	ldr	r5, [r5, #0]
 8009e54:	68b3      	ldr	r3, [r6, #8]
 8009e56:	0a1b      	lsrs	r3, r3, #8
 8009e58:	f000 80d3 	beq.w	800a002 <node_convert_integer+0x1ce>
 8009e5c:	68f0      	ldr	r0, [r6, #12]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009e64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e68:	4298      	cmp	r0, r3
 8009e6a:	fb01 f202 	mul.w	r2, r1, r2
 8009e6e:	d1f9      	bne.n	8009e64 <node_convert_integer+0x30>
 8009e70:	6833      	ldr	r3, [r6, #0]
 8009e72:	682c      	ldr	r4, [r5, #0]
 8009e74:	b17b      	cbz	r3, 8009e96 <node_convert_integer+0x62>
 8009e76:	6859      	ldr	r1, [r3, #4]
 8009e78:	b169      	cbz	r1, 8009e96 <node_convert_integer+0x62>
 8009e7a:	8858      	ldrh	r0, [r3, #2]
 8009e7c:	b158      	cbz	r0, 8009e96 <node_convert_integer+0x62>
 8009e7e:	6809      	ldr	r1, [r1, #0]
 8009e80:	ed91 7a00 	vldr	s14, [r1]
 8009e84:	b15c      	cbz	r4, 8009e9e <node_convert_integer+0x6a>
 8009e86:	6861      	ldr	r1, [r4, #4]
 8009e88:	b149      	cbz	r1, 8009e9e <node_convert_integer+0x6a>
 8009e8a:	8860      	ldrh	r0, [r4, #2]
 8009e8c:	b138      	cbz	r0, 8009e9e <node_convert_integer+0x6a>
 8009e8e:	6809      	ldr	r1, [r1, #0]
 8009e90:	edd1 7a00 	vldr	s15, [r1]
 8009e94:	e005      	b.n	8009ea2 <node_convert_integer+0x6e>
 8009e96:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a054 <node_convert_integer+0x220>
 8009e9a:	2c00      	cmp	r4, #0
 8009e9c:	d1f3      	bne.n	8009e86 <node_convert_integer+0x52>
 8009e9e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 800a054 <node_convert_integer+0x220>
 8009ea2:	69b0      	ldr	r0, [r6, #24]
 8009ea4:	69ad      	ldr	r5, [r5, #24]
 8009ea6:	6806      	ldr	r6, [r0, #0]
 8009ea8:	6829      	ldr	r1, [r5, #0]
 8009eaa:	0236      	lsls	r6, r6, #8
 8009eac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009eb0:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 8009eb4:	d41d      	bmi.n	8009ef2 <node_convert_integer+0xbe>
 8009eb6:	2900      	cmp	r1, #0
 8009eb8:	f040 8081 	bne.w	8009fbe <node_convert_integer+0x18a>
 8009ebc:	6880      	ldr	r0, [r0, #8]
 8009ebe:	68a9      	ldr	r1, [r5, #8]
 8009ec0:	b13b      	cbz	r3, 8009ed2 <node_convert_integer+0x9e>
 8009ec2:	685d      	ldr	r5, [r3, #4]
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	f000 80a7 	beq.w	800a018 <node_convert_integer+0x1e4>
 8009eca:	885b      	ldrh	r3, [r3, #2]
 8009ecc:	b10b      	cbz	r3, 8009ed2 <node_convert_integer+0x9e>
 8009ece:	686b      	ldr	r3, [r5, #4]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b13c      	cbz	r4, 8009ee4 <node_convert_integer+0xb0>
 8009ed4:	6865      	ldr	r5, [r4, #4]
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	f000 80ad 	beq.w	800a036 <node_convert_integer+0x202>
 8009edc:	8864      	ldrh	r4, [r4, #2]
 8009ede:	b10c      	cbz	r4, 8009ee4 <node_convert_integer+0xb0>
 8009ee0:	686c      	ldr	r4, [r5, #4]
 8009ee2:	7824      	ldrb	r4, [r4, #0]
 8009ee4:	9400      	str	r4, [sp, #0]
 8009ee6:	f000 fbcf 	bl	800a688 <forward_lite_node_convert_integer_iu8ou8>
 8009eea:	b002      	add	sp, #8
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	deff      	udf	#255	; 0xff
 8009ef2:	2900      	cmp	r1, #0
 8009ef4:	d042      	beq.n	8009f7c <node_convert_integer+0x148>
 8009ef6:	6886      	ldr	r6, [r0, #8]
 8009ef8:	68a9      	ldr	r1, [r5, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d07f      	beq.n	8009ffe <node_convert_integer+0x1ca>
 8009efe:	6858      	ldr	r0, [r3, #4]
 8009f00:	2800      	cmp	r0, #0
 8009f02:	f000 8092 	beq.w	800a02a <node_convert_integer+0x1f6>
 8009f06:	885d      	ldrh	r5, [r3, #2]
 8009f08:	b115      	cbz	r5, 8009f10 <node_convert_integer+0xdc>
 8009f0a:	6843      	ldr	r3, [r0, #4]
 8009f0c:	f993 5000 	ldrsb.w	r5, [r3]
 8009f10:	2c00      	cmp	r4, #0
 8009f12:	d078      	beq.n	800a006 <node_convert_integer+0x1d2>
 8009f14:	6863      	ldr	r3, [r4, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d07b      	beq.n	800a012 <node_convert_integer+0x1de>
 8009f1a:	8860      	ldrh	r0, [r4, #2]
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d075      	beq.n	800a00c <node_convert_integer+0x1d8>
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f993 3000 	ldrsb.w	r3, [r3]
 8009f26:	ee06 3a90 	vmov	s13, r3
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	d0dd      	beq.n	8009eea <node_convert_integer+0xb6>
 8009f2e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009f32:	eddf 5a49 	vldr	s11, [pc, #292]	; 800a058 <node_convert_integer+0x224>
 8009f36:	4432      	add	r2, r6
 8009f38:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009f3c:	f916 3b01 	ldrsb.w	r3, [r6], #1
 8009f40:	1b5b      	subs	r3, r3, r5
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f4a:	eef0 7a66 	vmov.f32	s15, s13
 8009f4e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5a:	bfcc      	ite	gt
 8009f5c:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 8009f60:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 8009f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f68:	ee17 3a90 	vmov	r3, s15
 8009f6c:	f303 0307 	ssat	r3, #8, r3
 8009f70:	4296      	cmp	r6, r2
 8009f72:	f801 3b01 	strb.w	r3, [r1], #1
 8009f76:	d1e1      	bne.n	8009f3c <node_convert_integer+0x108>
 8009f78:	b002      	add	sp, #8
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	6880      	ldr	r0, [r0, #8]
 8009f7e:	68a9      	ldr	r1, [r5, #8]
 8009f80:	b13b      	cbz	r3, 8009f92 <node_convert_integer+0x15e>
 8009f82:	685d      	ldr	r5, [r3, #4]
 8009f84:	2d00      	cmp	r5, #0
 8009f86:	d04c      	beq.n	800a022 <node_convert_integer+0x1ee>
 8009f88:	885b      	ldrh	r3, [r3, #2]
 8009f8a:	b113      	cbz	r3, 8009f92 <node_convert_integer+0x15e>
 8009f8c:	686b      	ldr	r3, [r5, #4]
 8009f8e:	f993 3000 	ldrsb.w	r3, [r3]
 8009f92:	b134      	cbz	r4, 8009fa2 <node_convert_integer+0x16e>
 8009f94:	6865      	ldr	r5, [r4, #4]
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	d04b      	beq.n	800a032 <node_convert_integer+0x1fe>
 8009f9a:	8864      	ldrh	r4, [r4, #2]
 8009f9c:	b10c      	cbz	r4, 8009fa2 <node_convert_integer+0x16e>
 8009f9e:	686c      	ldr	r4, [r5, #4]
 8009fa0:	7824      	ldrb	r4, [r4, #0]
 8009fa2:	9400      	str	r4, [sp, #0]
 8009fa4:	eeb4 7a67 	vcmp.f32	s14, s15
 8009fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fac:	d103      	bne.n	8009fb6 <node_convert_integer+0x182>
 8009fae:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8009fb2:	42a5      	cmp	r5, r4
 8009fb4:	d048      	beq.n	800a048 <node_convert_integer+0x214>
 8009fb6:	f000 fc09 	bl	800a7cc <forward_lite_node_convert_integer_is8ou8>
 8009fba:	b002      	add	sp, #8
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	b133      	cbz	r3, 8009fce <node_convert_integer+0x19a>
 8009fc0:	6859      	ldr	r1, [r3, #4]
 8009fc2:	2900      	cmp	r1, #0
 8009fc4:	d039      	beq.n	800a03a <node_convert_integer+0x206>
 8009fc6:	885b      	ldrh	r3, [r3, #2]
 8009fc8:	b10b      	cbz	r3, 8009fce <node_convert_integer+0x19a>
 8009fca:	684b      	ldr	r3, [r1, #4]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b134      	cbz	r4, 8009fde <node_convert_integer+0x1aa>
 8009fd0:	6861      	ldr	r1, [r4, #4]
 8009fd2:	b361      	cbz	r1, 800a02e <node_convert_integer+0x1fa>
 8009fd4:	8864      	ldrh	r4, [r4, #2]
 8009fd6:	b114      	cbz	r4, 8009fde <node_convert_integer+0x1aa>
 8009fd8:	6849      	ldr	r1, [r1, #4]
 8009fda:	f991 4000 	ldrsb.w	r4, [r1]
 8009fde:	6880      	ldr	r0, [r0, #8]
 8009fe0:	68a9      	ldr	r1, [r5, #8]
 8009fe2:	9400      	str	r4, [sp, #0]
 8009fe4:	eeb4 7a67 	vcmp.f32	s14, s15
 8009fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fec:	d103      	bne.n	8009ff6 <node_convert_integer+0x1c2>
 8009fee:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8009ff2:	42ab      	cmp	r3, r5
 8009ff4:	d025      	beq.n	800a042 <node_convert_integer+0x20e>
 8009ff6:	f000 fb71 	bl	800a6dc <forward_lite_node_convert_integer_iu8os8>
 8009ffa:	b002      	add	sp, #8
 8009ffc:	bd70      	pop	{r4, r5, r6, pc}
 8009ffe:	461d      	mov	r5, r3
 800a000:	e786      	b.n	8009f10 <node_convert_integer+0xdc>
 800a002:	2201      	movs	r2, #1
 800a004:	e734      	b.n	8009e70 <node_convert_integer+0x3c>
 800a006:	ee06 4a90 	vmov	s13, r4
 800a00a:	e78e      	b.n	8009f2a <node_convert_integer+0xf6>
 800a00c:	ee06 0a90 	vmov	s13, r0
 800a010:	e78b      	b.n	8009f2a <node_convert_integer+0xf6>
 800a012:	ee06 3a90 	vmov	s13, r3
 800a016:	e788      	b.n	8009f2a <node_convert_integer+0xf6>
 800a018:	462b      	mov	r3, r5
 800a01a:	2c00      	cmp	r4, #0
 800a01c:	f47f af5a 	bne.w	8009ed4 <node_convert_integer+0xa0>
 800a020:	e760      	b.n	8009ee4 <node_convert_integer+0xb0>
 800a022:	462b      	mov	r3, r5
 800a024:	2c00      	cmp	r4, #0
 800a026:	d1b5      	bne.n	8009f94 <node_convert_integer+0x160>
 800a028:	e7bb      	b.n	8009fa2 <node_convert_integer+0x16e>
 800a02a:	4605      	mov	r5, r0
 800a02c:	e770      	b.n	8009f10 <node_convert_integer+0xdc>
 800a02e:	460c      	mov	r4, r1
 800a030:	e7d5      	b.n	8009fde <node_convert_integer+0x1aa>
 800a032:	462c      	mov	r4, r5
 800a034:	e7b5      	b.n	8009fa2 <node_convert_integer+0x16e>
 800a036:	462c      	mov	r4, r5
 800a038:	e754      	b.n	8009ee4 <node_convert_integer+0xb0>
 800a03a:	460b      	mov	r3, r1
 800a03c:	2c00      	cmp	r4, #0
 800a03e:	d1c7      	bne.n	8009fd0 <node_convert_integer+0x19c>
 800a040:	e7cd      	b.n	8009fde <node_convert_integer+0x1aa>
 800a042:	f000 fb8b 	bl	800a75c <forward_lite_node_convert_integer_iu8os8_fast>
 800a046:	e750      	b.n	8009eea <node_convert_integer+0xb6>
 800a048:	f000 fbea 	bl	800a820 <forward_lite_node_convert_integer_is8ou8_fast>
 800a04c:	e74d      	b.n	8009eea <node_convert_integer+0xb6>
 800a04e:	2300      	movs	r3, #0
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	deff      	udf	#255	; 0xff
 800a054:	00000000 	.word	0x00000000
 800a058:	3efffffc 	.word	0x3efffffc

0800a05c <core_init>:
 800a05c:	2001      	movs	r0, #1
 800a05e:	4770      	bx	lr

0800a060 <core_get_error>:
 800a060:	4603      	mov	r3, r0
 800a062:	2200      	movs	r2, #0
 800a064:	6800      	ldr	r0, [r0, #0]
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop

0800a06c <core_set_error>:
 800a06c:	4603      	mov	r3, r0
 800a06e:	7800      	ldrb	r0, [r0, #0]
 800a070:	b108      	cbz	r0, 800a076 <core_set_error+0xa>
 800a072:	2000      	movs	r0, #0
 800a074:	4770      	bx	lr
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	6819      	ldr	r1, [r3, #0]
 800a07a:	f362 211f 	bfi	r1, r2, #8, #24
 800a07e:	2001      	movs	r0, #1
 800a080:	6019      	str	r1, [r3, #0]
 800a082:	4770      	bx	lr

0800a084 <forward_dense_integer_SSSA>:
 800a084:	6982      	ldr	r2, [r0, #24]
 800a086:	8813      	ldrh	r3, [r2, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 80c8 	beq.w	800a21e <forward_dense_integer_SSSA+0x19a>
 800a08e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a092:	6852      	ldr	r2, [r2, #4]
 800a094:	6854      	ldr	r4, [r2, #4]
 800a096:	b093      	sub	sp, #76	; 0x4c
 800a098:	b104      	cbz	r4, 800a09c <forward_dense_integer_SSSA+0x18>
 800a09a:	6824      	ldr	r4, [r4, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	f000 815f 	beq.w	800a360 <forward_dense_integer_SSSA+0x2dc>
 800a0a2:	6911      	ldr	r1, [r2, #16]
 800a0a4:	b101      	cbz	r1, 800a0a8 <forward_dense_integer_SSSA+0x24>
 800a0a6:	6809      	ldr	r1, [r1, #0]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	f000 815c 	beq.w	800a366 <forward_dense_integer_SSSA+0x2e2>
 800a0ae:	69d5      	ldr	r5, [r2, #28]
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	f000 8108 	beq.w	800a2c6 <forward_dense_integer_SSSA+0x242>
 800a0b6:	8b16      	ldrh	r6, [r2, #24]
 800a0b8:	6828      	ldr	r0, [r5, #0]
 800a0ba:	2e01      	cmp	r6, #1
 800a0bc:	f240 812d 	bls.w	800a31a <forward_dense_integer_SSSA+0x296>
 800a0c0:	686d      	ldr	r5, [r5, #4]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	f000 8152 	beq.w	800a36c <forward_dense_integer_SSSA+0x2e8>
 800a0c8:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800a0cc:	69ab      	ldr	r3, [r5, #24]
 800a0ce:	f1b9 0f00 	cmp.w	r9, #0
 800a0d2:	f000 810f 	beq.w	800a2f4 <forward_dense_integer_SSSA+0x270>
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	68e2      	ldr	r2, [r4, #12]
 800a0da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0dc:	68cb      	ldr	r3, [r1, #12]
 800a0de:	6856      	ldr	r6, [r2, #4]
 800a0e0:	f8d9 9000 	ldr.w	r9, [r9]
 800a0e4:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800a0e8:	698d      	ldr	r5, [r1, #24]
 800a0ea:	960f      	str	r6, [sp, #60]	; 0x3c
 800a0ec:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	fb03 f302 	mul.w	r3, r3, r2
 800a0f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f8:	b2b2      	uxth	r2, r6
 800a0fa:	fa1f f38a 	uxth.w	r3, sl
 800a0fe:	f1b9 0f00 	cmp.w	r9, #0
 800a102:	d003      	beq.n	800a10c <forward_dense_integer_SSSA+0x88>
 800a104:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800a108:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800a10c:	6827      	ldr	r7, [r4, #0]
 800a10e:	f8d0 b000 	ldr.w	fp, [r0]
 800a112:	680c      	ldr	r4, [r1, #0]
 800a114:	6981      	ldr	r1, [r0, #24]
 800a116:	2f00      	cmp	r7, #0
 800a118:	f000 8083 	beq.w	800a222 <forward_dense_integer_SSSA+0x19e>
 800a11c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a120:	f1bc 0f00 	cmp.w	ip, #0
 800a124:	f000 80b1 	beq.w	800a28a <forward_dense_integer_SSSA+0x206>
 800a128:	8878      	ldrh	r0, [r7, #2]
 800a12a:	2800      	cmp	r0, #0
 800a12c:	f000 809c 	beq.w	800a268 <forward_dense_integer_SSSA+0x1e4>
 800a130:	f8dc 6000 	ldr.w	r6, [ip]
 800a134:	edd6 7a00 	vldr	s15, [r6]
 800a138:	2c00      	cmp	r4, #0
 800a13a:	f000 809a 	beq.w	800a272 <forward_dense_integer_SSSA+0x1ee>
 800a13e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a142:	f1b8 0f00 	cmp.w	r8, #0
 800a146:	f000 80a9 	beq.w	800a29c <forward_dense_integer_SSSA+0x218>
 800a14a:	8860      	ldrh	r0, [r4, #2]
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d074      	beq.n	800a23a <forward_dense_integer_SSSA+0x1b6>
 800a150:	68ae      	ldr	r6, [r5, #8]
 800a152:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a156:	950d      	str	r5, [sp, #52]	; 0x34
 800a158:	f8d8 5000 	ldr.w	r5, [r8]
 800a15c:	6889      	ldr	r1, [r1, #8]
 800a15e:	ed95 0a00 	vldr	s0, [r5]
 800a162:	f1bc 0f00 	cmp.w	ip, #0
 800a166:	d076      	beq.n	800a256 <forward_dense_integer_SSSA+0x1d2>
 800a168:	8878      	ldrh	r0, [r7, #2]
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f000 80a3 	beq.w	800a2b6 <forward_dense_integer_SSSA+0x232>
 800a170:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800a174:	f990 7000 	ldrsb.w	r7, [r0]
 800a178:	2c00      	cmp	r4, #0
 800a17a:	f000 80d6 	beq.w	800a32a <forward_dense_integer_SSSA+0x2a6>
 800a17e:	f1b8 0f00 	cmp.w	r8, #0
 800a182:	f000 809d 	beq.w	800a2c0 <forward_dense_integer_SSSA+0x23c>
 800a186:	8860      	ldrh	r0, [r4, #2]
 800a188:	2800      	cmp	r0, #0
 800a18a:	d167      	bne.n	800a25c <forward_dense_integer_SSSA+0x1d8>
 800a18c:	900a      	str	r0, [sp, #40]	; 0x28
 800a18e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a192:	910e      	str	r1, [sp, #56]	; 0x38
 800a194:	f1bb 0f00 	cmp.w	fp, #0
 800a198:	f000 80dc 	beq.w	800a354 <forward_dense_integer_SSSA+0x2d0>
 800a19c:	f8db 0004 	ldr.w	r0, [fp, #4]
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f000 80d7 	beq.w	800a354 <forward_dense_integer_SSSA+0x2d0>
 800a1a6:	6800      	ldr	r0, [r0, #0]
 800a1a8:	2400      	movs	r4, #0
 800a1aa:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800a1ae:	9411      	str	r4, [sp, #68]	; 0x44
 800a1b0:	ed90 7a00 	vldr	s14, [r0]
 800a1b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1b8:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800a1bc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	f000 fb61 	bl	800a888 <align_factor>
 800a1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c8:	9011      	str	r0, [sp, #68]	; 0x44
 800a1ca:	b32b      	cbz	r3, 800a218 <forward_dense_integer_SSSA+0x194>
 800a1cc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a1d0:	4699      	mov	r9, r3
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800a1d8:	9a08      	ldr	r2, [sp, #32]
 800a1da:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a1dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a1de:	970d      	str	r7, [sp, #52]	; 0x34
 800a1e0:	fa1f fa8a 	uxth.w	sl, sl
 800a1e4:	461f      	mov	r7, r3
 800a1e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1e8:	9306      	str	r3, [sp, #24]
 800a1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f0:	9303      	str	r3, [sp, #12]
 800a1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f4:	9605      	str	r6, [sp, #20]
 800a1f6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800a1fa:	ab11      	add	r3, sp, #68	; 0x44
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	4628      	mov	r0, r5
 800a200:	3401      	adds	r4, #1
 800a202:	463b      	mov	r3, r7
 800a204:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800a208:	f000 fb92 	bl	800a930 <st_sssa8_fully_connected>
 800a20c:	454c      	cmp	r4, r9
 800a20e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a212:	4456      	add	r6, sl
 800a214:	445d      	add	r5, fp
 800a216:	d1e6      	bne.n	800a1e6 <forward_dense_integer_SSSA+0x162>
 800a218:	b013      	add	sp, #76	; 0x4c
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	deff      	udf	#255	; 0xff
 800a222:	2c00      	cmp	r4, #0
 800a224:	d056      	beq.n	800a2d4 <forward_dense_integer_SSSA+0x250>
 800a226:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a22a:	f1b8 0f00 	cmp.w	r8, #0
 800a22e:	d05d      	beq.n	800a2ec <forward_dense_integer_SSSA+0x268>
 800a230:	8860      	ldrh	r0, [r4, #2]
 800a232:	2800      	cmp	r0, #0
 800a234:	d17b      	bne.n	800a32e <forward_dense_integer_SSSA+0x2aa>
 800a236:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a23a:	68ae      	ldr	r6, [r5, #8]
 800a23c:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a240:	6889      	ldr	r1, [r1, #8]
 800a242:	950d      	str	r5, [sp, #52]	; 0x34
 800a244:	2f00      	cmp	r7, #0
 800a246:	d041      	beq.n	800a2cc <forward_dense_integer_SSSA+0x248>
 800a248:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a24c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a250:	f1bc 0f00 	cmp.w	ip, #0
 800a254:	d188      	bne.n	800a168 <forward_dense_integer_SSSA+0xe4>
 800a256:	4667      	mov	r7, ip
 800a258:	2800      	cmp	r0, #0
 800a25a:	d097      	beq.n	800a18c <forward_dense_integer_SSSA+0x108>
 800a25c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a260:	f990 0000 	ldrsb.w	r0, [r0]
 800a264:	900a      	str	r0, [sp, #40]	; 0x28
 800a266:	e792      	b.n	800a18e <forward_dense_integer_SSSA+0x10a>
 800a268:	eddf 7a42 	vldr	s15, [pc, #264]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a26c:	2c00      	cmp	r4, #0
 800a26e:	f47f af66 	bne.w	800a13e <forward_dense_integer_SSSA+0xba>
 800a272:	68ae      	ldr	r6, [r5, #8]
 800a274:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a278:	6889      	ldr	r1, [r1, #8]
 800a27a:	950d      	str	r5, [sp, #52]	; 0x34
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d14e      	bne.n	800a31e <forward_dense_integer_SSSA+0x29a>
 800a280:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a284:	900a      	str	r0, [sp, #40]	; 0x28
 800a286:	4607      	mov	r7, r0
 800a288:	e781      	b.n	800a18e <forward_dense_integer_SSSA+0x10a>
 800a28a:	b31c      	cbz	r4, 800a2d4 <forward_dense_integer_SSSA+0x250>
 800a28c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a290:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a294:	f1b8 0f00 	cmp.w	r8, #0
 800a298:	f47f af57 	bne.w	800a14a <forward_dense_integer_SSSA+0xc6>
 800a29c:	f8de 0008 	ldr.w	r0, [lr, #8]
 800a2a0:	68ae      	ldr	r6, [r5, #8]
 800a2a2:	6889      	ldr	r1, [r1, #8]
 800a2a4:	900d      	str	r0, [sp, #52]	; 0x34
 800a2a6:	f1bc 0f00 	cmp.w	ip, #0
 800a2aa:	d00e      	beq.n	800a2ca <forward_dense_integer_SSSA+0x246>
 800a2ac:	8878      	ldrh	r0, [r7, #2]
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d149      	bne.n	800a346 <forward_dense_integer_SSSA+0x2c2>
 800a2b2:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a2b6:	2700      	movs	r7, #0
 800a2b8:	f1b8 0f00 	cmp.w	r8, #0
 800a2bc:	f47f af63 	bne.w	800a186 <forward_dense_integer_SSSA+0x102>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	900a      	str	r0, [sp, #40]	; 0x28
 800a2c4:	e763      	b.n	800a18e <forward_dense_integer_SSSA+0x10a>
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	e6fb      	b.n	800a0c2 <forward_dense_integer_SSSA+0x3e>
 800a2ca:	4667      	mov	r7, ip
 800a2cc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a2d0:	970a      	str	r7, [sp, #40]	; 0x28
 800a2d2:	e75c      	b.n	800a18e <forward_dense_integer_SSSA+0x10a>
 800a2d4:	eddf 7a27 	vldr	s15, [pc, #156]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a2d8:	4627      	mov	r7, r4
 800a2da:	f8de 0008 	ldr.w	r0, [lr, #8]
 800a2de:	68ae      	ldr	r6, [r5, #8]
 800a2e0:	6889      	ldr	r1, [r1, #8]
 800a2e2:	900d      	str	r0, [sp, #52]	; 0x34
 800a2e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a2e8:	970a      	str	r7, [sp, #40]	; 0x28
 800a2ea:	e750      	b.n	800a18e <forward_dense_integer_SSSA+0x10a>
 800a2ec:	eddf 7a21 	vldr	s15, [pc, #132]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a2f0:	4647      	mov	r7, r8
 800a2f2:	e7f2      	b.n	800a2da <forward_dense_integer_SSSA+0x256>
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	68e2      	ldr	r2, [r4, #12]
 800a2f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2fa:	68cb      	ldr	r3, [r1, #12]
 800a2fc:	6856      	ldr	r6, [r2, #4]
 800a2fe:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800a302:	698d      	ldr	r5, [r1, #24]
 800a304:	960f      	str	r6, [sp, #60]	; 0x3c
 800a306:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	fb03 f302 	mul.w	r3, r3, r2
 800a310:	930c      	str	r3, [sp, #48]	; 0x30
 800a312:	b2b2      	uxth	r2, r6
 800a314:	fa1f f38a 	uxth.w	r3, sl
 800a318:	e6f8      	b.n	800a10c <forward_dense_integer_SSSA+0x88>
 800a31a:	2500      	movs	r5, #0
 800a31c:	e6d1      	b.n	800a0c2 <forward_dense_integer_SSSA+0x3e>
 800a31e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800a322:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a326:	f990 7000 	ldrsb.w	r7, [r0]
 800a32a:	940a      	str	r4, [sp, #40]	; 0x28
 800a32c:	e72f      	b.n	800a18e <forward_dense_integer_SSSA+0x10a>
 800a32e:	f8de 0008 	ldr.w	r0, [lr, #8]
 800a332:	900d      	str	r0, [sp, #52]	; 0x34
 800a334:	f8d8 0000 	ldr.w	r0, [r8]
 800a338:	68ae      	ldr	r6, [r5, #8]
 800a33a:	6889      	ldr	r1, [r1, #8]
 800a33c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a340:	ed90 0a00 	vldr	s0, [r0]
 800a344:	e78a      	b.n	800a25c <forward_dense_integer_SSSA+0x1d8>
 800a346:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800a34a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a374 <forward_dense_integer_SSSA+0x2f0>
 800a34e:	f990 7000 	ldrsb.w	r7, [r0]
 800a352:	e7b5      	b.n	800a2c0 <forward_dense_integer_SSSA+0x23c>
 800a354:	2300      	movs	r3, #0
 800a356:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800a35a:	9311      	str	r3, [sp, #68]	; 0x44
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	deff      	udf	#255	; 0xff
 800a360:	2300      	movs	r3, #0
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	deff      	udf	#255	; 0xff
 800a366:	2300      	movs	r3, #0
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	deff      	udf	#255	; 0xff
 800a36c:	2300      	movs	r3, #0
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	deff      	udf	#255	; 0xff
 800a372:	bf00      	nop
 800a374:	00000000 	.word	0x00000000

0800a378 <nl_func_sm_channel_f32>:
 800a378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37c:	ed2d 8b02 	vpush	{d8}
 800a380:	6989      	ldr	r1, [r1, #24]
 800a382:	6983      	ldr	r3, [r0, #24]
 800a384:	688d      	ldr	r5, [r1, #8]
 800a386:	689e      	ldr	r6, [r3, #8]
 800a388:	ed95 8a00 	vldr	s16, [r5]
 800a38c:	2a01      	cmp	r2, #1
 800a38e:	4617      	mov	r7, r2
 800a390:	d935      	bls.n	800a3fe <nl_func_sm_channel_f32+0x86>
 800a392:	1d2b      	adds	r3, r5, #4
 800a394:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800a398:	ecf3 7a01 	vldmia	r3!, {s15}
 800a39c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a4:	bfb8      	it	lt
 800a3a6:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d1f4      	bne.n	800a398 <nl_func_sm_channel_f32+0x20>
 800a3ae:	eddf 8a17 	vldr	s17, [pc, #92]	; 800a40c <nl_func_sm_channel_f32+0x94>
 800a3b2:	46b0      	mov	r8, r6
 800a3b4:	2400      	movs	r4, #0
 800a3b6:	ecb5 0a01 	vldmia	r5!, {s0}
 800a3ba:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a3be:	f003 feb1 	bl	800e124 <expf>
 800a3c2:	3401      	adds	r4, #1
 800a3c4:	42a7      	cmp	r7, r4
 800a3c6:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a3ca:	eca8 0a01 	vstmia	r8!, {s0}
 800a3ce:	d8f2      	bhi.n	800a3b6 <nl_func_sm_channel_f32+0x3e>
 800a3d0:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d8:	d00d      	beq.n	800a3f6 <nl_func_sm_channel_f32+0x7e>
 800a3da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a3de:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	429f      	cmp	r7, r3
 800a3e8:	edd6 7a00 	vldr	s15, [r6]
 800a3ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3f0:	ece6 7a01 	vstmia	r6!, {s15}
 800a3f4:	d8f6      	bhi.n	800a3e4 <nl_func_sm_channel_f32+0x6c>
 800a3f6:	ecbd 8b02 	vpop	{d8}
 800a3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fe:	2a00      	cmp	r2, #0
 800a400:	d1d5      	bne.n	800a3ae <nl_func_sm_channel_f32+0x36>
 800a402:	ecbd 8b02 	vpop	{d8}
 800a406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a40a:	bf00      	nop
 800a40c:	00000000 	.word	0x00000000

0800a410 <forward_sm>:
 800a410:	6982      	ldr	r2, [r0, #24]
 800a412:	8813      	ldrh	r3, [r2, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d054      	beq.n	800a4c2 <forward_sm+0xb2>
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	6852      	ldr	r2, [r2, #4]
 800a41e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800a422:	b083      	sub	sp, #12
 800a424:	f1b8 0f00 	cmp.w	r8, #0
 800a428:	d001      	beq.n	800a42e <forward_sm+0x1e>
 800a42a:	f8d8 8000 	ldr.w	r8, [r8]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d04b      	beq.n	800a4ca <forward_sm+0xba>
 800a432:	6913      	ldr	r3, [r2, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d04b      	beq.n	800a4d0 <forward_sm+0xc0>
 800a438:	6818      	ldr	r0, [r3, #0]
 800a43a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a43e:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800a442:	68c2      	ldr	r2, [r0, #12]
 800a444:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800a448:	6857      	ldr	r7, [r2, #4]
 800a44a:	0a1b      	lsrs	r3, r3, #8
 800a44c:	d03b      	beq.n	800a4c6 <forward_sm+0xb6>
 800a44e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a452:	2201      	movs	r2, #1
 800a454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a458:	429c      	cmp	r4, r3
 800a45a:	fb01 f202 	mul.w	r2, r1, r2
 800a45e:	d1f9      	bne.n	800a454 <forward_sm+0x44>
 800a460:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800a464:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800a468:	68b4      	ldr	r4, [r6, #8]
 800a46a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800a46e:	eba2 030a 	sub.w	r3, r2, sl
 800a472:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a476:	68f3      	ldr	r3, [r6, #12]
 800a478:	1bd2      	subs	r2, r2, r7
 800a47a:	429c      	cmp	r4, r3
 800a47c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a480:	d317      	bcc.n	800a4b2 <forward_sm+0xa2>
 800a482:	00bf      	lsls	r7, r7, #2
 800a484:	427f      	negs	r7, r7
 800a486:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800a48a:	4652      	mov	r2, sl
 800a48c:	f1cb 0b00 	rsb	fp, fp, #0
 800a490:	46ba      	mov	sl, r7
 800a492:	4607      	mov	r7, r0
 800a494:	60b4      	str	r4, [r6, #8]
 800a496:	2300      	movs	r3, #0
 800a498:	f8c9 5008 	str.w	r5, [r9, #8]
 800a49c:	4641      	mov	r1, r8
 800a49e:	4638      	mov	r0, r7
 800a4a0:	9201      	str	r2, [sp, #4]
 800a4a2:	f7ff ff69 	bl	800a378 <nl_func_sm_channel_f32>
 800a4a6:	68f3      	ldr	r3, [r6, #12]
 800a4a8:	9a01      	ldr	r2, [sp, #4]
 800a4aa:	445c      	add	r4, fp
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	4455      	add	r5, sl
 800a4b0:	d2f0      	bcs.n	800a494 <forward_sm+0x84>
 800a4b2:	60b3      	str	r3, [r6, #8]
 800a4b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a4b8:	f8c9 3008 	str.w	r3, [r9, #8]
 800a4bc:	b003      	add	sp, #12
 800a4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	deff      	udf	#255	; 0xff
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	e7ca      	b.n	800a460 <forward_sm+0x50>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	deff      	udf	#255	; 0xff
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	deff      	udf	#255	; 0xff

0800a4d4 <ai_check_custom_types>:
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <ai_check_custom_types+0x50>)
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	b118      	cbz	r0, 800a4e4 <ai_check_custom_types+0x10>
 800a4dc:	7803      	ldrb	r3, [r0, #0]
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d002      	beq.n	800a4e8 <ai_check_custom_types+0x14>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	b002      	add	sp, #8
 800a4e6:	4770      	bx	lr
 800a4e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d004      	beq.n	800a4fa <ai_check_custom_types+0x26>
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	f080 0001 	eor.w	r0, r0, #1
 800a4f6:	b002      	add	sp, #8
 800a4f8:	4770      	bx	lr
 800a4fa:	7842      	ldrb	r2, [r0, #1]
 800a4fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a500:	429a      	cmp	r2, r3
 800a502:	f100 0001 	add.w	r0, r0, #1
 800a506:	d1f3      	bne.n	800a4f0 <ai_check_custom_types+0x1c>
 800a508:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a50c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a510:	429a      	cmp	r2, r3
 800a512:	d1ed      	bne.n	800a4f0 <ai_check_custom_types+0x1c>
 800a514:	7842      	ldrb	r2, [r0, #1]
 800a516:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d1e8      	bne.n	800a4f0 <ai_check_custom_types+0x1c>
 800a51e:	2000      	movs	r0, #0
 800a520:	e7e7      	b.n	800a4f2 <ai_check_custom_types+0x1e>
 800a522:	bf00      	nop
 800a524:	84048403 	.word	0x84048403

0800a528 <ai_layer_type_name>:
 800a528:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
 800a52c:	d809      	bhi.n	800a542 <ai_layer_type_name+0x1a>
 800a52e:	f5b0 7f99 	cmp.w	r0, #306	; 0x132
 800a532:	d217      	bcs.n	800a564 <ai_layer_type_name+0x3c>
 800a534:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800a538:	d80e      	bhi.n	800a558 <ai_layer_type_name+0x30>
 800a53a:	28ff      	cmp	r0, #255	; 0xff
 800a53c:	d805      	bhi.n	800a54a <ai_layer_type_name+0x22>
 800a53e:	480e      	ldr	r0, [pc, #56]	; (800a578 <ai_layer_type_name+0x50>)
 800a540:	4770      	bx	lr
 800a542:	f5a0 73c0 	sub.w	r3, r0, #384	; 0x180
 800a546:	2b03      	cmp	r3, #3
 800a548:	d8f9      	bhi.n	800a53e <ai_layer_type_name+0x16>
 800a54a:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <ai_layer_type_name+0x54>)
 800a550:	b280      	uxth	r0, r0
 800a552:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a556:	4770      	bx	lr
 800a558:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
 800a55c:	2b27      	cmp	r3, #39	; 0x27
 800a55e:	d9f4      	bls.n	800a54a <ai_layer_type_name+0x22>
 800a560:	4805      	ldr	r0, [pc, #20]	; (800a578 <ai_layer_type_name+0x50>)
 800a562:	4770      	bx	lr
 800a564:	f5a0 7399 	sub.w	r3, r0, #306	; 0x132
 800a568:	b29a      	uxth	r2, r3
 800a56a:	4905      	ldr	r1, [pc, #20]	; (800a580 <ai_layer_type_name+0x58>)
 800a56c:	2301      	movs	r3, #1
 800a56e:	4093      	lsls	r3, r2
 800a570:	420b      	tst	r3, r1
 800a572:	d1ea      	bne.n	800a54a <ai_layer_type_name+0x22>
 800a574:	4800      	ldr	r0, [pc, #0]	; (800a578 <ai_layer_type_name+0x50>)
 800a576:	4770      	bx	lr
 800a578:	080a8614 	.word	0x080a8614
 800a57c:	080a8800 	.word	0x080a8800
 800a580:	00012007 	.word	0x00012007

0800a584 <ai_layers_init_all>:
 800a584:	4601      	mov	r1, r0
 800a586:	2000      	movs	r0, #0
 800a588:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a58a:	b143      	cbz	r3, 800a59e <ai_layers_init_all+0x1a>
 800a58c:	691a      	ldr	r2, [r3, #16]
 800a58e:	60d9      	str	r1, [r3, #12]
 800a590:	429a      	cmp	r2, r3
 800a592:	f100 0001 	add.w	r0, r0, #1
 800a596:	d002      	beq.n	800a59e <ai_layers_init_all+0x1a>
 800a598:	b10a      	cbz	r2, 800a59e <ai_layers_init_all+0x1a>
 800a59a:	4613      	mov	r3, r2
 800a59c:	e7f5      	b.n	800a58a <ai_layers_init_all+0x6>
 800a59e:	4770      	bx	lr

0800a5a0 <ai_layers_post_init_all>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a5a4:	2500      	movs	r5, #0
 800a5a6:	b16c      	cbz	r4, 800a5c4 <ai_layers_post_init_all+0x24>
 800a5a8:	6863      	ldr	r3, [r4, #4]
 800a5aa:	07db      	lsls	r3, r3, #31
 800a5ac:	d504      	bpl.n	800a5b8 <ai_layers_post_init_all+0x18>
 800a5ae:	6a23      	ldr	r3, [r4, #32]
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	b10b      	cbz	r3, 800a5b8 <ai_layers_post_init_all+0x18>
 800a5b4:	4798      	blx	r3
 800a5b6:	3501      	adds	r5, #1
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	d002      	beq.n	800a5c4 <ai_layers_post_init_all+0x24>
 800a5be:	b10b      	cbz	r3, 800a5c4 <ai_layers_post_init_all+0x24>
 800a5c0:	461c      	mov	r4, r3
 800a5c2:	e7f0      	b.n	800a5a6 <ai_layers_post_init_all+0x6>
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}

0800a5c8 <ai_layers_forward_all>:
 800a5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5cc:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	2f00      	cmp	r7, #0
 800a5d2:	d02d      	beq.n	800a630 <ai_layers_forward_all+0x68>
 800a5d4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a5d6:	b1e9      	cbz	r1, 800a614 <ai_layers_forward_all+0x4c>
 800a5d8:	6381      	str	r1, [r0, #56]	; 0x38
 800a5da:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a5dc:	2001      	movs	r0, #1
 800a5de:	47b8      	blx	r7
 800a5e0:	2600      	movs	r6, #0
 800a5e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5e4:	46b0      	mov	r8, r6
 800a5e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5e8:	2002      	movs	r0, #2
 800a5ea:	47b8      	blx	r7
 800a5ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a5ee:	696b      	ldr	r3, [r5, #20]
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	4798      	blx	r3
 800a5f4:	692b      	ldr	r3, [r5, #16]
 800a5f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5f8:	429d      	cmp	r5, r3
 800a5fa:	f04f 0003 	mov.w	r0, #3
 800a5fe:	4619      	mov	r1, r3
 800a600:	d00c      	beq.n	800a61c <ai_layers_forward_all+0x54>
 800a602:	63a3      	str	r3, [r4, #56]	; 0x38
 800a604:	47b8      	blx	r7
 800a606:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a608:	3601      	adds	r6, #1
 800a60a:	2900      	cmp	r1, #0
 800a60c:	d1eb      	bne.n	800a5e6 <ai_layers_forward_all+0x1e>
 800a60e:	4630      	mov	r0, r6
 800a610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a614:	460e      	mov	r6, r1
 800a616:	4630      	mov	r0, r6
 800a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61c:	2100      	movs	r1, #0
 800a61e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a622:	2003      	movs	r0, #3
 800a624:	47b8      	blx	r7
 800a626:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a628:	3601      	adds	r6, #1
 800a62a:	2900      	cmp	r1, #0
 800a62c:	d1db      	bne.n	800a5e6 <ai_layers_forward_all+0x1e>
 800a62e:	e7ee      	b.n	800a60e <ai_layers_forward_all+0x46>
 800a630:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a632:	b19d      	cbz	r5, 800a65c <ai_layers_forward_all+0x94>
 800a634:	6385      	str	r5, [r0, #56]	; 0x38
 800a636:	463e      	mov	r6, r7
 800a638:	e003      	b.n	800a642 <ai_layers_forward_all+0x7a>
 800a63a:	63a5      	str	r5, [r4, #56]	; 0x38
 800a63c:	3601      	adds	r6, #1
 800a63e:	2d00      	cmp	r5, #0
 800a640:	d0e5      	beq.n	800a60e <ai_layers_forward_all+0x46>
 800a642:	696b      	ldr	r3, [r5, #20]
 800a644:	4628      	mov	r0, r5
 800a646:	4798      	blx	r3
 800a648:	462b      	mov	r3, r5
 800a64a:	692d      	ldr	r5, [r5, #16]
 800a64c:	429d      	cmp	r5, r3
 800a64e:	d1f4      	bne.n	800a63a <ai_layers_forward_all+0x72>
 800a650:	2300      	movs	r3, #0
 800a652:	3601      	adds	r6, #1
 800a654:	63a3      	str	r3, [r4, #56]	; 0x38
 800a656:	4630      	mov	r0, r6
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	462e      	mov	r6, r5
 800a65e:	e7d6      	b.n	800a60e <ai_layers_forward_all+0x46>

0800a660 <ai_layers_destroy_all>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a664:	2500      	movs	r5, #0
 800a666:	b16c      	cbz	r4, 800a684 <ai_layers_destroy_all+0x24>
 800a668:	6863      	ldr	r3, [r4, #4]
 800a66a:	075b      	lsls	r3, r3, #29
 800a66c:	d504      	bpl.n	800a678 <ai_layers_destroy_all+0x18>
 800a66e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a670:	4620      	mov	r0, r4
 800a672:	b10b      	cbz	r3, 800a678 <ai_layers_destroy_all+0x18>
 800a674:	4798      	blx	r3
 800a676:	3501      	adds	r5, #1
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	d002      	beq.n	800a684 <ai_layers_destroy_all+0x24>
 800a67e:	b10b      	cbz	r3, 800a684 <ai_layers_destroy_all+0x24>
 800a680:	461c      	mov	r4, r3
 800a682:	e7f0      	b.n	800a666 <ai_layers_destroy_all+0x6>
 800a684:	4628      	mov	r0, r5
 800a686:	bd38      	pop	{r3, r4, r5, pc}

0800a688 <forward_lite_node_convert_integer_iu8ou8>:
 800a688:	ee07 3a90 	vmov	s15, r3
 800a68c:	f89d 3000 	ldrb.w	r3, [sp]
 800a690:	ee06 3a90 	vmov	s13, r3
 800a694:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a698:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a0:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a6a4:	1883      	adds	r3, r0, r2
 800a6a6:	4298      	cmp	r0, r3
 800a6a8:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800a6ac:	d215      	bcs.n	800a6da <forward_lite_node_convert_integer_iu8ou8+0x52>
 800a6ae:	3801      	subs	r0, #1
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a6b6:	ee07 3a10 	vmov	s14, r3
 800a6ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a6be:	eef0 7a66 	vmov.f32	s15, s13
 800a6c2:	eee7 7a00 	vfma.f32	s15, s14, s0
 800a6c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6ca:	ee17 3a90 	vmov	r3, s15
 800a6ce:	f383 0308 	usat	r3, #8, r3
 800a6d2:	f801 3b01 	strb.w	r3, [r1], #1
 800a6d6:	4291      	cmp	r1, r2
 800a6d8:	d1eb      	bne.n	800a6b2 <forward_lite_node_convert_integer_iu8ou8+0x2a>
 800a6da:	4770      	bx	lr

0800a6dc <forward_lite_node_convert_integer_iu8os8>:
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	f99d 3000 	ldrsb.w	r3, [sp]
 800a6e4:	ee06 3a10 	vmov	s12, r3
 800a6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a6f0:	1883      	adds	r3, r0, r2
 800a6f2:	4298      	cmp	r0, r3
 800a6f4:	eea7 6ac0 	vfms.f32	s12, s15, s0
 800a6f8:	d22d      	bcs.n	800a756 <forward_lite_node_convert_integer_iu8os8+0x7a>
 800a6fa:	ed9f 5a17 	vldr	s10, [pc, #92]	; 800a758 <forward_lite_node_convert_integer_iu8os8+0x7c>
 800a6fe:	3801      	subs	r0, #1
 800a700:	440a      	add	r2, r1
 800a702:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a706:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a712:	eef0 6a46 	vmov.f32	s13, s12
 800a716:	eee7 6a80 	vfma.f32	s13, s15, s0
 800a71a:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800a71e:	ee36 7ac5 	vsub.f32	s14, s13, s10
 800a722:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a72e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a732:	dd08      	ble.n	800a746 <forward_lite_node_convert_integer_iu8os8+0x6a>
 800a734:	ee17 3a90 	vmov	r3, s15
 800a738:	f303 0307 	ssat	r3, #8, r3
 800a73c:	f801 3b01 	strb.w	r3, [r1], #1
 800a740:	4291      	cmp	r1, r2
 800a742:	d1e0      	bne.n	800a706 <forward_lite_node_convert_integer_iu8os8+0x2a>
 800a744:	4770      	bx	lr
 800a746:	ee17 3a10 	vmov	r3, s14
 800a74a:	f303 0307 	ssat	r3, #8, r3
 800a74e:	f801 3b01 	strb.w	r3, [r1], #1
 800a752:	4291      	cmp	r1, r2
 800a754:	d1d7      	bne.n	800a706 <forward_lite_node_convert_integer_iu8os8+0x2a>
 800a756:	4770      	bx	lr
 800a758:	3efffffc 	.word	0x3efffffc

0800a75c <forward_lite_node_convert_integer_iu8os8_fast>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	1095      	asrs	r5, r2, #2
 800a760:	2d00      	cmp	r5, #0
 800a762:	dd31      	ble.n	800a7c8 <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 800a764:	00ae      	lsls	r6, r5, #2
 800a766:	460c      	mov	r4, r1
 800a768:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a76c:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800a770:	f850 3b04 	ldr.w	r3, [r0], #4
 800a774:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800a778:	fa3f fc8c 	uxtb16	ip, ip
 800a77c:	fadc fc0e 	ssub16	ip, ip, lr
 800a780:	fa3f f383 	uxtb16	r3, r3
 800a784:	fad3 f30e 	ssub16	r3, r3, lr
 800a788:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800a78c:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 800a790:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a794:	ea43 030c 	orr.w	r3, r3, ip
 800a798:	42a8      	cmp	r0, r5
 800a79a:	f844 3b04 	str.w	r3, [r4], #4
 800a79e:	d1e7      	bne.n	800a770 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 800a7a0:	4431      	add	r1, r6
 800a7a2:	f012 0203 	ands.w	r2, r2, #3
 800a7a6:	d00e      	beq.n	800a7c6 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800a7a8:	782b      	ldrb	r3, [r5, #0]
 800a7aa:	3a01      	subs	r2, #1
 800a7ac:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a7b0:	700b      	strb	r3, [r1, #0]
 800a7b2:	d008      	beq.n	800a7c6 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800a7b4:	786b      	ldrb	r3, [r5, #1]
 800a7b6:	2a01      	cmp	r2, #1
 800a7b8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a7bc:	704b      	strb	r3, [r1, #1]
 800a7be:	d002      	beq.n	800a7c6 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800a7c0:	78ab      	ldrb	r3, [r5, #2]
 800a7c2:	3b80      	subs	r3, #128	; 0x80
 800a7c4:	708b      	strb	r3, [r1, #2]
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	e7ea      	b.n	800a7a2 <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0800a7cc <forward_lite_node_convert_integer_is8ou8>:
 800a7cc:	ee07 3a90 	vmov	s15, r3
 800a7d0:	f89d 3000 	ldrb.w	r3, [sp]
 800a7d4:	ee06 3a90 	vmov	s13, r3
 800a7d8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a7dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a7e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7e4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a7e8:	1883      	adds	r3, r0, r2
 800a7ea:	4298      	cmp	r0, r3
 800a7ec:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800a7f0:	d215      	bcs.n	800a81e <forward_lite_node_convert_integer_is8ou8+0x52>
 800a7f2:	3801      	subs	r0, #1
 800a7f4:	440a      	add	r2, r1
 800a7f6:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 800a7fa:	ee07 3a10 	vmov	s14, r3
 800a7fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a802:	eef0 7a66 	vmov.f32	s15, s13
 800a806:	eee7 7a00 	vfma.f32	s15, s14, s0
 800a80a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a80e:	ee17 3a90 	vmov	r3, s15
 800a812:	f383 0308 	usat	r3, #8, r3
 800a816:	f801 3b01 	strb.w	r3, [r1], #1
 800a81a:	4291      	cmp	r1, r2
 800a81c:	d1eb      	bne.n	800a7f6 <forward_lite_node_convert_integer_is8ou8+0x2a>
 800a81e:	4770      	bx	lr

0800a820 <forward_lite_node_convert_integer_is8ou8_fast>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	1095      	asrs	r5, r2, #2
 800a824:	2d00      	cmp	r5, #0
 800a826:	dd2d      	ble.n	800a884 <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 800a828:	00ae      	lsls	r6, r5, #2
 800a82a:	460c      	mov	r4, r1
 800a82c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a830:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800a834:	f850 3b04 	ldr.w	r3, [r0], #4
 800a838:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800a83c:	fa2f fc8c 	sxtb16	ip, ip
 800a840:	fa9c fc0e 	sadd16	ip, ip, lr
 800a844:	fa2f f383 	sxtb16	r3, r3
 800a848:	fa93 f30e 	sadd16	r3, r3, lr
 800a84c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a850:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800a854:	42a8      	cmp	r0, r5
 800a856:	f844 3b04 	str.w	r3, [r4], #4
 800a85a:	d1eb      	bne.n	800a834 <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 800a85c:	4431      	add	r1, r6
 800a85e:	f012 0203 	ands.w	r2, r2, #3
 800a862:	d00e      	beq.n	800a882 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800a864:	782b      	ldrb	r3, [r5, #0]
 800a866:	3a01      	subs	r2, #1
 800a868:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a86c:	700b      	strb	r3, [r1, #0]
 800a86e:	d008      	beq.n	800a882 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800a870:	786b      	ldrb	r3, [r5, #1]
 800a872:	2a01      	cmp	r2, #1
 800a874:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a878:	704b      	strb	r3, [r1, #1]
 800a87a:	d002      	beq.n	800a882 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800a87c:	78ab      	ldrb	r3, [r5, #2]
 800a87e:	3b80      	subs	r3, #128	; 0x80
 800a880:	708b      	strb	r3, [r1, #2]
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	4605      	mov	r5, r0
 800a886:	e7ea      	b.n	800a85e <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0800a888 <align_factor>:
 800a888:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a88c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a890:	b508      	push	{r3, lr}
 800a892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	8003      	strh	r3, [r0, #0]
 800a89c:	d425      	bmi.n	800a8ea <align_factor+0x62>
 800a89e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a8a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a8aa:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800a8ae:	e005      	b.n	800a8bc <align_factor+0x34>
 800a8b0:	8003      	strh	r3, [r0, #0]
 800a8b2:	b293      	uxth	r3, r2
 800a8b4:	428b      	cmp	r3, r1
 800a8b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a8ba:	d02d      	beq.n	800a918 <align_factor+0x90>
 800a8bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c4:	f103 32ff 	add.w	r2, r3, #4294967295
 800a8c8:	dcf2      	bgt.n	800a8b0 <align_factor+0x28>
 800a8ca:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a92c <align_factor+0xa4>
 800a8ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a8d2:	ee17 0a90 	vmov	r0, s15
 800a8d6:	f7f6 fa8d 	bl	8000df4 <__aeabi_f2lz>
 800a8da:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800a8de:	bf1c      	itt	ne
 800a8e0:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 800a8e4:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 800a8e8:	bd08      	pop	{r3, pc}
 800a8ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f2:	ddd4      	ble.n	800a89e <align_factor+0x16>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a8fa:	e005      	b.n	800a908 <align_factor+0x80>
 800a8fc:	8003      	strh	r3, [r0, #0]
 800a8fe:	b293      	uxth	r3, r2
 800a900:	2b21      	cmp	r3, #33	; 0x21
 800a902:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a906:	d00d      	beq.n	800a924 <align_factor+0x9c>
 800a908:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a910:	f103 0201 	add.w	r2, r3, #1
 800a914:	d4f2      	bmi.n	800a8fc <align_factor+0x74>
 800a916:	e7d8      	b.n	800a8ca <align_factor+0x42>
 800a918:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800a91c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a920:	8003      	strh	r3, [r0, #0]
 800a922:	e7d2      	b.n	800a8ca <align_factor+0x42>
 800a924:	2300      	movs	r3, #0
 800a926:	8003      	strh	r3, [r0, #0]
 800a928:	4618      	mov	r0, r3
 800a92a:	bd08      	pop	{r3, pc}
 800a92c:	4f000000 	.word	0x4f000000

0800a930 <st_sssa8_fully_connected>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	b097      	sub	sp, #92	; 0x5c
 800a936:	460d      	mov	r5, r1
 800a938:	9313      	str	r3, [sp, #76]	; 0x4c
 800a93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a93c:	9204      	str	r2, [sp, #16]
 800a93e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a942:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800a944:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800a948:	6824      	ldr	r4, [r4, #0]
 800a94a:	9408      	str	r4, [sp, #32]
 800a94c:	1e4b      	subs	r3, r1, #1
 800a94e:	b29a      	uxth	r2, r3
 800a950:	2a14      	cmp	r2, #20
 800a952:	930d      	str	r3, [sp, #52]	; 0x34
 800a954:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800a958:	9105      	str	r1, [sp, #20]
 800a95a:	bf9f      	itttt	ls
 800a95c:	2201      	movls	r2, #1
 800a95e:	408b      	lslls	r3, r1
 800a960:	408a      	lslls	r2, r1
 800a962:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 800a966:	9309      	str	r3, [sp, #36]	; 0x24
 800a968:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a96a:	4683      	mov	fp, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 81e4 	beq.w	800ad3a <st_sssa8_fully_connected+0x40a>
 800a972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a974:	9600      	str	r6, [sp, #0]
 800a976:	b2b3      	uxth	r3, r6
 800a978:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a97c:	9e04      	ldr	r6, [sp, #16]
 800a97e:	0851      	lsrs	r1, r2, #1
 800a980:	460c      	mov	r4, r1
 800a982:	9115      	str	r1, [sp, #84]	; 0x54
 800a984:	4632      	mov	r2, r6
 800a986:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a988:	f000 facc 	bl	800af24 <st_int8_reordered_no_shift_zero>
 800a98c:	4621      	mov	r1, r4
 800a98e:	2c00      	cmp	r4, #0
 800a990:	f000 8149 	beq.w	800ac26 <st_sssa8_fully_connected+0x2f6>
 800a994:	4634      	mov	r4, r6
 800a996:	f1a6 0310 	sub.w	r3, r6, #16
 800a99a:	9e05      	ldr	r6, [sp, #20]
 800a99c:	1e4a      	subs	r2, r1, #1
 800a99e:	2001      	movs	r0, #1
 800a9a0:	1eb1      	subs	r1, r6, #2
 800a9a2:	fa00 f101 	lsl.w	r1, r0, r1
 800a9a6:	9112      	str	r1, [sp, #72]	; 0x48
 800a9a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	3110      	adds	r1, #16
 800a9ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a9b2:	920e      	str	r2, [sp, #56]	; 0x38
 800a9b4:	1ee2      	subs	r2, r4, #3
 800a9b6:	920f      	str	r2, [sp, #60]	; 0x3c
 800a9b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a9ba:	3208      	adds	r2, #8
 800a9bc:	9206      	str	r2, [sp, #24]
 800a9be:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a9c0:	091b      	lsrs	r3, r3, #4
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	3202      	adds	r2, #2
 800a9c6:	9207      	str	r2, [sp, #28]
 800a9c8:	011a      	lsls	r2, r3, #4
 800a9ca:	920a      	str	r2, [sp, #40]	; 0x28
 800a9cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a9ce:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800a9d2:	9310      	str	r3, [sp, #64]	; 0x40
 800a9d4:	1f23      	subs	r3, r4, #4
 800a9d6:	9311      	str	r3, [sp, #68]	; 0x44
 800a9d8:	1b83      	subs	r3, r0, r6
 800a9da:	9314      	str	r3, [sp, #80]	; 0x50
 800a9dc:	9a06      	ldr	r2, [sp, #24]
 800a9de:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 800a9e2:	9a04      	ldr	r2, [sp, #16]
 800a9e4:	18ac      	adds	r4, r5, r2
 800a9e6:	2a0f      	cmp	r2, #15
 800a9e8:	9403      	str	r4, [sp, #12]
 800a9ea:	f340 81a0 	ble.w	800ad2e <st_sssa8_fully_connected+0x3fe>
 800a9ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9f0:	18ae      	adds	r6, r5, r2
 800a9f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	f8d4 e000 	ldr.w	lr, [r4]
 800a9fa:	6828      	ldr	r0, [r5, #0]
 800a9fc:	fa2f fc8e 	sxtb16	ip, lr
 800aa00:	ea4f 2130 	mov.w	r1, r0, ror #8
 800aa04:	ea4f 283e 	mov.w	r8, lr, ror #8
 800aa08:	fa2f f080 	sxtb16	r0, r0
 800aa0c:	f8d2 e000 	ldr.w	lr, [r2]
 800aa10:	fa2f f181 	sxtb16	r1, r1
 800aa14:	fa2f f888 	sxtb16	r8, r8
 800aa18:	fb2e 3300 	smlad	r3, lr, r0, r3
 800aa1c:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 800aa20:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800aa24:	fb2c 3301 	smlad	r3, ip, r1, r3
 800aa28:	fb2c e808 	smlad	r8, ip, r8, lr
 800aa2c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800aa30:	686f      	ldr	r7, [r5, #4]
 800aa32:	fa2f f08c 	sxtb16	r0, ip
 800aa36:	ea4f 2137 	mov.w	r1, r7, ror #8
 800aa3a:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800aa3e:	fa2f f787 	sxtb16	r7, r7
 800aa42:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800aa46:	fa2f f181 	sxtb16	r1, r1
 800aa4a:	fa2f fe8e 	sxtb16	lr, lr
 800aa4e:	fb2c 3707 	smlad	r7, ip, r7, r3
 800aa52:	fb2c 8c00 	smlad	ip, ip, r0, r8
 800aa56:	68d0      	ldr	r0, [r2, #12]
 800aa58:	fb20 7701 	smlad	r7, r0, r1, r7
 800aa5c:	fb20 ce0e 	smlad	lr, r0, lr, ip
 800aa60:	68a0      	ldr	r0, [r4, #8]
 800aa62:	68a9      	ldr	r1, [r5, #8]
 800aa64:	fa2f fc80 	sxtb16	ip, r0
 800aa68:	ea4f 2331 	mov.w	r3, r1, ror #8
 800aa6c:	ea4f 2a30 	mov.w	sl, r0, ror #8
 800aa70:	fa2f f181 	sxtb16	r1, r1
 800aa74:	6910      	ldr	r0, [r2, #16]
 800aa76:	fa2f f383 	sxtb16	r3, r3
 800aa7a:	fa2f fa8a 	sxtb16	sl, sl
 800aa7e:	fb20 7101 	smlad	r1, r0, r1, r7
 800aa82:	fb20 e00c 	smlad	r0, r0, ip, lr
 800aa86:	6957      	ldr	r7, [r2, #20]
 800aa88:	fb27 1103 	smlad	r1, r7, r3, r1
 800aa8c:	fb27 0a0a 	smlad	sl, r7, sl, r0
 800aa90:	68e7      	ldr	r7, [r4, #12]
 800aa92:	68e8      	ldr	r0, [r5, #12]
 800aa94:	fa2f fc87 	sxtb16	ip, r7
 800aa98:	ea4f 2930 	mov.w	r9, r0, ror #8
 800aa9c:	ea4f 2837 	mov.w	r8, r7, ror #8
 800aaa0:	3510      	adds	r5, #16
 800aaa2:	6997      	ldr	r7, [r2, #24]
 800aaa4:	fa2f f380 	sxtb16	r3, r0
 800aaa8:	3410      	adds	r4, #16
 800aaaa:	fa2f f989 	sxtb16	r9, r9
 800aaae:	fa2f f888 	sxtb16	r8, r8
 800aab2:	fb27 1303 	smlad	r3, r7, r3, r1
 800aab6:	fb27 a70c 	smlad	r7, r7, ip, sl
 800aaba:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 800aabe:	3220      	adds	r2, #32
 800aac0:	fb2e 3309 	smlad	r3, lr, r9, r3
 800aac4:	fb2e 7708 	smlad	r7, lr, r8, r7
 800aac8:	42b5      	cmp	r5, r6
 800aaca:	d194      	bne.n	800a9f6 <st_sssa8_fully_connected+0xc6>
 800aacc:	9a03      	ldr	r2, [sp, #12]
 800aace:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aad0:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800aad4:	4402      	add	r2, r0
 800aad6:	4639      	mov	r1, r7
 800aad8:	9203      	str	r2, [sp, #12]
 800aada:	4681      	mov	r9, r0
 800aadc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aade:	4591      	cmp	r9, r2
 800aae0:	f280 8123 	bge.w	800ad2a <st_sssa8_fully_connected+0x3fa>
 800aae4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aae6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aaea:	eba2 0a09 	sub.w	sl, r2, r9
 800aaee:	ea4f 029a 	mov.w	r2, sl, lsr #2
 800aaf2:	f102 0a01 	add.w	sl, r2, #1
 800aaf6:	920c      	str	r2, [sp, #48]	; 0x30
 800aaf8:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800aafc:	920b      	str	r2, [sp, #44]	; 0x2c
 800aafe:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 800ab02:	465f      	mov	r7, fp
 800ab04:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab08:	f856 eb04 	ldr.w	lr, [r6], #4
 800ab0c:	fa2f f082 	sxtb16	r0, r2
 800ab10:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800ab14:	ea4f 2532 	mov.w	r5, r2, ror #8
 800ab18:	fa2f fe8e 	sxtb16	lr, lr
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	fa2f fc8c 	sxtb16	ip, ip
 800ab22:	fa2f f585 	sxtb16	r5, r5
 800ab26:	fb22 330e 	smlad	r3, r2, lr, r3
 800ab2a:	fb22 1200 	smlad	r2, r2, r0, r1
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	3708      	adds	r7, #8
 800ab32:	fb21 330c 	smlad	r3, r1, ip, r3
 800ab36:	fb21 2105 	smlad	r1, r1, r5, r2
 800ab3a:	42a6      	cmp	r6, r4
 800ab3c:	d1e2      	bne.n	800ab04 <st_sssa8_fully_connected+0x1d4>
 800ab3e:	9a03      	ldr	r2, [sp, #12]
 800ab40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab42:	4402      	add	r2, r0
 800ab44:	9203      	str	r2, [sp, #12]
 800ab46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab48:	f109 0904 	add.w	r9, r9, #4
 800ab4c:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 800ab50:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800ab54:	9d04      	ldr	r5, [sp, #16]
 800ab56:	454d      	cmp	r5, r9
 800ab58:	dd38      	ble.n	800abcc <st_sssa8_fully_connected+0x29c>
 800ab5a:	f9bb 2000 	ldrsh.w	r2, [fp]
 800ab5e:	f994 0000 	ldrsb.w	r0, [r4]
 800ab62:	9e03      	ldr	r6, [sp, #12]
 800ab64:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ab68:	f996 0000 	ldrsb.w	r0, [r6]
 800ab6c:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ab70:	f109 0201 	add.w	r2, r9, #1
 800ab74:	42aa      	cmp	r2, r5
 800ab76:	da25      	bge.n	800abc4 <st_sssa8_fully_connected+0x294>
 800ab78:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800ab7c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ab80:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ab84:	f996 0001 	ldrsb.w	r0, [r6, #1]
 800ab88:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ab8c:	f109 0202 	add.w	r2, r9, #2
 800ab90:	42aa      	cmp	r2, r5
 800ab92:	da17      	bge.n	800abc4 <st_sssa8_fully_connected+0x294>
 800ab94:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800ab98:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800ab9c:	fb12 3300 	smlabb	r3, r2, r0, r3
 800aba0:	f996 0002 	ldrsb.w	r0, [r6, #2]
 800aba4:	fb12 1100 	smlabb	r1, r2, r0, r1
 800aba8:	f109 0203 	add.w	r2, r9, #3
 800abac:	4295      	cmp	r5, r2
 800abae:	dd09      	ble.n	800abc4 <st_sssa8_fully_connected+0x294>
 800abb0:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 800abb4:	f996 0003 	ldrsb.w	r0, [r6, #3]
 800abb8:	fb12 1100 	smlabb	r1, r2, r0, r1
 800abbc:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800abc0:	fb12 3300 	smlabb	r3, r2, r0, r3
 800abc4:	9a04      	ldr	r2, [sp, #16]
 800abc6:	eba2 0909 	sub.w	r9, r2, r9
 800abca:	444c      	add	r4, r9
 800abcc:	9a05      	ldr	r2, [sp, #20]
 800abce:	2a15      	cmp	r2, #21
 800abd0:	dd7b      	ble.n	800acca <st_sssa8_fully_connected+0x39a>
 800abd2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800abd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800abd6:	9a08      	ldr	r2, [sp, #32]
 800abd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800abda:	fb53 0302 	smmla	r3, r3, r2, r0
 800abde:	412b      	asrs	r3, r5
 800abe0:	4433      	add	r3, r6
 800abe2:	fb51 0102 	smmla	r1, r1, r2, r0
 800abe6:	f303 0307 	ssat	r3, #8, r3
 800abea:	9a07      	ldr	r2, [sp, #28]
 800abec:	4129      	asrs	r1, r5
 800abee:	f802 3c02 	strb.w	r3, [r2, #-2]
 800abf2:	198b      	adds	r3, r1, r6
 800abf4:	f303 0307 	ssat	r3, #8, r3
 800abf8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abfc:	9a04      	ldr	r2, [sp, #16]
 800abfe:	9b06      	ldr	r3, [sp, #24]
 800ac00:	18a5      	adds	r5, r4, r2
 800ac02:	9a07      	ldr	r2, [sp, #28]
 800ac04:	3202      	adds	r2, #2
 800ac06:	9207      	str	r2, [sp, #28]
 800ac08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	9306      	str	r3, [sp, #24]
 800ac10:	f47f aee4 	bne.w	800a9dc <st_sssa8_fully_connected+0xac>
 800ac14:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ac16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac18:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800ac1c:	9225      	str	r2, [sp, #148]	; 0x94
 800ac1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac24:	9324      	str	r3, [sp, #144]	; 0x90
 800ac26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac28:	07db      	lsls	r3, r3, #31
 800ac2a:	d54a      	bpl.n	800acc2 <st_sssa8_fully_connected+0x392>
 800ac2c:	9a04      	ldr	r2, [sp, #16]
 800ac2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac30:	0897      	lsrs	r7, r2, #2
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f000 8174 	beq.w	800af20 <st_sssa8_fully_connected+0x5f0>
 800ac38:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ac3a:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800ac3e:	f855 2b04 	ldr.w	r2, [r5], #4
 800ac42:	6804      	ldr	r4, [r0, #0]
 800ac44:	ea4f 2132 	mov.w	r1, r2, ror #8
 800ac48:	fa2f f282 	sxtb16	r2, r2
 800ac4c:	fa2f f181 	sxtb16	r1, r1
 800ac50:	fb24 3202 	smlad	r2, r4, r2, r3
 800ac54:	6843      	ldr	r3, [r0, #4]
 800ac56:	3008      	adds	r0, #8
 800ac58:	fb23 2301 	smlad	r3, r3, r1, r2
 800ac5c:	42b5      	cmp	r5, r6
 800ac5e:	d1ee      	bne.n	800ac3e <st_sssa8_fully_connected+0x30e>
 800ac60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac62:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800ac66:	9226      	str	r2, [sp, #152]	; 0x98
 800ac68:	9a04      	ldr	r2, [sp, #16]
 800ac6a:	f012 0203 	ands.w	r2, r2, #3
 800ac6e:	d016      	beq.n	800ac9e <st_sssa8_fully_connected+0x36e>
 800ac70:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ac72:	f996 1000 	ldrsb.w	r1, [r6]
 800ac76:	8800      	ldrh	r0, [r0, #0]
 800ac78:	3a01      	subs	r2, #1
 800ac7a:	b292      	uxth	r2, r2
 800ac7c:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ac80:	b16a      	cbz	r2, 800ac9e <st_sssa8_fully_connected+0x36e>
 800ac82:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ac84:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800ac88:	8840      	ldrh	r0, [r0, #2]
 800ac8a:	2a01      	cmp	r2, #1
 800ac8c:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ac90:	d005      	beq.n	800ac9e <st_sssa8_fully_connected+0x36e>
 800ac92:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ac94:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800ac98:	8889      	ldrh	r1, [r1, #4]
 800ac9a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800ac9e:	9a05      	ldr	r2, [sp, #20]
 800aca0:	2a15      	cmp	r2, #21
 800aca2:	f340 811b 	ble.w	800aedc <st_sssa8_fully_connected+0x5ac>
 800aca6:	1e91      	subs	r1, r2, #2
 800aca8:	2201      	movs	r2, #1
 800acaa:	408a      	lsls	r2, r1
 800acac:	9908      	ldr	r1, [sp, #32]
 800acae:	fb53 2301 	smmla	r3, r3, r1, r2
 800acb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acb4:	4113      	asrs	r3, r2
 800acb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acb8:	4413      	add	r3, r2
 800acba:	f303 0307 	ssat	r3, #8, r3
 800acbe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800acc0:	7013      	strb	r3, [r2, #0]
 800acc2:	2000      	movs	r0, #0
 800acc4:	b017      	add	sp, #92	; 0x5c
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	2a00      	cmp	r2, #0
 800accc:	dd13      	ble.n	800acf6 <st_sssa8_fully_connected+0x3c6>
 800acce:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	0049      	lsls	r1, r1, #1
 800acd6:	fb53 5300 	smmla	r3, r3, r0, r5
 800acda:	fb51 5100 	smmla	r1, r1, r0, r5
 800acde:	4113      	asrs	r3, r2
 800ace0:	f303 0307 	ssat	r3, #8, r3
 800ace4:	9807      	ldr	r0, [sp, #28]
 800ace6:	4111      	asrs	r1, r2
 800ace8:	f800 3c02 	strb.w	r3, [r0, #-2]
 800acec:	f301 0107 	ssat	r1, #8, r1
 800acf0:	f800 1c01 	strb.w	r1, [r0, #-1]
 800acf4:	e782      	b.n	800abfc <st_sssa8_fully_connected+0x2cc>
 800acf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acf8:	4093      	lsls	r3, r2
 800acfa:	f303 031f 	ssat	r3, #32, r3
 800acfe:	9808      	ldr	r0, [sp, #32]
 800ad00:	fb53 f310 	smmulr	r3, r3, r0
 800ad04:	fa01 f202 	lsl.w	r2, r1, r2
 800ad08:	f302 021f 	ssat	r2, #32, r2
 800ad0c:	fb52 f210 	smmulr	r2, r2, r0
 800ad10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad12:	440b      	add	r3, r1
 800ad14:	f303 0307 	ssat	r3, #8, r3
 800ad18:	9807      	ldr	r0, [sp, #28]
 800ad1a:	440a      	add	r2, r1
 800ad1c:	f800 3c02 	strb.w	r3, [r0, #-2]
 800ad20:	f302 0207 	ssat	r2, #8, r2
 800ad24:	f800 2c01 	strb.w	r2, [r0, #-1]
 800ad28:	e768      	b.n	800abfc <st_sssa8_fully_connected+0x2cc>
 800ad2a:	4634      	mov	r4, r6
 800ad2c:	e712      	b.n	800ab54 <st_sssa8_fully_connected+0x224>
 800ad2e:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800ad32:	462e      	mov	r6, r5
 800ad34:	f04f 0900 	mov.w	r9, #0
 800ad38:	e6d0      	b.n	800aadc <st_sssa8_fully_connected+0x1ac>
 800ad3a:	4273      	negs	r3, r6
 800ad3c:	b29c      	uxth	r4, r3
 800ad3e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ad42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d0bc      	beq.n	800acc2 <st_sssa8_fully_connected+0x392>
 800ad48:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ad4a:	9904      	ldr	r1, [sp, #16]
 800ad4c:	9805      	ldr	r0, [sp, #20]
 800ad4e:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 800ad52:	f8cd b010 	str.w	fp, [sp, #16]
 800ad56:	3301      	adds	r3, #1
 800ad58:	18d3      	adds	r3, r2, r3
 800ad5a:	f1a1 0810 	sub.w	r8, r1, #16
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	f102 0e01 	add.w	lr, r2, #1
 800ad64:	f028 080f 	bic.w	r8, r8, #15
 800ad68:	2201      	movs	r2, #1
 800ad6a:	1e83      	subs	r3, r0, #2
 800ad6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad70:	f108 0810 	add.w	r8, r8, #16
 800ad74:	9307      	str	r3, [sp, #28]
 800ad76:	4689      	mov	r9, r1
 800ad78:	eb0b 0308 	add.w	r3, fp, r8
 800ad7c:	9306      	str	r3, [sp, #24]
 800ad7e:	f1b9 0f0f 	cmp.w	r9, #15
 800ad82:	eba2 0300 	sub.w	r3, r2, r0
 800ad86:	930a      	str	r3, [sp, #40]	; 0x28
 800ad88:	b236      	sxth	r6, r6
 800ad8a:	f85a 3b04 	ldr.w	r3, [sl], #4
 800ad8e:	f340 8081 	ble.w	800ae94 <st_sssa8_fully_connected+0x564>
 800ad92:	9804      	ldr	r0, [sp, #16]
 800ad94:	eb05 0c08 	add.w	ip, r5, r8
 800ad98:	462a      	mov	r2, r5
 800ad9a:	f8d2 b000 	ldr.w	fp, [r2]
 800ad9e:	6801      	ldr	r1, [r0, #0]
 800ada0:	ea4f 273b 	mov.w	r7, fp, ror #8
 800ada4:	ea4f 2531 	mov.w	r5, r1, ror #8
 800ada8:	fa2f fb8b 	sxtb16	fp, fp
 800adac:	fa2f f787 	sxtb16	r7, r7
 800adb0:	fa24 f181 	sxtab16	r1, r4, r1
 800adb4:	fa24 f585 	sxtab16	r5, r4, r5
 800adb8:	fb21 330b 	smlad	r3, r1, fp, r3
 800adbc:	fb25 3107 	smlad	r1, r5, r7, r3
 800adc0:	f8d2 b004 	ldr.w	fp, [r2, #4]
 800adc4:	6843      	ldr	r3, [r0, #4]
 800adc6:	ea4f 273b 	mov.w	r7, fp, ror #8
 800adca:	ea4f 2533 	mov.w	r5, r3, ror #8
 800adce:	fa2f fb8b 	sxtb16	fp, fp
 800add2:	fa2f f787 	sxtb16	r7, r7
 800add6:	fa24 f383 	sxtab16	r3, r4, r3
 800adda:	fa24 f585 	sxtab16	r5, r4, r5
 800adde:	fb23 110b 	smlad	r1, r3, fp, r1
 800ade2:	fb25 1307 	smlad	r3, r5, r7, r1
 800ade6:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800adea:	6885      	ldr	r5, [r0, #8]
 800adec:	ea4f 273b 	mov.w	r7, fp, ror #8
 800adf0:	ea4f 2135 	mov.w	r1, r5, ror #8
 800adf4:	fa2f fb8b 	sxtb16	fp, fp
 800adf8:	fa2f f787 	sxtb16	r7, r7
 800adfc:	fa24 f585 	sxtab16	r5, r4, r5
 800ae00:	fa24 f181 	sxtab16	r1, r4, r1
 800ae04:	fb25 330b 	smlad	r3, r5, fp, r3
 800ae08:	fb21 3507 	smlad	r5, r1, r7, r3
 800ae0c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800ae10:	68c3      	ldr	r3, [r0, #12]
 800ae12:	ea4f 273b 	mov.w	r7, fp, ror #8
 800ae16:	ea4f 2133 	mov.w	r1, r3, ror #8
 800ae1a:	3210      	adds	r2, #16
 800ae1c:	3010      	adds	r0, #16
 800ae1e:	fa2f fb8b 	sxtb16	fp, fp
 800ae22:	fa2f f787 	sxtb16	r7, r7
 800ae26:	fa24 f383 	sxtab16	r3, r4, r3
 800ae2a:	fa24 f181 	sxtab16	r1, r4, r1
 800ae2e:	fb23 530b 	smlad	r3, r3, fp, r5
 800ae32:	fb21 3307 	smlad	r3, r1, r7, r3
 800ae36:	4594      	cmp	ip, r2
 800ae38:	d1af      	bne.n	800ad9a <st_sssa8_fully_connected+0x46a>
 800ae3a:	4645      	mov	r5, r8
 800ae3c:	45a9      	cmp	r9, r5
 800ae3e:	9f06      	ldr	r7, [sp, #24]
 800ae40:	dd2d      	ble.n	800ae9e <st_sssa8_fully_connected+0x56e>
 800ae42:	eba9 0505 	sub.w	r5, r9, r5
 800ae46:	4415      	add	r5, r2
 800ae48:	4611      	mov	r1, r2
 800ae4a:	f917 0b01 	ldrsb.w	r0, [r7], #1
 800ae4e:	7809      	ldrb	r1, [r1, #0]
 800ae50:	3201      	adds	r2, #1
 800ae52:	b249      	sxtb	r1, r1
 800ae54:	1b80      	subs	r0, r0, r6
 800ae56:	42aa      	cmp	r2, r5
 800ae58:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ae5c:	d1f4      	bne.n	800ae48 <st_sssa8_fully_connected+0x518>
 800ae5e:	9a05      	ldr	r2, [sp, #20]
 800ae60:	2a15      	cmp	r2, #21
 800ae62:	dd20      	ble.n	800aea6 <st_sssa8_fully_connected+0x576>
 800ae64:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ae68:	fb53 1302 	smmla	r3, r3, r2, r1
 800ae6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae6e:	4113      	asrs	r3, r2
 800ae70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae72:	4413      	add	r3, r2
 800ae74:	f303 0307 	ssat	r3, #8, r3
 800ae78:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	f10e 0e01 	add.w	lr, lr, #1
 800ae82:	459e      	cmp	lr, r3
 800ae84:	f43f af1d 	beq.w	800acc2 <st_sssa8_fully_connected+0x392>
 800ae88:	f1b9 0f0f 	cmp.w	r9, #15
 800ae8c:	f85a 3b04 	ldr.w	r3, [sl], #4
 800ae90:	f73f af7f 	bgt.w	800ad92 <st_sssa8_fully_connected+0x462>
 800ae94:	462a      	mov	r2, r5
 800ae96:	2500      	movs	r5, #0
 800ae98:	45a9      	cmp	r9, r5
 800ae9a:	9f04      	ldr	r7, [sp, #16]
 800ae9c:	dcd1      	bgt.n	800ae42 <st_sssa8_fully_connected+0x512>
 800ae9e:	4615      	mov	r5, r2
 800aea0:	9a05      	ldr	r2, [sp, #20]
 800aea2:	2a15      	cmp	r2, #21
 800aea4:	dcde      	bgt.n	800ae64 <st_sssa8_fully_connected+0x534>
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	dd0a      	ble.n	800aec0 <st_sssa8_fully_connected+0x590>
 800aeaa:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	fb53 0301 	smmla	r3, r3, r1, r0
 800aeb4:	4113      	asrs	r3, r2
 800aeb6:	f303 0307 	ssat	r3, #8, r3
 800aeba:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800aebe:	e7dd      	b.n	800ae7c <st_sssa8_fully_connected+0x54c>
 800aec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aec2:	4093      	lsls	r3, r2
 800aec4:	f303 031f 	ssat	r3, #32, r3
 800aec8:	9a08      	ldr	r2, [sp, #32]
 800aeca:	fb53 f312 	smmulr	r3, r3, r2
 800aece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed0:	4413      	add	r3, r2
 800aed2:	f303 0307 	ssat	r3, #8, r3
 800aed6:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800aeda:	e7cf      	b.n	800ae7c <st_sssa8_fully_connected+0x54c>
 800aedc:	2a00      	cmp	r2, #0
 800aede:	dd0d      	ble.n	800aefc <st_sssa8_fully_connected+0x5cc>
 800aee0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	fb53 0301 	smmla	r3, r3, r1, r0
 800aeea:	4113      	asrs	r3, r2
 800aeec:	f303 0307 	ssat	r3, #8, r3
 800aef0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800aef2:	2000      	movs	r0, #0
 800aef4:	7013      	strb	r3, [r2, #0]
 800aef6:	b017      	add	sp, #92	; 0x5c
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	f1c2 0201 	rsb	r2, r2, #1
 800af00:	4093      	lsls	r3, r2
 800af02:	f303 031f 	ssat	r3, #32, r3
 800af06:	9a08      	ldr	r2, [sp, #32]
 800af08:	fb53 f312 	smmulr	r3, r3, r2
 800af0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af0e:	441a      	add	r2, r3
 800af10:	f302 0307 	ssat	r3, #8, r2
 800af14:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800af16:	2000      	movs	r0, #0
 800af18:	7013      	strb	r3, [r2, #0]
 800af1a:	b017      	add	sp, #92	; 0x5c
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af20:	462e      	mov	r6, r5
 800af22:	e6a1      	b.n	800ac68 <st_sssa8_fully_connected+0x338>

0800af24 <st_int8_reordered_no_shift_zero>:
 800af24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af26:	0897      	lsrs	r7, r2, #2
 800af28:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800af2c:	d02e      	beq.n	800af8c <st_int8_reordered_no_shift_zero+0x68>
 800af2e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800af32:	460c      	mov	r4, r1
 800af34:	f850 cb04 	ldr.w	ip, [r0], #4
 800af38:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800af3c:	fa2f fe8e 	sxtb16	lr, lr
 800af40:	fade fe03 	ssub16	lr, lr, r3
 800af44:	fa2f fc8c 	sxtb16	ip, ip
 800af48:	fadc fc03 	ssub16	ip, ip, r3
 800af4c:	42a8      	cmp	r0, r5
 800af4e:	f8c4 c000 	str.w	ip, [r4]
 800af52:	f8c4 e004 	str.w	lr, [r4, #4]
 800af56:	f104 0408 	add.w	r4, r4, #8
 800af5a:	d1eb      	bne.n	800af34 <st_int8_reordered_no_shift_zero+0x10>
 800af5c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800af60:	f012 0203 	ands.w	r2, r2, #3
 800af64:	d011      	beq.n	800af8a <st_int8_reordered_no_shift_zero+0x66>
 800af66:	f995 3000 	ldrsb.w	r3, [r5]
 800af6a:	b276      	sxtb	r6, r6
 800af6c:	1b9b      	subs	r3, r3, r6
 800af6e:	3a01      	subs	r2, #1
 800af70:	800b      	strh	r3, [r1, #0]
 800af72:	d00a      	beq.n	800af8a <st_int8_reordered_no_shift_zero+0x66>
 800af74:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800af78:	2a01      	cmp	r2, #1
 800af7a:	eba3 0306 	sub.w	r3, r3, r6
 800af7e:	804b      	strh	r3, [r1, #2]
 800af80:	d003      	beq.n	800af8a <st_int8_reordered_no_shift_zero+0x66>
 800af82:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800af86:	1b9e      	subs	r6, r3, r6
 800af88:	808e      	strh	r6, [r1, #4]
 800af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8c:	4605      	mov	r5, r0
 800af8e:	e7e7      	b.n	800af60 <st_int8_reordered_no_shift_zero+0x3c>

0800af90 <st_dsp_arm_float_to_q15>:
 800af90:	b530      	push	{r4, r5, lr}
 800af92:	0895      	lsrs	r5, r2, #2
 800af94:	d072      	beq.n	800b07c <st_dsp_arm_float_to_q15+0xec>
 800af96:	eddf 5a60 	vldr	s11, [pc, #384]	; 800b118 <st_dsp_arm_float_to_q15+0x188>
 800af9a:	f100 0c10 	add.w	ip, r0, #16
 800af9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800afa2:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800afa6:	f101 0e08 	add.w	lr, r1, #8
 800afaa:	462c      	mov	r4, r5
 800afac:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800afb0:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800afb4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800afb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afbc:	bfd4      	ite	le
 800afbe:	eef0 7a45 	vmovle.f32	s15, s10
 800afc2:	eef0 7a47 	vmovgt.f32	s15, s14
 800afc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afce:	ee17 3a90 	vmov	r3, s15
 800afd2:	f303 030f 	ssat	r3, #16, r3
 800afd6:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800afda:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800afde:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800afe2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800afe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afea:	bfd4      	ite	le
 800afec:	eef0 7a45 	vmovle.f32	s15, s10
 800aff0:	eef0 7a47 	vmovgt.f32	s15, s14
 800aff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800affc:	ee17 3a90 	vmov	r3, s15
 800b000:	f303 030f 	ssat	r3, #16, r3
 800b004:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800b008:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800b00c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b010:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b018:	bfd4      	ite	le
 800b01a:	eef0 7a45 	vmovle.f32	s15, s10
 800b01e:	eef0 7a47 	vmovgt.f32	s15, s14
 800b022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b02a:	ee17 3a90 	vmov	r3, s15
 800b02e:	f303 030f 	ssat	r3, #16, r3
 800b032:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800b036:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800b03a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b03e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b042:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800b046:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b04a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800b04e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b056:	bfcc      	ite	gt
 800b058:	ee16 3a90 	vmovgt	r3, s13
 800b05c:	ee16 3a10 	vmovle	r3, s12
 800b060:	f303 030f 	ssat	r3, #16, r3
 800b064:	3c01      	subs	r4, #1
 800b066:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800b06a:	f10c 0c10 	add.w	ip, ip, #16
 800b06e:	f10e 0e08 	add.w	lr, lr, #8
 800b072:	d19b      	bne.n	800afac <st_dsp_arm_float_to_q15+0x1c>
 800b074:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b078:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b07c:	f012 0203 	ands.w	r2, r2, #3
 800b080:	d049      	beq.n	800b116 <st_dsp_arm_float_to_q15+0x186>
 800b082:	edd0 7a00 	vldr	s15, [r0]
 800b086:	eddf 5a24 	vldr	s11, [pc, #144]	; 800b118 <st_dsp_arm_float_to_q15+0x188>
 800b08a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b08e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b092:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b096:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800b09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09e:	bfd4      	ite	le
 800b0a0:	eef0 7a46 	vmovle.f32	s15, s12
 800b0a4:	eef0 7a47 	vmovgt.f32	s15, s14
 800b0a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0b0:	ee17 3a90 	vmov	r3, s15
 800b0b4:	f303 030f 	ssat	r3, #16, r3
 800b0b8:	3a01      	subs	r2, #1
 800b0ba:	800b      	strh	r3, [r1, #0]
 800b0bc:	d02b      	beq.n	800b116 <st_dsp_arm_float_to_q15+0x186>
 800b0be:	edd0 7a01 	vldr	s15, [r0, #4]
 800b0c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b0c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ce:	bfd4      	ite	le
 800b0d0:	eef0 6a46 	vmovle.f32	s13, s12
 800b0d4:	eef0 6a47 	vmovgt.f32	s13, s14
 800b0d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0e0:	ee17 3a90 	vmov	r3, s15
 800b0e4:	f303 030f 	ssat	r3, #16, r3
 800b0e8:	2a01      	cmp	r2, #1
 800b0ea:	804b      	strh	r3, [r1, #2]
 800b0ec:	d013      	beq.n	800b116 <st_dsp_arm_float_to_q15+0x186>
 800b0ee:	edd0 7a02 	vldr	s15, [r0, #8]
 800b0f2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800b0f6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800b0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fe:	bfd8      	it	le
 800b100:	eeb0 7a46 	vmovle.f32	s14, s12
 800b104:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b108:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b10c:	ee17 3a10 	vmov	r3, s14
 800b110:	f303 030f 	ssat	r3, #16, r3
 800b114:	808b      	strh	r3, [r1, #4]
 800b116:	bd30      	pop	{r4, r5, pc}
 800b118:	47000000 	.word	0x47000000

0800b11c <st_dsp_arm_float_to_q7>:
 800b11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11e:	0895      	lsrs	r5, r2, #2
 800b120:	d078      	beq.n	800b214 <st_dsp_arm_float_to_q7+0xf8>
 800b122:	f101 0c04 	add.w	ip, r1, #4
 800b126:	eddf 5a6b 	vldr	s11, [pc, #428]	; 800b2d4 <st_dsp_arm_float_to_q7+0x1b8>
 800b12a:	f100 0e10 	add.w	lr, r0, #16
 800b12e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b132:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800b136:	00ae      	lsls	r6, r5, #2
 800b138:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800b13c:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800b140:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b144:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14c:	bfd4      	ite	le
 800b14e:	eef0 7a45 	vmovle.f32	s15, s10
 800b152:	eef0 7a46 	vmovgt.f32	s15, s12
 800b156:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b15a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b15e:	ee17 3a90 	vmov	r3, s15
 800b162:	b21b      	sxth	r3, r3
 800b164:	f303 0307 	ssat	r3, #8, r3
 800b168:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800b16c:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800b170:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b174:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17c:	bfd4      	ite	le
 800b17e:	eef0 7a45 	vmovle.f32	s15, s10
 800b182:	eef0 7a46 	vmovgt.f32	s15, s12
 800b186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b18a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b18e:	ee17 3a90 	vmov	r3, s15
 800b192:	b21b      	sxth	r3, r3
 800b194:	f303 0307 	ssat	r3, #8, r3
 800b198:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800b19c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800b1a0:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b1a4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ac:	bfd4      	ite	le
 800b1ae:	eef0 7a45 	vmovle.f32	s15, s10
 800b1b2:	eef0 7a46 	vmovgt.f32	s15, s12
 800b1b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1be:	ee17 3a90 	vmov	r3, s15
 800b1c2:	b21b      	sxth	r3, r3
 800b1c4:	f303 0307 	ssat	r3, #8, r3
 800b1c8:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800b1cc:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800b1d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b1d4:	ee76 7a86 	vadd.f32	s15, s13, s12
 800b1d8:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800b1dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b1e4:	ee17 3a90 	vmov	r3, s15
 800b1e8:	ee17 7a10 	vmov	r7, s14
 800b1ec:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f4:	b21b      	sxth	r3, r3
 800b1f6:	b23f      	sxth	r7, r7
 800b1f8:	dd5f      	ble.n	800b2ba <st_dsp_arm_float_to_q7+0x19e>
 800b1fa:	f303 0307 	ssat	r3, #8, r3
 800b1fe:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b202:	f10c 0c04 	add.w	ip, ip, #4
 800b206:	4564      	cmp	r4, ip
 800b208:	f10e 0e10 	add.w	lr, lr, #16
 800b20c:	d196      	bne.n	800b13c <st_dsp_arm_float_to_q7+0x20>
 800b20e:	4431      	add	r1, r6
 800b210:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b214:	f012 0203 	ands.w	r2, r2, #3
 800b218:	d04e      	beq.n	800b2b8 <st_dsp_arm_float_to_q7+0x19c>
 800b21a:	edd0 7a00 	vldr	s15, [r0]
 800b21e:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 800b2d4 <st_dsp_arm_float_to_q7+0x1b8>
 800b222:	ee67 6a85 	vmul.f32	s13, s15, s10
 800b226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b22a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b22e:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b236:	bfd4      	ite	le
 800b238:	eef0 7a65 	vmovle.f32	s15, s11
 800b23c:	eef0 7a47 	vmovgt.f32	s15, s14
 800b240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b248:	ee17 3a90 	vmov	r3, s15
 800b24c:	b21b      	sxth	r3, r3
 800b24e:	f303 0307 	ssat	r3, #8, r3
 800b252:	3a01      	subs	r2, #1
 800b254:	700b      	strb	r3, [r1, #0]
 800b256:	d02f      	beq.n	800b2b8 <st_dsp_arm_float_to_q7+0x19c>
 800b258:	edd0 6a01 	vldr	s13, [r0, #4]
 800b25c:	ee26 6a85 	vmul.f32	s12, s13, s10
 800b260:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800b264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b268:	bfd4      	ite	le
 800b26a:	eef0 6a65 	vmovle.f32	s13, s11
 800b26e:	eef0 6a47 	vmovgt.f32	s13, s14
 800b272:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b276:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b27a:	ee16 3a90 	vmov	r3, s13
 800b27e:	b21b      	sxth	r3, r3
 800b280:	f303 0307 	ssat	r3, #8, r3
 800b284:	2a01      	cmp	r2, #1
 800b286:	704b      	strb	r3, [r1, #1]
 800b288:	d016      	beq.n	800b2b8 <st_dsp_arm_float_to_q7+0x19c>
 800b28a:	edd0 7a02 	vldr	s15, [r0, #8]
 800b28e:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b292:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29a:	bfd4      	ite	le
 800b29c:	eef0 7a65 	vmovle.f32	s15, s11
 800b2a0:	eef0 7a47 	vmovgt.f32	s15, s14
 800b2a4:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b2a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2ac:	ee17 3a90 	vmov	r3, s15
 800b2b0:	b21b      	sxth	r3, r3
 800b2b2:	f303 0307 	ssat	r3, #8, r3
 800b2b6:	708b      	strb	r3, [r1, #2]
 800b2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ba:	f307 0707 	ssat	r7, #8, r7
 800b2be:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800b2c2:	f10c 0c04 	add.w	ip, ip, #4
 800b2c6:	45a4      	cmp	ip, r4
 800b2c8:	f10e 0e10 	add.w	lr, lr, #16
 800b2cc:	f47f af36 	bne.w	800b13c <st_dsp_arm_float_to_q7+0x20>
 800b2d0:	e79d      	b.n	800b20e <st_dsp_arm_float_to_q7+0xf2>
 800b2d2:	bf00      	nop
 800b2d4:	43000000 	.word	0x43000000

0800b2d8 <st_dsp_arm_q15_to_float>:
 800b2d8:	b530      	push	{r4, r5, lr}
 800b2da:	0894      	lsrs	r4, r2, #2
 800b2dc:	d038      	beq.n	800b350 <st_dsp_arm_q15_to_float+0x78>
 800b2de:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b3a0 <st_dsp_arm_q15_to_float+0xc8>
 800b2e2:	f100 0c08 	add.w	ip, r0, #8
 800b2e6:	f101 0310 	add.w	r3, r1, #16
 800b2ea:	46a6      	mov	lr, r4
 800b2ec:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800b2f0:	ee07 5a90 	vmov	s15, r5
 800b2f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2f8:	3310      	adds	r3, #16
 800b2fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2fe:	f10c 0c08 	add.w	ip, ip, #8
 800b302:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800b306:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800b30a:	ee07 5a90 	vmov	s15, r5
 800b30e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b312:	f1be 0e01 	subs.w	lr, lr, #1
 800b316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b31a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800b31e:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800b322:	ee07 5a90 	vmov	s15, r5
 800b326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b32a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b32e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800b332:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800b336:	ee07 5a90 	vmov	s15, r5
 800b33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b33e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b342:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b346:	d1d1      	bne.n	800b2ec <st_dsp_arm_q15_to_float+0x14>
 800b348:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b34c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b350:	f012 0203 	ands.w	r2, r2, #3
 800b354:	d023      	beq.n	800b39e <st_dsp_arm_q15_to_float+0xc6>
 800b356:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b35a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b3a0 <st_dsp_arm_q15_to_float+0xc8>
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b366:	3a01      	subs	r2, #1
 800b368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b36c:	edc1 7a00 	vstr	s15, [r1]
 800b370:	d015      	beq.n	800b39e <st_dsp_arm_q15_to_float+0xc6>
 800b372:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b37e:	2a01      	cmp	r2, #1
 800b380:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b384:	edc1 7a01 	vstr	s15, [r1, #4]
 800b388:	d009      	beq.n	800b39e <st_dsp_arm_q15_to_float+0xc6>
 800b38a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b39a:	edc1 7a02 	vstr	s15, [r1, #8]
 800b39e:	bd30      	pop	{r4, r5, pc}
 800b3a0:	38000000 	.word	0x38000000

0800b3a4 <st_dsp_arm_q7_to_float>:
 800b3a4:	b530      	push	{r4, r5, lr}
 800b3a6:	0894      	lsrs	r4, r2, #2
 800b3a8:	d037      	beq.n	800b41a <st_dsp_arm_q7_to_float+0x76>
 800b3aa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b46c <st_dsp_arm_q7_to_float+0xc8>
 800b3ae:	1d03      	adds	r3, r0, #4
 800b3b0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b3b4:	f101 0010 	add.w	r0, r1, #16
 800b3b8:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800b3bc:	ee07 ea90 	vmov	s15, lr
 800b3c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3c4:	469e      	mov	lr, r3
 800b3c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	ed40 7a04 	vstr	s15, [r0, #-16]
 800b3d0:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800b3d4:	ee07 5a90 	vmov	s15, r5
 800b3d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3dc:	45e6      	cmp	lr, ip
 800b3de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3e2:	f100 0010 	add.w	r0, r0, #16
 800b3e6:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 800b3ea:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800b3ee:	ee07 5a90 	vmov	s15, r5
 800b3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3fa:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 800b3fe:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800b402:	ee07 5a90 	vmov	s15, r5
 800b406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b40a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b40e:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800b412:	d1d1      	bne.n	800b3b8 <st_dsp_arm_q7_to_float+0x14>
 800b414:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b418:	4660      	mov	r0, ip
 800b41a:	f012 0203 	ands.w	r2, r2, #3
 800b41e:	d023      	beq.n	800b468 <st_dsp_arm_q7_to_float+0xc4>
 800b420:	f990 3000 	ldrsb.w	r3, [r0]
 800b424:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b46c <st_dsp_arm_q7_to_float+0xc8>
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b430:	3a01      	subs	r2, #1
 800b432:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b436:	edc1 7a00 	vstr	s15, [r1]
 800b43a:	d015      	beq.n	800b468 <st_dsp_arm_q7_to_float+0xc4>
 800b43c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b440:	ee07 3a90 	vmov	s15, r3
 800b444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b448:	2a01      	cmp	r2, #1
 800b44a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b44e:	edc1 7a01 	vstr	s15, [r1, #4]
 800b452:	d009      	beq.n	800b468 <st_dsp_arm_q7_to_float+0xc4>
 800b454:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b458:	ee07 3a90 	vmov	s15, r3
 800b45c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b460:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b464:	edc1 7a02 	vstr	s15, [r1, #8]
 800b468:	bd30      	pop	{r4, r5, pc}
 800b46a:	bf00      	nop
 800b46c:	3c000000 	.word	0x3c000000

0800b470 <ai_version_get>:
 800b470:	0212      	lsls	r2, r2, #8
 800b472:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b476:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800b47a:	4770      	bx	lr

0800b47c <ai_platform_version_get>:
 800b47c:	0e02      	lsrs	r2, r0, #24
 800b47e:	2300      	movs	r3, #0
 800b480:	f362 0307 	bfi	r3, r2, #0, #8
 800b484:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800b488:	f362 230f 	bfi	r3, r2, #8, #8
 800b48c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800b490:	f360 4317 	bfi	r3, r0, #16, #8
 800b494:	b082      	sub	sp, #8
 800b496:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800b49a:	b002      	add	sp, #8
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop

0800b4a0 <get_tensor_byte_size>:
 800b4a0:	b410      	push	{r4}
 800b4a2:	6983      	ldr	r3, [r0, #24]
 800b4a4:	68c4      	ldr	r4, [r0, #12]
 800b4a6:	6941      	ldr	r1, [r0, #20]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68e0      	ldr	r0, [r4, #12]
 800b4ac:	4a07      	ldr	r2, [pc, #28]	; (800b4cc <get_tensor_byte_size+0x2c>)
 800b4ae:	68c9      	ldr	r1, [r1, #12]
 800b4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4b4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800b4b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b4bc:	fb01 f000 	mul.w	r0, r1, r0
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	bf04      	itt	eq
 800b4c4:	3007      	addeq	r0, #7
 800b4c6:	08c0      	lsreq	r0, r0, #3
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	000400c0 	.word	0x000400c0

0800b4d0 <ai_array_to_buffer_fmt>:
 800b4d0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d050      	beq.n	800b57a <ai_array_to_buffer_fmt+0xaa>
 800b4d8:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <ai_array_to_buffer_fmt+0xb4>)
 800b4da:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d00b      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b4e2:	dc1c      	bgt.n	800b51e <ai_array_to_buffer_fmt+0x4e>
 800b4e4:	4b28      	ldr	r3, [pc, #160]	; (800b588 <ai_array_to_buffer_fmt+0xb8>)
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d007      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b4ea:	dd0b      	ble.n	800b504 <ai_array_to_buffer_fmt+0x34>
 800b4ec:	4b27      	ldr	r3, [pc, #156]	; (800b58c <ai_array_to_buffer_fmt+0xbc>)
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d003      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b4f2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d131      	bne.n	800b55e <ai_array_to_buffer_fmt+0x8e>
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b500:	4318      	orrs	r0, r3
 800b502:	4770      	bx	lr
 800b504:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b508:	429a      	cmp	r2, r3
 800b50a:	d0f6      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b50c:	dd2c      	ble.n	800b568 <ai_array_to_buffer_fmt+0x98>
 800b50e:	4b20      	ldr	r3, [pc, #128]	; (800b590 <ai_array_to_buffer_fmt+0xc0>)
 800b510:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b514:	429a      	cmp	r2, r3
 800b516:	bf18      	it	ne
 800b518:	2340      	movne	r3, #64	; 0x40
 800b51a:	4318      	orrs	r0, r3
 800b51c:	4770      	bx	lr
 800b51e:	4b1d      	ldr	r3, [pc, #116]	; (800b594 <ai_array_to_buffer_fmt+0xc4>)
 800b520:	429a      	cmp	r2, r3
 800b522:	d0ea      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b524:	dd0e      	ble.n	800b544 <ai_array_to_buffer_fmt+0x74>
 800b526:	4b1c      	ldr	r3, [pc, #112]	; (800b598 <ai_array_to_buffer_fmt+0xc8>)
 800b528:	429a      	cmp	r2, r3
 800b52a:	d0e6      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b52c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800b530:	429a      	cmp	r2, r3
 800b532:	d0e2      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b534:	4b19      	ldr	r3, [pc, #100]	; (800b59c <ai_array_to_buffer_fmt+0xcc>)
 800b536:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b53a:	429a      	cmp	r2, r3
 800b53c:	bf18      	it	ne
 800b53e:	2340      	movne	r3, #64	; 0x40
 800b540:	4318      	orrs	r0, r3
 800b542:	4770      	bx	lr
 800b544:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b548:	429a      	cmp	r2, r3
 800b54a:	d0d6      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b54c:	3307      	adds	r3, #7
 800b54e:	429a      	cmp	r2, r3
 800b550:	d0d3      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b552:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800b556:	429a      	cmp	r2, r3
 800b558:	bf18      	it	ne
 800b55a:	2340      	movne	r3, #64	; 0x40
 800b55c:	e7ce      	b.n	800b4fc <ai_array_to_buffer_fmt+0x2c>
 800b55e:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <ai_array_to_buffer_fmt+0xd0>)
 800b560:	429a      	cmp	r2, r3
 800b562:	bf18      	it	ne
 800b564:	2340      	movne	r3, #64	; 0x40
 800b566:	e7c9      	b.n	800b4fc <ai_array_to_buffer_fmt+0x2c>
 800b568:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d0c4      	beq.n	800b4fa <ai_array_to_buffer_fmt+0x2a>
 800b570:	3380      	adds	r3, #128	; 0x80
 800b572:	429a      	cmp	r2, r3
 800b574:	bf18      	it	ne
 800b576:	2340      	movne	r3, #64	; 0x40
 800b578:	e7c0      	b.n	800b4fc <ai_array_to_buffer_fmt+0x2c>
 800b57a:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <ai_array_to_buffer_fmt+0xd4>)
 800b57c:	4003      	ands	r3, r0
 800b57e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b582:	e7bb      	b.n	800b4fc <ai_array_to_buffer_fmt+0x2c>
 800b584:	00840040 	.word	0x00840040
 800b588:	00040840 	.word	0x00040840
 800b58c:	00041040 	.word	0x00041040
 800b590:	00040447 	.word	0x00040447
 800b594:	00840840 	.word	0x00840840
 800b598:	00841040 	.word	0x00841040
 800b59c:	0084084f 	.word	0x0084084f
 800b5a0:	0004084f 	.word	0x0004084f
 800b5a4:	00803fff 	.word	0x00803fff

0800b5a8 <ai_array_get_data_byte_size>:
 800b5a8:	b169      	cbz	r1, 800b5c6 <ai_array_get_data_byte_size+0x1e>
 800b5aa:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800b5ae:	fb02 f101 	mul.w	r1, r2, r1
 800b5b2:	1dcb      	adds	r3, r1, #7
 800b5b4:	f023 0307 	bic.w	r3, r3, #7
 800b5b8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800b5bc:	fa23 f000 	lsr.w	r0, r3, r0
 800b5c0:	3007      	adds	r0, #7
 800b5c2:	08c0      	lsrs	r0, r0, #3
 800b5c4:	4770      	bx	lr
 800b5c6:	4608      	mov	r0, r1
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop

0800b5cc <__errno>:
 800b5cc:	4b01      	ldr	r3, [pc, #4]	; (800b5d4 <__errno+0x8>)
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000774 	.word	0x20000774

0800b5d8 <__sflush_r>:
 800b5d8:	898a      	ldrh	r2, [r1, #12]
 800b5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	4605      	mov	r5, r0
 800b5e0:	0710      	lsls	r0, r2, #28
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	d458      	bmi.n	800b698 <__sflush_r+0xc0>
 800b5e6:	684b      	ldr	r3, [r1, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc05      	bgt.n	800b5f8 <__sflush_r+0x20>
 800b5ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	dc02      	bgt.n	800b5f8 <__sflush_r+0x20>
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5fa:	2e00      	cmp	r6, #0
 800b5fc:	d0f9      	beq.n	800b5f2 <__sflush_r+0x1a>
 800b5fe:	2300      	movs	r3, #0
 800b600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b604:	682f      	ldr	r7, [r5, #0]
 800b606:	602b      	str	r3, [r5, #0]
 800b608:	d032      	beq.n	800b670 <__sflush_r+0x98>
 800b60a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	075a      	lsls	r2, r3, #29
 800b610:	d505      	bpl.n	800b61e <__sflush_r+0x46>
 800b612:	6863      	ldr	r3, [r4, #4]
 800b614:	1ac0      	subs	r0, r0, r3
 800b616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b618:	b10b      	cbz	r3, 800b61e <__sflush_r+0x46>
 800b61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b61c:	1ac0      	subs	r0, r0, r3
 800b61e:	2300      	movs	r3, #0
 800b620:	4602      	mov	r2, r0
 800b622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b624:	6a21      	ldr	r1, [r4, #32]
 800b626:	4628      	mov	r0, r5
 800b628:	47b0      	blx	r6
 800b62a:	1c43      	adds	r3, r0, #1
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	d106      	bne.n	800b63e <__sflush_r+0x66>
 800b630:	6829      	ldr	r1, [r5, #0]
 800b632:	291d      	cmp	r1, #29
 800b634:	d82c      	bhi.n	800b690 <__sflush_r+0xb8>
 800b636:	4a2a      	ldr	r2, [pc, #168]	; (800b6e0 <__sflush_r+0x108>)
 800b638:	40ca      	lsrs	r2, r1
 800b63a:	07d6      	lsls	r6, r2, #31
 800b63c:	d528      	bpl.n	800b690 <__sflush_r+0xb8>
 800b63e:	2200      	movs	r2, #0
 800b640:	6062      	str	r2, [r4, #4]
 800b642:	04d9      	lsls	r1, r3, #19
 800b644:	6922      	ldr	r2, [r4, #16]
 800b646:	6022      	str	r2, [r4, #0]
 800b648:	d504      	bpl.n	800b654 <__sflush_r+0x7c>
 800b64a:	1c42      	adds	r2, r0, #1
 800b64c:	d101      	bne.n	800b652 <__sflush_r+0x7a>
 800b64e:	682b      	ldr	r3, [r5, #0]
 800b650:	b903      	cbnz	r3, 800b654 <__sflush_r+0x7c>
 800b652:	6560      	str	r0, [r4, #84]	; 0x54
 800b654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b656:	602f      	str	r7, [r5, #0]
 800b658:	2900      	cmp	r1, #0
 800b65a:	d0ca      	beq.n	800b5f2 <__sflush_r+0x1a>
 800b65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b660:	4299      	cmp	r1, r3
 800b662:	d002      	beq.n	800b66a <__sflush_r+0x92>
 800b664:	4628      	mov	r0, r5
 800b666:	f000 f9cf 	bl	800ba08 <_free_r>
 800b66a:	2000      	movs	r0, #0
 800b66c:	6360      	str	r0, [r4, #52]	; 0x34
 800b66e:	e7c1      	b.n	800b5f4 <__sflush_r+0x1c>
 800b670:	6a21      	ldr	r1, [r4, #32]
 800b672:	2301      	movs	r3, #1
 800b674:	4628      	mov	r0, r5
 800b676:	47b0      	blx	r6
 800b678:	1c41      	adds	r1, r0, #1
 800b67a:	d1c7      	bne.n	800b60c <__sflush_r+0x34>
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d0c4      	beq.n	800b60c <__sflush_r+0x34>
 800b682:	2b1d      	cmp	r3, #29
 800b684:	d001      	beq.n	800b68a <__sflush_r+0xb2>
 800b686:	2b16      	cmp	r3, #22
 800b688:	d101      	bne.n	800b68e <__sflush_r+0xb6>
 800b68a:	602f      	str	r7, [r5, #0]
 800b68c:	e7b1      	b.n	800b5f2 <__sflush_r+0x1a>
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b694:	81a3      	strh	r3, [r4, #12]
 800b696:	e7ad      	b.n	800b5f4 <__sflush_r+0x1c>
 800b698:	690f      	ldr	r7, [r1, #16]
 800b69a:	2f00      	cmp	r7, #0
 800b69c:	d0a9      	beq.n	800b5f2 <__sflush_r+0x1a>
 800b69e:	0793      	lsls	r3, r2, #30
 800b6a0:	680e      	ldr	r6, [r1, #0]
 800b6a2:	bf08      	it	eq
 800b6a4:	694b      	ldreq	r3, [r1, #20]
 800b6a6:	600f      	str	r7, [r1, #0]
 800b6a8:	bf18      	it	ne
 800b6aa:	2300      	movne	r3, #0
 800b6ac:	eba6 0807 	sub.w	r8, r6, r7
 800b6b0:	608b      	str	r3, [r1, #8]
 800b6b2:	f1b8 0f00 	cmp.w	r8, #0
 800b6b6:	dd9c      	ble.n	800b5f2 <__sflush_r+0x1a>
 800b6b8:	6a21      	ldr	r1, [r4, #32]
 800b6ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6bc:	4643      	mov	r3, r8
 800b6be:	463a      	mov	r2, r7
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	47b0      	blx	r6
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	dc06      	bgt.n	800b6d6 <__sflush_r+0xfe>
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ce:	81a3      	strh	r3, [r4, #12]
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	e78e      	b.n	800b5f4 <__sflush_r+0x1c>
 800b6d6:	4407      	add	r7, r0
 800b6d8:	eba8 0800 	sub.w	r8, r8, r0
 800b6dc:	e7e9      	b.n	800b6b2 <__sflush_r+0xda>
 800b6de:	bf00      	nop
 800b6e0:	20400001 	.word	0x20400001

0800b6e4 <_fflush_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	690b      	ldr	r3, [r1, #16]
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	b913      	cbnz	r3, 800b6f4 <_fflush_r+0x10>
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	b118      	cbz	r0, 800b6fe <_fflush_r+0x1a>
 800b6f6:	6983      	ldr	r3, [r0, #24]
 800b6f8:	b90b      	cbnz	r3, 800b6fe <_fflush_r+0x1a>
 800b6fa:	f000 f899 	bl	800b830 <__sinit>
 800b6fe:	4b14      	ldr	r3, [pc, #80]	; (800b750 <_fflush_r+0x6c>)
 800b700:	429c      	cmp	r4, r3
 800b702:	d11b      	bne.n	800b73c <_fflush_r+0x58>
 800b704:	686c      	ldr	r4, [r5, #4]
 800b706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0ef      	beq.n	800b6ee <_fflush_r+0xa>
 800b70e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b710:	07d0      	lsls	r0, r2, #31
 800b712:	d404      	bmi.n	800b71e <_fflush_r+0x3a>
 800b714:	0599      	lsls	r1, r3, #22
 800b716:	d402      	bmi.n	800b71e <_fflush_r+0x3a>
 800b718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b71a:	f000 f94c 	bl	800b9b6 <__retarget_lock_acquire_recursive>
 800b71e:	4628      	mov	r0, r5
 800b720:	4621      	mov	r1, r4
 800b722:	f7ff ff59 	bl	800b5d8 <__sflush_r>
 800b726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b728:	07da      	lsls	r2, r3, #31
 800b72a:	4605      	mov	r5, r0
 800b72c:	d4e0      	bmi.n	800b6f0 <_fflush_r+0xc>
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	059b      	lsls	r3, r3, #22
 800b732:	d4dd      	bmi.n	800b6f0 <_fflush_r+0xc>
 800b734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b736:	f000 f93f 	bl	800b9b8 <__retarget_lock_release_recursive>
 800b73a:	e7d9      	b.n	800b6f0 <_fflush_r+0xc>
 800b73c:	4b05      	ldr	r3, [pc, #20]	; (800b754 <_fflush_r+0x70>)
 800b73e:	429c      	cmp	r4, r3
 800b740:	d101      	bne.n	800b746 <_fflush_r+0x62>
 800b742:	68ac      	ldr	r4, [r5, #8]
 800b744:	e7df      	b.n	800b706 <_fflush_r+0x22>
 800b746:	4b04      	ldr	r3, [pc, #16]	; (800b758 <_fflush_r+0x74>)
 800b748:	429c      	cmp	r4, r3
 800b74a:	bf08      	it	eq
 800b74c:	68ec      	ldreq	r4, [r5, #12]
 800b74e:	e7da      	b.n	800b706 <_fflush_r+0x22>
 800b750:	080a8a30 	.word	0x080a8a30
 800b754:	080a8a50 	.word	0x080a8a50
 800b758:	080a8a10 	.word	0x080a8a10

0800b75c <fflush>:
 800b75c:	4601      	mov	r1, r0
 800b75e:	b920      	cbnz	r0, 800b76a <fflush+0xe>
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <fflush+0x18>)
 800b762:	4905      	ldr	r1, [pc, #20]	; (800b778 <fflush+0x1c>)
 800b764:	6818      	ldr	r0, [r3, #0]
 800b766:	f000 b8e1 	b.w	800b92c <_fwalk_reent>
 800b76a:	4b04      	ldr	r3, [pc, #16]	; (800b77c <fflush+0x20>)
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f7ff bfb9 	b.w	800b6e4 <_fflush_r>
 800b772:	bf00      	nop
 800b774:	080a8a70 	.word	0x080a8a70
 800b778:	0800b6e5 	.word	0x0800b6e5
 800b77c:	20000774 	.word	0x20000774

0800b780 <std>:
 800b780:	2300      	movs	r3, #0
 800b782:	b510      	push	{r4, lr}
 800b784:	4604      	mov	r4, r0
 800b786:	e9c0 3300 	strd	r3, r3, [r0]
 800b78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b78e:	6083      	str	r3, [r0, #8]
 800b790:	8181      	strh	r1, [r0, #12]
 800b792:	6643      	str	r3, [r0, #100]	; 0x64
 800b794:	81c2      	strh	r2, [r0, #14]
 800b796:	6183      	str	r3, [r0, #24]
 800b798:	4619      	mov	r1, r3
 800b79a:	2208      	movs	r2, #8
 800b79c:	305c      	adds	r0, #92	; 0x5c
 800b79e:	f000 f92b 	bl	800b9f8 <memset>
 800b7a2:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <std+0x38>)
 800b7a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b7a6:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <std+0x3c>)
 800b7a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7aa:	4b05      	ldr	r3, [pc, #20]	; (800b7c0 <std+0x40>)
 800b7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7ae:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <std+0x44>)
 800b7b0:	6224      	str	r4, [r4, #32]
 800b7b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0800c519 	.word	0x0800c519
 800b7bc:	0800c53b 	.word	0x0800c53b
 800b7c0:	0800c573 	.word	0x0800c573
 800b7c4:	0800c597 	.word	0x0800c597

0800b7c8 <_cleanup_r>:
 800b7c8:	4901      	ldr	r1, [pc, #4]	; (800b7d0 <_cleanup_r+0x8>)
 800b7ca:	f000 b8af 	b.w	800b92c <_fwalk_reent>
 800b7ce:	bf00      	nop
 800b7d0:	0800b6e5 	.word	0x0800b6e5

0800b7d4 <__sfmoreglue>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	2268      	movs	r2, #104	; 0x68
 800b7d8:	1e4d      	subs	r5, r1, #1
 800b7da:	4355      	muls	r5, r2
 800b7dc:	460e      	mov	r6, r1
 800b7de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7e2:	f000 f97d 	bl	800bae0 <_malloc_r>
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	b140      	cbz	r0, 800b7fc <__sfmoreglue+0x28>
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b7f0:	300c      	adds	r0, #12
 800b7f2:	60a0      	str	r0, [r4, #8]
 800b7f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7f8:	f000 f8fe 	bl	800b9f8 <memset>
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}

0800b800 <__sfp_lock_acquire>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__sfp_lock_acquire+0x8>)
 800b802:	f000 b8d8 	b.w	800b9b6 <__retarget_lock_acquire_recursive>
 800b806:	bf00      	nop
 800b808:	20002491 	.word	0x20002491

0800b80c <__sfp_lock_release>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__sfp_lock_release+0x8>)
 800b80e:	f000 b8d3 	b.w	800b9b8 <__retarget_lock_release_recursive>
 800b812:	bf00      	nop
 800b814:	20002491 	.word	0x20002491

0800b818 <__sinit_lock_acquire>:
 800b818:	4801      	ldr	r0, [pc, #4]	; (800b820 <__sinit_lock_acquire+0x8>)
 800b81a:	f000 b8cc 	b.w	800b9b6 <__retarget_lock_acquire_recursive>
 800b81e:	bf00      	nop
 800b820:	20002492 	.word	0x20002492

0800b824 <__sinit_lock_release>:
 800b824:	4801      	ldr	r0, [pc, #4]	; (800b82c <__sinit_lock_release+0x8>)
 800b826:	f000 b8c7 	b.w	800b9b8 <__retarget_lock_release_recursive>
 800b82a:	bf00      	nop
 800b82c:	20002492 	.word	0x20002492

0800b830 <__sinit>:
 800b830:	b510      	push	{r4, lr}
 800b832:	4604      	mov	r4, r0
 800b834:	f7ff fff0 	bl	800b818 <__sinit_lock_acquire>
 800b838:	69a3      	ldr	r3, [r4, #24]
 800b83a:	b11b      	cbz	r3, 800b844 <__sinit+0x14>
 800b83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b840:	f7ff bff0 	b.w	800b824 <__sinit_lock_release>
 800b844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b848:	6523      	str	r3, [r4, #80]	; 0x50
 800b84a:	4b13      	ldr	r3, [pc, #76]	; (800b898 <__sinit+0x68>)
 800b84c:	4a13      	ldr	r2, [pc, #76]	; (800b89c <__sinit+0x6c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	62a2      	str	r2, [r4, #40]	; 0x28
 800b852:	42a3      	cmp	r3, r4
 800b854:	bf04      	itt	eq
 800b856:	2301      	moveq	r3, #1
 800b858:	61a3      	streq	r3, [r4, #24]
 800b85a:	4620      	mov	r0, r4
 800b85c:	f000 f820 	bl	800b8a0 <__sfp>
 800b860:	6060      	str	r0, [r4, #4]
 800b862:	4620      	mov	r0, r4
 800b864:	f000 f81c 	bl	800b8a0 <__sfp>
 800b868:	60a0      	str	r0, [r4, #8]
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 f818 	bl	800b8a0 <__sfp>
 800b870:	2200      	movs	r2, #0
 800b872:	60e0      	str	r0, [r4, #12]
 800b874:	2104      	movs	r1, #4
 800b876:	6860      	ldr	r0, [r4, #4]
 800b878:	f7ff ff82 	bl	800b780 <std>
 800b87c:	68a0      	ldr	r0, [r4, #8]
 800b87e:	2201      	movs	r2, #1
 800b880:	2109      	movs	r1, #9
 800b882:	f7ff ff7d 	bl	800b780 <std>
 800b886:	68e0      	ldr	r0, [r4, #12]
 800b888:	2202      	movs	r2, #2
 800b88a:	2112      	movs	r1, #18
 800b88c:	f7ff ff78 	bl	800b780 <std>
 800b890:	2301      	movs	r3, #1
 800b892:	61a3      	str	r3, [r4, #24]
 800b894:	e7d2      	b.n	800b83c <__sinit+0xc>
 800b896:	bf00      	nop
 800b898:	080a8a70 	.word	0x080a8a70
 800b89c:	0800b7c9 	.word	0x0800b7c9

0800b8a0 <__sfp>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	f7ff ffac 	bl	800b800 <__sfp_lock_acquire>
 800b8a8:	4b1e      	ldr	r3, [pc, #120]	; (800b924 <__sfp+0x84>)
 800b8aa:	681e      	ldr	r6, [r3, #0]
 800b8ac:	69b3      	ldr	r3, [r6, #24]
 800b8ae:	b913      	cbnz	r3, 800b8b6 <__sfp+0x16>
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f7ff ffbd 	bl	800b830 <__sinit>
 800b8b6:	3648      	adds	r6, #72	; 0x48
 800b8b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	d503      	bpl.n	800b8c8 <__sfp+0x28>
 800b8c0:	6833      	ldr	r3, [r6, #0]
 800b8c2:	b30b      	cbz	r3, 800b908 <__sfp+0x68>
 800b8c4:	6836      	ldr	r6, [r6, #0]
 800b8c6:	e7f7      	b.n	800b8b8 <__sfp+0x18>
 800b8c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8cc:	b9d5      	cbnz	r5, 800b904 <__sfp+0x64>
 800b8ce:	4b16      	ldr	r3, [pc, #88]	; (800b928 <__sfp+0x88>)
 800b8d0:	60e3      	str	r3, [r4, #12]
 800b8d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b8d8:	f000 f86c 	bl	800b9b4 <__retarget_lock_init_recursive>
 800b8dc:	f7ff ff96 	bl	800b80c <__sfp_lock_release>
 800b8e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8e8:	6025      	str	r5, [r4, #0]
 800b8ea:	61a5      	str	r5, [r4, #24]
 800b8ec:	2208      	movs	r2, #8
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8f4:	f000 f880 	bl	800b9f8 <memset>
 800b8f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b900:	4620      	mov	r0, r4
 800b902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b904:	3468      	adds	r4, #104	; 0x68
 800b906:	e7d9      	b.n	800b8bc <__sfp+0x1c>
 800b908:	2104      	movs	r1, #4
 800b90a:	4638      	mov	r0, r7
 800b90c:	f7ff ff62 	bl	800b7d4 <__sfmoreglue>
 800b910:	4604      	mov	r4, r0
 800b912:	6030      	str	r0, [r6, #0]
 800b914:	2800      	cmp	r0, #0
 800b916:	d1d5      	bne.n	800b8c4 <__sfp+0x24>
 800b918:	f7ff ff78 	bl	800b80c <__sfp_lock_release>
 800b91c:	230c      	movs	r3, #12
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	e7ee      	b.n	800b900 <__sfp+0x60>
 800b922:	bf00      	nop
 800b924:	080a8a70 	.word	0x080a8a70
 800b928:	ffff0001 	.word	0xffff0001

0800b92c <_fwalk_reent>:
 800b92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b930:	4606      	mov	r6, r0
 800b932:	4688      	mov	r8, r1
 800b934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b938:	2700      	movs	r7, #0
 800b93a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b93e:	f1b9 0901 	subs.w	r9, r9, #1
 800b942:	d505      	bpl.n	800b950 <_fwalk_reent+0x24>
 800b944:	6824      	ldr	r4, [r4, #0]
 800b946:	2c00      	cmp	r4, #0
 800b948:	d1f7      	bne.n	800b93a <_fwalk_reent+0xe>
 800b94a:	4638      	mov	r0, r7
 800b94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b950:	89ab      	ldrh	r3, [r5, #12]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d907      	bls.n	800b966 <_fwalk_reent+0x3a>
 800b956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b95a:	3301      	adds	r3, #1
 800b95c:	d003      	beq.n	800b966 <_fwalk_reent+0x3a>
 800b95e:	4629      	mov	r1, r5
 800b960:	4630      	mov	r0, r6
 800b962:	47c0      	blx	r8
 800b964:	4307      	orrs	r7, r0
 800b966:	3568      	adds	r5, #104	; 0x68
 800b968:	e7e9      	b.n	800b93e <_fwalk_reent+0x12>
	...

0800b96c <__libc_init_array>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	4d0d      	ldr	r5, [pc, #52]	; (800b9a4 <__libc_init_array+0x38>)
 800b970:	4c0d      	ldr	r4, [pc, #52]	; (800b9a8 <__libc_init_array+0x3c>)
 800b972:	1b64      	subs	r4, r4, r5
 800b974:	10a4      	asrs	r4, r4, #2
 800b976:	2600      	movs	r6, #0
 800b978:	42a6      	cmp	r6, r4
 800b97a:	d109      	bne.n	800b990 <__libc_init_array+0x24>
 800b97c:	4d0b      	ldr	r5, [pc, #44]	; (800b9ac <__libc_init_array+0x40>)
 800b97e:	4c0c      	ldr	r4, [pc, #48]	; (800b9b0 <__libc_init_array+0x44>)
 800b980:	f003 f8da 	bl	800eb38 <_init>
 800b984:	1b64      	subs	r4, r4, r5
 800b986:	10a4      	asrs	r4, r4, #2
 800b988:	2600      	movs	r6, #0
 800b98a:	42a6      	cmp	r6, r4
 800b98c:	d105      	bne.n	800b99a <__libc_init_array+0x2e>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f855 3b04 	ldr.w	r3, [r5], #4
 800b994:	4798      	blx	r3
 800b996:	3601      	adds	r6, #1
 800b998:	e7ee      	b.n	800b978 <__libc_init_array+0xc>
 800b99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99e:	4798      	blx	r3
 800b9a0:	3601      	adds	r6, #1
 800b9a2:	e7f2      	b.n	800b98a <__libc_init_array+0x1e>
 800b9a4:	080a8e80 	.word	0x080a8e80
 800b9a8:	080a8e80 	.word	0x080a8e80
 800b9ac:	080a8e80 	.word	0x080a8e80
 800b9b0:	080a8e84 	.word	0x080a8e84

0800b9b4 <__retarget_lock_init_recursive>:
 800b9b4:	4770      	bx	lr

0800b9b6 <__retarget_lock_acquire_recursive>:
 800b9b6:	4770      	bx	lr

0800b9b8 <__retarget_lock_release_recursive>:
 800b9b8:	4770      	bx	lr
	...

0800b9bc <malloc>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <malloc+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f000 b88d 	b.w	800bae0 <_malloc_r>
 800b9c6:	bf00      	nop
 800b9c8:	20000774 	.word	0x20000774

0800b9cc <free>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	; (800b9d8 <free+0xc>)
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f000 b819 	b.w	800ba08 <_free_r>
 800b9d6:	bf00      	nop
 800b9d8:	20000774 	.word	0x20000774

0800b9dc <memcpy>:
 800b9dc:	440a      	add	r2, r1
 800b9de:	4291      	cmp	r1, r2
 800b9e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9e4:	d100      	bne.n	800b9e8 <memcpy+0xc>
 800b9e6:	4770      	bx	lr
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9f2:	4291      	cmp	r1, r2
 800b9f4:	d1f9      	bne.n	800b9ea <memcpy+0xe>
 800b9f6:	bd10      	pop	{r4, pc}

0800b9f8 <memset>:
 800b9f8:	4402      	add	r2, r0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d100      	bne.n	800ba02 <memset+0xa>
 800ba00:	4770      	bx	lr
 800ba02:	f803 1b01 	strb.w	r1, [r3], #1
 800ba06:	e7f9      	b.n	800b9fc <memset+0x4>

0800ba08 <_free_r>:
 800ba08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba0a:	2900      	cmp	r1, #0
 800ba0c:	d044      	beq.n	800ba98 <_free_r+0x90>
 800ba0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba12:	9001      	str	r0, [sp, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f1a1 0404 	sub.w	r4, r1, #4
 800ba1a:	bfb8      	it	lt
 800ba1c:	18e4      	addlt	r4, r4, r3
 800ba1e:	f001 fcb5 	bl	800d38c <__malloc_lock>
 800ba22:	4a1e      	ldr	r2, [pc, #120]	; (800ba9c <_free_r+0x94>)
 800ba24:	9801      	ldr	r0, [sp, #4]
 800ba26:	6813      	ldr	r3, [r2, #0]
 800ba28:	b933      	cbnz	r3, 800ba38 <_free_r+0x30>
 800ba2a:	6063      	str	r3, [r4, #4]
 800ba2c:	6014      	str	r4, [r2, #0]
 800ba2e:	b003      	add	sp, #12
 800ba30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba34:	f001 bcb0 	b.w	800d398 <__malloc_unlock>
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	d908      	bls.n	800ba4e <_free_r+0x46>
 800ba3c:	6825      	ldr	r5, [r4, #0]
 800ba3e:	1961      	adds	r1, r4, r5
 800ba40:	428b      	cmp	r3, r1
 800ba42:	bf01      	itttt	eq
 800ba44:	6819      	ldreq	r1, [r3, #0]
 800ba46:	685b      	ldreq	r3, [r3, #4]
 800ba48:	1949      	addeq	r1, r1, r5
 800ba4a:	6021      	streq	r1, [r4, #0]
 800ba4c:	e7ed      	b.n	800ba2a <_free_r+0x22>
 800ba4e:	461a      	mov	r2, r3
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	b10b      	cbz	r3, 800ba58 <_free_r+0x50>
 800ba54:	42a3      	cmp	r3, r4
 800ba56:	d9fa      	bls.n	800ba4e <_free_r+0x46>
 800ba58:	6811      	ldr	r1, [r2, #0]
 800ba5a:	1855      	adds	r5, r2, r1
 800ba5c:	42a5      	cmp	r5, r4
 800ba5e:	d10b      	bne.n	800ba78 <_free_r+0x70>
 800ba60:	6824      	ldr	r4, [r4, #0]
 800ba62:	4421      	add	r1, r4
 800ba64:	1854      	adds	r4, r2, r1
 800ba66:	42a3      	cmp	r3, r4
 800ba68:	6011      	str	r1, [r2, #0]
 800ba6a:	d1e0      	bne.n	800ba2e <_free_r+0x26>
 800ba6c:	681c      	ldr	r4, [r3, #0]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	6053      	str	r3, [r2, #4]
 800ba72:	4421      	add	r1, r4
 800ba74:	6011      	str	r1, [r2, #0]
 800ba76:	e7da      	b.n	800ba2e <_free_r+0x26>
 800ba78:	d902      	bls.n	800ba80 <_free_r+0x78>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	6003      	str	r3, [r0, #0]
 800ba7e:	e7d6      	b.n	800ba2e <_free_r+0x26>
 800ba80:	6825      	ldr	r5, [r4, #0]
 800ba82:	1961      	adds	r1, r4, r5
 800ba84:	428b      	cmp	r3, r1
 800ba86:	bf04      	itt	eq
 800ba88:	6819      	ldreq	r1, [r3, #0]
 800ba8a:	685b      	ldreq	r3, [r3, #4]
 800ba8c:	6063      	str	r3, [r4, #4]
 800ba8e:	bf04      	itt	eq
 800ba90:	1949      	addeq	r1, r1, r5
 800ba92:	6021      	streq	r1, [r4, #0]
 800ba94:	6054      	str	r4, [r2, #4]
 800ba96:	e7ca      	b.n	800ba2e <_free_r+0x26>
 800ba98:	b003      	add	sp, #12
 800ba9a:	bd30      	pop	{r4, r5, pc}
 800ba9c:	20002494 	.word	0x20002494

0800baa0 <sbrk_aligned>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	4e0e      	ldr	r6, [pc, #56]	; (800badc <sbrk_aligned+0x3c>)
 800baa4:	460c      	mov	r4, r1
 800baa6:	6831      	ldr	r1, [r6, #0]
 800baa8:	4605      	mov	r5, r0
 800baaa:	b911      	cbnz	r1, 800bab2 <sbrk_aligned+0x12>
 800baac:	f000 fd24 	bl	800c4f8 <_sbrk_r>
 800bab0:	6030      	str	r0, [r6, #0]
 800bab2:	4621      	mov	r1, r4
 800bab4:	4628      	mov	r0, r5
 800bab6:	f000 fd1f 	bl	800c4f8 <_sbrk_r>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d00a      	beq.n	800bad4 <sbrk_aligned+0x34>
 800babe:	1cc4      	adds	r4, r0, #3
 800bac0:	f024 0403 	bic.w	r4, r4, #3
 800bac4:	42a0      	cmp	r0, r4
 800bac6:	d007      	beq.n	800bad8 <sbrk_aligned+0x38>
 800bac8:	1a21      	subs	r1, r4, r0
 800baca:	4628      	mov	r0, r5
 800bacc:	f000 fd14 	bl	800c4f8 <_sbrk_r>
 800bad0:	3001      	adds	r0, #1
 800bad2:	d101      	bne.n	800bad8 <sbrk_aligned+0x38>
 800bad4:	f04f 34ff 	mov.w	r4, #4294967295
 800bad8:	4620      	mov	r0, r4
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	20002498 	.word	0x20002498

0800bae0 <_malloc_r>:
 800bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae4:	1ccd      	adds	r5, r1, #3
 800bae6:	f025 0503 	bic.w	r5, r5, #3
 800baea:	3508      	adds	r5, #8
 800baec:	2d0c      	cmp	r5, #12
 800baee:	bf38      	it	cc
 800baf0:	250c      	movcc	r5, #12
 800baf2:	2d00      	cmp	r5, #0
 800baf4:	4607      	mov	r7, r0
 800baf6:	db01      	blt.n	800bafc <_malloc_r+0x1c>
 800baf8:	42a9      	cmp	r1, r5
 800bafa:	d905      	bls.n	800bb08 <_malloc_r+0x28>
 800bafc:	230c      	movs	r3, #12
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	2600      	movs	r6, #0
 800bb02:	4630      	mov	r0, r6
 800bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb08:	4e2e      	ldr	r6, [pc, #184]	; (800bbc4 <_malloc_r+0xe4>)
 800bb0a:	f001 fc3f 	bl	800d38c <__malloc_lock>
 800bb0e:	6833      	ldr	r3, [r6, #0]
 800bb10:	461c      	mov	r4, r3
 800bb12:	bb34      	cbnz	r4, 800bb62 <_malloc_r+0x82>
 800bb14:	4629      	mov	r1, r5
 800bb16:	4638      	mov	r0, r7
 800bb18:	f7ff ffc2 	bl	800baa0 <sbrk_aligned>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	4604      	mov	r4, r0
 800bb20:	d14d      	bne.n	800bbbe <_malloc_r+0xde>
 800bb22:	6834      	ldr	r4, [r6, #0]
 800bb24:	4626      	mov	r6, r4
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	d140      	bne.n	800bbac <_malloc_r+0xcc>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4638      	mov	r0, r7
 800bb30:	eb04 0803 	add.w	r8, r4, r3
 800bb34:	f000 fce0 	bl	800c4f8 <_sbrk_r>
 800bb38:	4580      	cmp	r8, r0
 800bb3a:	d13a      	bne.n	800bbb2 <_malloc_r+0xd2>
 800bb3c:	6821      	ldr	r1, [r4, #0]
 800bb3e:	3503      	adds	r5, #3
 800bb40:	1a6d      	subs	r5, r5, r1
 800bb42:	f025 0503 	bic.w	r5, r5, #3
 800bb46:	3508      	adds	r5, #8
 800bb48:	2d0c      	cmp	r5, #12
 800bb4a:	bf38      	it	cc
 800bb4c:	250c      	movcc	r5, #12
 800bb4e:	4629      	mov	r1, r5
 800bb50:	4638      	mov	r0, r7
 800bb52:	f7ff ffa5 	bl	800baa0 <sbrk_aligned>
 800bb56:	3001      	adds	r0, #1
 800bb58:	d02b      	beq.n	800bbb2 <_malloc_r+0xd2>
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	442b      	add	r3, r5
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	e00e      	b.n	800bb80 <_malloc_r+0xa0>
 800bb62:	6822      	ldr	r2, [r4, #0]
 800bb64:	1b52      	subs	r2, r2, r5
 800bb66:	d41e      	bmi.n	800bba6 <_malloc_r+0xc6>
 800bb68:	2a0b      	cmp	r2, #11
 800bb6a:	d916      	bls.n	800bb9a <_malloc_r+0xba>
 800bb6c:	1961      	adds	r1, r4, r5
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	6025      	str	r5, [r4, #0]
 800bb72:	bf18      	it	ne
 800bb74:	6059      	strne	r1, [r3, #4]
 800bb76:	6863      	ldr	r3, [r4, #4]
 800bb78:	bf08      	it	eq
 800bb7a:	6031      	streq	r1, [r6, #0]
 800bb7c:	5162      	str	r2, [r4, r5]
 800bb7e:	604b      	str	r3, [r1, #4]
 800bb80:	4638      	mov	r0, r7
 800bb82:	f104 060b 	add.w	r6, r4, #11
 800bb86:	f001 fc07 	bl	800d398 <__malloc_unlock>
 800bb8a:	f026 0607 	bic.w	r6, r6, #7
 800bb8e:	1d23      	adds	r3, r4, #4
 800bb90:	1af2      	subs	r2, r6, r3
 800bb92:	d0b6      	beq.n	800bb02 <_malloc_r+0x22>
 800bb94:	1b9b      	subs	r3, r3, r6
 800bb96:	50a3      	str	r3, [r4, r2]
 800bb98:	e7b3      	b.n	800bb02 <_malloc_r+0x22>
 800bb9a:	6862      	ldr	r2, [r4, #4]
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	bf0c      	ite	eq
 800bba0:	6032      	streq	r2, [r6, #0]
 800bba2:	605a      	strne	r2, [r3, #4]
 800bba4:	e7ec      	b.n	800bb80 <_malloc_r+0xa0>
 800bba6:	4623      	mov	r3, r4
 800bba8:	6864      	ldr	r4, [r4, #4]
 800bbaa:	e7b2      	b.n	800bb12 <_malloc_r+0x32>
 800bbac:	4634      	mov	r4, r6
 800bbae:	6876      	ldr	r6, [r6, #4]
 800bbb0:	e7b9      	b.n	800bb26 <_malloc_r+0x46>
 800bbb2:	230c      	movs	r3, #12
 800bbb4:	603b      	str	r3, [r7, #0]
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	f001 fbee 	bl	800d398 <__malloc_unlock>
 800bbbc:	e7a1      	b.n	800bb02 <_malloc_r+0x22>
 800bbbe:	6025      	str	r5, [r4, #0]
 800bbc0:	e7de      	b.n	800bb80 <_malloc_r+0xa0>
 800bbc2:	bf00      	nop
 800bbc4:	20002494 	.word	0x20002494

0800bbc8 <__cvt>:
 800bbc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbcc:	ec55 4b10 	vmov	r4, r5, d0
 800bbd0:	2d00      	cmp	r5, #0
 800bbd2:	460e      	mov	r6, r1
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	462b      	mov	r3, r5
 800bbd8:	bfbb      	ittet	lt
 800bbda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bbde:	461d      	movlt	r5, r3
 800bbe0:	2300      	movge	r3, #0
 800bbe2:	232d      	movlt	r3, #45	; 0x2d
 800bbe4:	700b      	strb	r3, [r1, #0]
 800bbe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbe8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bbec:	4691      	mov	r9, r2
 800bbee:	f023 0820 	bic.w	r8, r3, #32
 800bbf2:	bfbc      	itt	lt
 800bbf4:	4622      	movlt	r2, r4
 800bbf6:	4614      	movlt	r4, r2
 800bbf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bbfc:	d005      	beq.n	800bc0a <__cvt+0x42>
 800bbfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc02:	d100      	bne.n	800bc06 <__cvt+0x3e>
 800bc04:	3601      	adds	r6, #1
 800bc06:	2102      	movs	r1, #2
 800bc08:	e000      	b.n	800bc0c <__cvt+0x44>
 800bc0a:	2103      	movs	r1, #3
 800bc0c:	ab03      	add	r3, sp, #12
 800bc0e:	9301      	str	r3, [sp, #4]
 800bc10:	ab02      	add	r3, sp, #8
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	ec45 4b10 	vmov	d0, r4, r5
 800bc18:	4653      	mov	r3, sl
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	f000 fda0 	bl	800c760 <_dtoa_r>
 800bc20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc24:	4607      	mov	r7, r0
 800bc26:	d102      	bne.n	800bc2e <__cvt+0x66>
 800bc28:	f019 0f01 	tst.w	r9, #1
 800bc2c:	d022      	beq.n	800bc74 <__cvt+0xac>
 800bc2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc32:	eb07 0906 	add.w	r9, r7, r6
 800bc36:	d110      	bne.n	800bc5a <__cvt+0x92>
 800bc38:	783b      	ldrb	r3, [r7, #0]
 800bc3a:	2b30      	cmp	r3, #48	; 0x30
 800bc3c:	d10a      	bne.n	800bc54 <__cvt+0x8c>
 800bc3e:	2200      	movs	r2, #0
 800bc40:	2300      	movs	r3, #0
 800bc42:	4620      	mov	r0, r4
 800bc44:	4629      	mov	r1, r5
 800bc46:	f7f4 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc4a:	b918      	cbnz	r0, 800bc54 <__cvt+0x8c>
 800bc4c:	f1c6 0601 	rsb	r6, r6, #1
 800bc50:	f8ca 6000 	str.w	r6, [sl]
 800bc54:	f8da 3000 	ldr.w	r3, [sl]
 800bc58:	4499      	add	r9, r3
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f4 ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc66:	b108      	cbz	r0, 800bc6c <__cvt+0xa4>
 800bc68:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc6c:	2230      	movs	r2, #48	; 0x30
 800bc6e:	9b03      	ldr	r3, [sp, #12]
 800bc70:	454b      	cmp	r3, r9
 800bc72:	d307      	bcc.n	800bc84 <__cvt+0xbc>
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc78:	1bdb      	subs	r3, r3, r7
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	6013      	str	r3, [r2, #0]
 800bc7e:	b004      	add	sp, #16
 800bc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc84:	1c59      	adds	r1, r3, #1
 800bc86:	9103      	str	r1, [sp, #12]
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	e7f0      	b.n	800bc6e <__cvt+0xa6>

0800bc8c <__exponent>:
 800bc8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2900      	cmp	r1, #0
 800bc92:	bfb8      	it	lt
 800bc94:	4249      	neglt	r1, r1
 800bc96:	f803 2b02 	strb.w	r2, [r3], #2
 800bc9a:	bfb4      	ite	lt
 800bc9c:	222d      	movlt	r2, #45	; 0x2d
 800bc9e:	222b      	movge	r2, #43	; 0x2b
 800bca0:	2909      	cmp	r1, #9
 800bca2:	7042      	strb	r2, [r0, #1]
 800bca4:	dd2a      	ble.n	800bcfc <__exponent+0x70>
 800bca6:	f10d 0407 	add.w	r4, sp, #7
 800bcaa:	46a4      	mov	ip, r4
 800bcac:	270a      	movs	r7, #10
 800bcae:	46a6      	mov	lr, r4
 800bcb0:	460a      	mov	r2, r1
 800bcb2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bcb6:	fb07 1516 	mls	r5, r7, r6, r1
 800bcba:	3530      	adds	r5, #48	; 0x30
 800bcbc:	2a63      	cmp	r2, #99	; 0x63
 800bcbe:	f104 34ff 	add.w	r4, r4, #4294967295
 800bcc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bcc6:	4631      	mov	r1, r6
 800bcc8:	dcf1      	bgt.n	800bcae <__exponent+0x22>
 800bcca:	3130      	adds	r1, #48	; 0x30
 800bccc:	f1ae 0502 	sub.w	r5, lr, #2
 800bcd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bcd4:	1c44      	adds	r4, r0, #1
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4561      	cmp	r1, ip
 800bcda:	d30a      	bcc.n	800bcf2 <__exponent+0x66>
 800bcdc:	f10d 0209 	add.w	r2, sp, #9
 800bce0:	eba2 020e 	sub.w	r2, r2, lr
 800bce4:	4565      	cmp	r5, ip
 800bce6:	bf88      	it	hi
 800bce8:	2200      	movhi	r2, #0
 800bcea:	4413      	add	r3, r2
 800bcec:	1a18      	subs	r0, r3, r0
 800bcee:	b003      	add	sp, #12
 800bcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bcfa:	e7ed      	b.n	800bcd8 <__exponent+0x4c>
 800bcfc:	2330      	movs	r3, #48	; 0x30
 800bcfe:	3130      	adds	r1, #48	; 0x30
 800bd00:	7083      	strb	r3, [r0, #2]
 800bd02:	70c1      	strb	r1, [r0, #3]
 800bd04:	1d03      	adds	r3, r0, #4
 800bd06:	e7f1      	b.n	800bcec <__exponent+0x60>

0800bd08 <_printf_float>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	ed2d 8b02 	vpush	{d8}
 800bd10:	b08d      	sub	sp, #52	; 0x34
 800bd12:	460c      	mov	r4, r1
 800bd14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd18:	4616      	mov	r6, r2
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	4605      	mov	r5, r0
 800bd1e:	f001 fb1f 	bl	800d360 <_localeconv_r>
 800bd22:	f8d0 a000 	ldr.w	sl, [r0]
 800bd26:	4650      	mov	r0, sl
 800bd28:	f7f4 fa52 	bl	80001d0 <strlen>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd30:	6823      	ldr	r3, [r4, #0]
 800bd32:	9305      	str	r3, [sp, #20]
 800bd34:	f8d8 3000 	ldr.w	r3, [r8]
 800bd38:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bd3c:	3307      	adds	r3, #7
 800bd3e:	f023 0307 	bic.w	r3, r3, #7
 800bd42:	f103 0208 	add.w	r2, r3, #8
 800bd46:	f8c8 2000 	str.w	r2, [r8]
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd5a:	9307      	str	r3, [sp, #28]
 800bd5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd60:	ee08 0a10 	vmov	s16, r0
 800bd64:	4b9f      	ldr	r3, [pc, #636]	; (800bfe4 <_printf_float+0x2dc>)
 800bd66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd6e:	f7f4 fedd 	bl	8000b2c <__aeabi_dcmpun>
 800bd72:	bb88      	cbnz	r0, 800bdd8 <_printf_float+0xd0>
 800bd74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd78:	4b9a      	ldr	r3, [pc, #616]	; (800bfe4 <_printf_float+0x2dc>)
 800bd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7e:	f7f4 feb7 	bl	8000af0 <__aeabi_dcmple>
 800bd82:	bb48      	cbnz	r0, 800bdd8 <_printf_float+0xd0>
 800bd84:	2200      	movs	r2, #0
 800bd86:	2300      	movs	r3, #0
 800bd88:	4640      	mov	r0, r8
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f7f4 fea6 	bl	8000adc <__aeabi_dcmplt>
 800bd90:	b110      	cbz	r0, 800bd98 <_printf_float+0x90>
 800bd92:	232d      	movs	r3, #45	; 0x2d
 800bd94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd98:	4b93      	ldr	r3, [pc, #588]	; (800bfe8 <_printf_float+0x2e0>)
 800bd9a:	4894      	ldr	r0, [pc, #592]	; (800bfec <_printf_float+0x2e4>)
 800bd9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bda0:	bf94      	ite	ls
 800bda2:	4698      	movls	r8, r3
 800bda4:	4680      	movhi	r8, r0
 800bda6:	2303      	movs	r3, #3
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	9b05      	ldr	r3, [sp, #20]
 800bdac:	f023 0204 	bic.w	r2, r3, #4
 800bdb0:	6022      	str	r2, [r4, #0]
 800bdb2:	f04f 0900 	mov.w	r9, #0
 800bdb6:	9700      	str	r7, [sp, #0]
 800bdb8:	4633      	mov	r3, r6
 800bdba:	aa0b      	add	r2, sp, #44	; 0x2c
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f000 f9d8 	bl	800c174 <_printf_common>
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	f040 8090 	bne.w	800beea <_printf_float+0x1e2>
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295
 800bdce:	b00d      	add	sp, #52	; 0x34
 800bdd0:	ecbd 8b02 	vpop	{d8}
 800bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd8:	4642      	mov	r2, r8
 800bdda:	464b      	mov	r3, r9
 800bddc:	4640      	mov	r0, r8
 800bdde:	4649      	mov	r1, r9
 800bde0:	f7f4 fea4 	bl	8000b2c <__aeabi_dcmpun>
 800bde4:	b140      	cbz	r0, 800bdf8 <_printf_float+0xf0>
 800bde6:	464b      	mov	r3, r9
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfbc      	itt	lt
 800bdec:	232d      	movlt	r3, #45	; 0x2d
 800bdee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bdf2:	487f      	ldr	r0, [pc, #508]	; (800bff0 <_printf_float+0x2e8>)
 800bdf4:	4b7f      	ldr	r3, [pc, #508]	; (800bff4 <_printf_float+0x2ec>)
 800bdf6:	e7d1      	b.n	800bd9c <_printf_float+0x94>
 800bdf8:	6863      	ldr	r3, [r4, #4]
 800bdfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bdfe:	9206      	str	r2, [sp, #24]
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	d13f      	bne.n	800be84 <_printf_float+0x17c>
 800be04:	2306      	movs	r3, #6
 800be06:	6063      	str	r3, [r4, #4]
 800be08:	9b05      	ldr	r3, [sp, #20]
 800be0a:	6861      	ldr	r1, [r4, #4]
 800be0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be10:	2300      	movs	r3, #0
 800be12:	9303      	str	r3, [sp, #12]
 800be14:	ab0a      	add	r3, sp, #40	; 0x28
 800be16:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be1a:	ab09      	add	r3, sp, #36	; 0x24
 800be1c:	ec49 8b10 	vmov	d0, r8, r9
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	6022      	str	r2, [r4, #0]
 800be24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be28:	4628      	mov	r0, r5
 800be2a:	f7ff fecd 	bl	800bbc8 <__cvt>
 800be2e:	9b06      	ldr	r3, [sp, #24]
 800be30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be32:	2b47      	cmp	r3, #71	; 0x47
 800be34:	4680      	mov	r8, r0
 800be36:	d108      	bne.n	800be4a <_printf_float+0x142>
 800be38:	1cc8      	adds	r0, r1, #3
 800be3a:	db02      	blt.n	800be42 <_printf_float+0x13a>
 800be3c:	6863      	ldr	r3, [r4, #4]
 800be3e:	4299      	cmp	r1, r3
 800be40:	dd41      	ble.n	800bec6 <_printf_float+0x1be>
 800be42:	f1ab 0b02 	sub.w	fp, fp, #2
 800be46:	fa5f fb8b 	uxtb.w	fp, fp
 800be4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be4e:	d820      	bhi.n	800be92 <_printf_float+0x18a>
 800be50:	3901      	subs	r1, #1
 800be52:	465a      	mov	r2, fp
 800be54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be58:	9109      	str	r1, [sp, #36]	; 0x24
 800be5a:	f7ff ff17 	bl	800bc8c <__exponent>
 800be5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be60:	1813      	adds	r3, r2, r0
 800be62:	2a01      	cmp	r2, #1
 800be64:	4681      	mov	r9, r0
 800be66:	6123      	str	r3, [r4, #16]
 800be68:	dc02      	bgt.n	800be70 <_printf_float+0x168>
 800be6a:	6822      	ldr	r2, [r4, #0]
 800be6c:	07d2      	lsls	r2, r2, #31
 800be6e:	d501      	bpl.n	800be74 <_printf_float+0x16c>
 800be70:	3301      	adds	r3, #1
 800be72:	6123      	str	r3, [r4, #16]
 800be74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d09c      	beq.n	800bdb6 <_printf_float+0xae>
 800be7c:	232d      	movs	r3, #45	; 0x2d
 800be7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be82:	e798      	b.n	800bdb6 <_printf_float+0xae>
 800be84:	9a06      	ldr	r2, [sp, #24]
 800be86:	2a47      	cmp	r2, #71	; 0x47
 800be88:	d1be      	bne.n	800be08 <_printf_float+0x100>
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1bc      	bne.n	800be08 <_printf_float+0x100>
 800be8e:	2301      	movs	r3, #1
 800be90:	e7b9      	b.n	800be06 <_printf_float+0xfe>
 800be92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800be96:	d118      	bne.n	800beca <_printf_float+0x1c2>
 800be98:	2900      	cmp	r1, #0
 800be9a:	6863      	ldr	r3, [r4, #4]
 800be9c:	dd0b      	ble.n	800beb6 <_printf_float+0x1ae>
 800be9e:	6121      	str	r1, [r4, #16]
 800bea0:	b913      	cbnz	r3, 800bea8 <_printf_float+0x1a0>
 800bea2:	6822      	ldr	r2, [r4, #0]
 800bea4:	07d0      	lsls	r0, r2, #31
 800bea6:	d502      	bpl.n	800beae <_printf_float+0x1a6>
 800bea8:	3301      	adds	r3, #1
 800beaa:	440b      	add	r3, r1
 800beac:	6123      	str	r3, [r4, #16]
 800beae:	65a1      	str	r1, [r4, #88]	; 0x58
 800beb0:	f04f 0900 	mov.w	r9, #0
 800beb4:	e7de      	b.n	800be74 <_printf_float+0x16c>
 800beb6:	b913      	cbnz	r3, 800bebe <_printf_float+0x1b6>
 800beb8:	6822      	ldr	r2, [r4, #0]
 800beba:	07d2      	lsls	r2, r2, #31
 800bebc:	d501      	bpl.n	800bec2 <_printf_float+0x1ba>
 800bebe:	3302      	adds	r3, #2
 800bec0:	e7f4      	b.n	800beac <_printf_float+0x1a4>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e7f2      	b.n	800beac <_printf_float+0x1a4>
 800bec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800beca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800becc:	4299      	cmp	r1, r3
 800bece:	db05      	blt.n	800bedc <_printf_float+0x1d4>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	6121      	str	r1, [r4, #16]
 800bed4:	07d8      	lsls	r0, r3, #31
 800bed6:	d5ea      	bpl.n	800beae <_printf_float+0x1a6>
 800bed8:	1c4b      	adds	r3, r1, #1
 800beda:	e7e7      	b.n	800beac <_printf_float+0x1a4>
 800bedc:	2900      	cmp	r1, #0
 800bede:	bfd4      	ite	le
 800bee0:	f1c1 0202 	rsble	r2, r1, #2
 800bee4:	2201      	movgt	r2, #1
 800bee6:	4413      	add	r3, r2
 800bee8:	e7e0      	b.n	800beac <_printf_float+0x1a4>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	055a      	lsls	r2, r3, #21
 800beee:	d407      	bmi.n	800bf00 <_printf_float+0x1f8>
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	4642      	mov	r2, r8
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	d12c      	bne.n	800bf58 <_printf_float+0x250>
 800befe:	e764      	b.n	800bdca <_printf_float+0xc2>
 800bf00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf04:	f240 80e0 	bls.w	800c0c8 <_printf_float+0x3c0>
 800bf08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f7f4 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d034      	beq.n	800bf82 <_printf_float+0x27a>
 800bf18:	4a37      	ldr	r2, [pc, #220]	; (800bff8 <_printf_float+0x2f0>)
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4628      	mov	r0, r5
 800bf20:	47b8      	blx	r7
 800bf22:	3001      	adds	r0, #1
 800bf24:	f43f af51 	beq.w	800bdca <_printf_float+0xc2>
 800bf28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	db02      	blt.n	800bf36 <_printf_float+0x22e>
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	07d8      	lsls	r0, r3, #31
 800bf34:	d510      	bpl.n	800bf58 <_printf_float+0x250>
 800bf36:	ee18 3a10 	vmov	r3, s16
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b8      	blx	r7
 800bf42:	3001      	adds	r0, #1
 800bf44:	f43f af41 	beq.w	800bdca <_printf_float+0xc2>
 800bf48:	f04f 0800 	mov.w	r8, #0
 800bf4c:	f104 091a 	add.w	r9, r4, #26
 800bf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf52:	3b01      	subs	r3, #1
 800bf54:	4543      	cmp	r3, r8
 800bf56:	dc09      	bgt.n	800bf6c <_printf_float+0x264>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	079b      	lsls	r3, r3, #30
 800bf5c:	f100 8105 	bmi.w	800c16a <_printf_float+0x462>
 800bf60:	68e0      	ldr	r0, [r4, #12]
 800bf62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf64:	4298      	cmp	r0, r3
 800bf66:	bfb8      	it	lt
 800bf68:	4618      	movlt	r0, r3
 800bf6a:	e730      	b.n	800bdce <_printf_float+0xc6>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	464a      	mov	r2, r9
 800bf70:	4631      	mov	r1, r6
 800bf72:	4628      	mov	r0, r5
 800bf74:	47b8      	blx	r7
 800bf76:	3001      	adds	r0, #1
 800bf78:	f43f af27 	beq.w	800bdca <_printf_float+0xc2>
 800bf7c:	f108 0801 	add.w	r8, r8, #1
 800bf80:	e7e6      	b.n	800bf50 <_printf_float+0x248>
 800bf82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dc39      	bgt.n	800bffc <_printf_float+0x2f4>
 800bf88:	4a1b      	ldr	r2, [pc, #108]	; (800bff8 <_printf_float+0x2f0>)
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b8      	blx	r7
 800bf92:	3001      	adds	r0, #1
 800bf94:	f43f af19 	beq.w	800bdca <_printf_float+0xc2>
 800bf98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	d102      	bne.n	800bfa6 <_printf_float+0x29e>
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	07d9      	lsls	r1, r3, #31
 800bfa4:	d5d8      	bpl.n	800bf58 <_printf_float+0x250>
 800bfa6:	ee18 3a10 	vmov	r3, s16
 800bfaa:	4652      	mov	r2, sl
 800bfac:	4631      	mov	r1, r6
 800bfae:	4628      	mov	r0, r5
 800bfb0:	47b8      	blx	r7
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	f43f af09 	beq.w	800bdca <_printf_float+0xc2>
 800bfb8:	f04f 0900 	mov.w	r9, #0
 800bfbc:	f104 0a1a 	add.w	sl, r4, #26
 800bfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc2:	425b      	negs	r3, r3
 800bfc4:	454b      	cmp	r3, r9
 800bfc6:	dc01      	bgt.n	800bfcc <_printf_float+0x2c4>
 800bfc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfca:	e792      	b.n	800bef2 <_printf_float+0x1ea>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	4652      	mov	r2, sl
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	47b8      	blx	r7
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	f43f aef7 	beq.w	800bdca <_printf_float+0xc2>
 800bfdc:	f109 0901 	add.w	r9, r9, #1
 800bfe0:	e7ee      	b.n	800bfc0 <_printf_float+0x2b8>
 800bfe2:	bf00      	nop
 800bfe4:	7fefffff 	.word	0x7fefffff
 800bfe8:	080a8a74 	.word	0x080a8a74
 800bfec:	080a8a78 	.word	0x080a8a78
 800bff0:	080a8a80 	.word	0x080a8a80
 800bff4:	080a8a7c 	.word	0x080a8a7c
 800bff8:	080a8a84 	.word	0x080a8a84
 800bffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c000:	429a      	cmp	r2, r3
 800c002:	bfa8      	it	ge
 800c004:	461a      	movge	r2, r3
 800c006:	2a00      	cmp	r2, #0
 800c008:	4691      	mov	r9, r2
 800c00a:	dc37      	bgt.n	800c07c <_printf_float+0x374>
 800c00c:	f04f 0b00 	mov.w	fp, #0
 800c010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c014:	f104 021a 	add.w	r2, r4, #26
 800c018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c01a:	9305      	str	r3, [sp, #20]
 800c01c:	eba3 0309 	sub.w	r3, r3, r9
 800c020:	455b      	cmp	r3, fp
 800c022:	dc33      	bgt.n	800c08c <_printf_float+0x384>
 800c024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c028:	429a      	cmp	r2, r3
 800c02a:	db3b      	blt.n	800c0a4 <_printf_float+0x39c>
 800c02c:	6823      	ldr	r3, [r4, #0]
 800c02e:	07da      	lsls	r2, r3, #31
 800c030:	d438      	bmi.n	800c0a4 <_printf_float+0x39c>
 800c032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c034:	9a05      	ldr	r2, [sp, #20]
 800c036:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c038:	1a9a      	subs	r2, r3, r2
 800c03a:	eba3 0901 	sub.w	r9, r3, r1
 800c03e:	4591      	cmp	r9, r2
 800c040:	bfa8      	it	ge
 800c042:	4691      	movge	r9, r2
 800c044:	f1b9 0f00 	cmp.w	r9, #0
 800c048:	dc35      	bgt.n	800c0b6 <_printf_float+0x3ae>
 800c04a:	f04f 0800 	mov.w	r8, #0
 800c04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c052:	f104 0a1a 	add.w	sl, r4, #26
 800c056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c05a:	1a9b      	subs	r3, r3, r2
 800c05c:	eba3 0309 	sub.w	r3, r3, r9
 800c060:	4543      	cmp	r3, r8
 800c062:	f77f af79 	ble.w	800bf58 <_printf_float+0x250>
 800c066:	2301      	movs	r3, #1
 800c068:	4652      	mov	r2, sl
 800c06a:	4631      	mov	r1, r6
 800c06c:	4628      	mov	r0, r5
 800c06e:	47b8      	blx	r7
 800c070:	3001      	adds	r0, #1
 800c072:	f43f aeaa 	beq.w	800bdca <_printf_float+0xc2>
 800c076:	f108 0801 	add.w	r8, r8, #1
 800c07a:	e7ec      	b.n	800c056 <_printf_float+0x34e>
 800c07c:	4613      	mov	r3, r2
 800c07e:	4631      	mov	r1, r6
 800c080:	4642      	mov	r2, r8
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	d1c0      	bne.n	800c00c <_printf_float+0x304>
 800c08a:	e69e      	b.n	800bdca <_printf_float+0xc2>
 800c08c:	2301      	movs	r3, #1
 800c08e:	4631      	mov	r1, r6
 800c090:	4628      	mov	r0, r5
 800c092:	9205      	str	r2, [sp, #20]
 800c094:	47b8      	blx	r7
 800c096:	3001      	adds	r0, #1
 800c098:	f43f ae97 	beq.w	800bdca <_printf_float+0xc2>
 800c09c:	9a05      	ldr	r2, [sp, #20]
 800c09e:	f10b 0b01 	add.w	fp, fp, #1
 800c0a2:	e7b9      	b.n	800c018 <_printf_float+0x310>
 800c0a4:	ee18 3a10 	vmov	r3, s16
 800c0a8:	4652      	mov	r2, sl
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	47b8      	blx	r7
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d1be      	bne.n	800c032 <_printf_float+0x32a>
 800c0b4:	e689      	b.n	800bdca <_printf_float+0xc2>
 800c0b6:	9a05      	ldr	r2, [sp, #20]
 800c0b8:	464b      	mov	r3, r9
 800c0ba:	4442      	add	r2, r8
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	d1c1      	bne.n	800c04a <_printf_float+0x342>
 800c0c6:	e680      	b.n	800bdca <_printf_float+0xc2>
 800c0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ca:	2a01      	cmp	r2, #1
 800c0cc:	dc01      	bgt.n	800c0d2 <_printf_float+0x3ca>
 800c0ce:	07db      	lsls	r3, r3, #31
 800c0d0:	d538      	bpl.n	800c144 <_printf_float+0x43c>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	4642      	mov	r2, r8
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	4628      	mov	r0, r5
 800c0da:	47b8      	blx	r7
 800c0dc:	3001      	adds	r0, #1
 800c0de:	f43f ae74 	beq.w	800bdca <_printf_float+0xc2>
 800c0e2:	ee18 3a10 	vmov	r3, s16
 800c0e6:	4652      	mov	r2, sl
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	47b8      	blx	r7
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	f43f ae6b 	beq.w	800bdca <_printf_float+0xc2>
 800c0f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f7f4 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c100:	b9d8      	cbnz	r0, 800c13a <_printf_float+0x432>
 800c102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c104:	f108 0201 	add.w	r2, r8, #1
 800c108:	3b01      	subs	r3, #1
 800c10a:	4631      	mov	r1, r6
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b8      	blx	r7
 800c110:	3001      	adds	r0, #1
 800c112:	d10e      	bne.n	800c132 <_printf_float+0x42a>
 800c114:	e659      	b.n	800bdca <_printf_float+0xc2>
 800c116:	2301      	movs	r3, #1
 800c118:	4652      	mov	r2, sl
 800c11a:	4631      	mov	r1, r6
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b8      	blx	r7
 800c120:	3001      	adds	r0, #1
 800c122:	f43f ae52 	beq.w	800bdca <_printf_float+0xc2>
 800c126:	f108 0801 	add.w	r8, r8, #1
 800c12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c12c:	3b01      	subs	r3, #1
 800c12e:	4543      	cmp	r3, r8
 800c130:	dcf1      	bgt.n	800c116 <_printf_float+0x40e>
 800c132:	464b      	mov	r3, r9
 800c134:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c138:	e6dc      	b.n	800bef4 <_printf_float+0x1ec>
 800c13a:	f04f 0800 	mov.w	r8, #0
 800c13e:	f104 0a1a 	add.w	sl, r4, #26
 800c142:	e7f2      	b.n	800c12a <_printf_float+0x422>
 800c144:	2301      	movs	r3, #1
 800c146:	4642      	mov	r2, r8
 800c148:	e7df      	b.n	800c10a <_printf_float+0x402>
 800c14a:	2301      	movs	r3, #1
 800c14c:	464a      	mov	r2, r9
 800c14e:	4631      	mov	r1, r6
 800c150:	4628      	mov	r0, r5
 800c152:	47b8      	blx	r7
 800c154:	3001      	adds	r0, #1
 800c156:	f43f ae38 	beq.w	800bdca <_printf_float+0xc2>
 800c15a:	f108 0801 	add.w	r8, r8, #1
 800c15e:	68e3      	ldr	r3, [r4, #12]
 800c160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c162:	1a5b      	subs	r3, r3, r1
 800c164:	4543      	cmp	r3, r8
 800c166:	dcf0      	bgt.n	800c14a <_printf_float+0x442>
 800c168:	e6fa      	b.n	800bf60 <_printf_float+0x258>
 800c16a:	f04f 0800 	mov.w	r8, #0
 800c16e:	f104 0919 	add.w	r9, r4, #25
 800c172:	e7f4      	b.n	800c15e <_printf_float+0x456>

0800c174 <_printf_common>:
 800c174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c178:	4616      	mov	r6, r2
 800c17a:	4699      	mov	r9, r3
 800c17c:	688a      	ldr	r2, [r1, #8]
 800c17e:	690b      	ldr	r3, [r1, #16]
 800c180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c184:	4293      	cmp	r3, r2
 800c186:	bfb8      	it	lt
 800c188:	4613      	movlt	r3, r2
 800c18a:	6033      	str	r3, [r6, #0]
 800c18c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c190:	4607      	mov	r7, r0
 800c192:	460c      	mov	r4, r1
 800c194:	b10a      	cbz	r2, 800c19a <_printf_common+0x26>
 800c196:	3301      	adds	r3, #1
 800c198:	6033      	str	r3, [r6, #0]
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	0699      	lsls	r1, r3, #26
 800c19e:	bf42      	ittt	mi
 800c1a0:	6833      	ldrmi	r3, [r6, #0]
 800c1a2:	3302      	addmi	r3, #2
 800c1a4:	6033      	strmi	r3, [r6, #0]
 800c1a6:	6825      	ldr	r5, [r4, #0]
 800c1a8:	f015 0506 	ands.w	r5, r5, #6
 800c1ac:	d106      	bne.n	800c1bc <_printf_common+0x48>
 800c1ae:	f104 0a19 	add.w	sl, r4, #25
 800c1b2:	68e3      	ldr	r3, [r4, #12]
 800c1b4:	6832      	ldr	r2, [r6, #0]
 800c1b6:	1a9b      	subs	r3, r3, r2
 800c1b8:	42ab      	cmp	r3, r5
 800c1ba:	dc26      	bgt.n	800c20a <_printf_common+0x96>
 800c1bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1c0:	1e13      	subs	r3, r2, #0
 800c1c2:	6822      	ldr	r2, [r4, #0]
 800c1c4:	bf18      	it	ne
 800c1c6:	2301      	movne	r3, #1
 800c1c8:	0692      	lsls	r2, r2, #26
 800c1ca:	d42b      	bmi.n	800c224 <_printf_common+0xb0>
 800c1cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	47c0      	blx	r8
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	d01e      	beq.n	800c218 <_printf_common+0xa4>
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	68e5      	ldr	r5, [r4, #12]
 800c1de:	6832      	ldr	r2, [r6, #0]
 800c1e0:	f003 0306 	and.w	r3, r3, #6
 800c1e4:	2b04      	cmp	r3, #4
 800c1e6:	bf08      	it	eq
 800c1e8:	1aad      	subeq	r5, r5, r2
 800c1ea:	68a3      	ldr	r3, [r4, #8]
 800c1ec:	6922      	ldr	r2, [r4, #16]
 800c1ee:	bf0c      	ite	eq
 800c1f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1f4:	2500      	movne	r5, #0
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	bfc4      	itt	gt
 800c1fa:	1a9b      	subgt	r3, r3, r2
 800c1fc:	18ed      	addgt	r5, r5, r3
 800c1fe:	2600      	movs	r6, #0
 800c200:	341a      	adds	r4, #26
 800c202:	42b5      	cmp	r5, r6
 800c204:	d11a      	bne.n	800c23c <_printf_common+0xc8>
 800c206:	2000      	movs	r0, #0
 800c208:	e008      	b.n	800c21c <_printf_common+0xa8>
 800c20a:	2301      	movs	r3, #1
 800c20c:	4652      	mov	r2, sl
 800c20e:	4649      	mov	r1, r9
 800c210:	4638      	mov	r0, r7
 800c212:	47c0      	blx	r8
 800c214:	3001      	adds	r0, #1
 800c216:	d103      	bne.n	800c220 <_printf_common+0xac>
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c220:	3501      	adds	r5, #1
 800c222:	e7c6      	b.n	800c1b2 <_printf_common+0x3e>
 800c224:	18e1      	adds	r1, r4, r3
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	2030      	movs	r0, #48	; 0x30
 800c22a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c22e:	4422      	add	r2, r4
 800c230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c238:	3302      	adds	r3, #2
 800c23a:	e7c7      	b.n	800c1cc <_printf_common+0x58>
 800c23c:	2301      	movs	r3, #1
 800c23e:	4622      	mov	r2, r4
 800c240:	4649      	mov	r1, r9
 800c242:	4638      	mov	r0, r7
 800c244:	47c0      	blx	r8
 800c246:	3001      	adds	r0, #1
 800c248:	d0e6      	beq.n	800c218 <_printf_common+0xa4>
 800c24a:	3601      	adds	r6, #1
 800c24c:	e7d9      	b.n	800c202 <_printf_common+0x8e>
	...

0800c250 <_printf_i>:
 800c250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c254:	7e0f      	ldrb	r7, [r1, #24]
 800c256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c258:	2f78      	cmp	r7, #120	; 0x78
 800c25a:	4691      	mov	r9, r2
 800c25c:	4680      	mov	r8, r0
 800c25e:	460c      	mov	r4, r1
 800c260:	469a      	mov	sl, r3
 800c262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c266:	d807      	bhi.n	800c278 <_printf_i+0x28>
 800c268:	2f62      	cmp	r7, #98	; 0x62
 800c26a:	d80a      	bhi.n	800c282 <_printf_i+0x32>
 800c26c:	2f00      	cmp	r7, #0
 800c26e:	f000 80d8 	beq.w	800c422 <_printf_i+0x1d2>
 800c272:	2f58      	cmp	r7, #88	; 0x58
 800c274:	f000 80a3 	beq.w	800c3be <_printf_i+0x16e>
 800c278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c27c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c280:	e03a      	b.n	800c2f8 <_printf_i+0xa8>
 800c282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c286:	2b15      	cmp	r3, #21
 800c288:	d8f6      	bhi.n	800c278 <_printf_i+0x28>
 800c28a:	a101      	add	r1, pc, #4	; (adr r1, 800c290 <_printf_i+0x40>)
 800c28c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c290:	0800c2e9 	.word	0x0800c2e9
 800c294:	0800c2fd 	.word	0x0800c2fd
 800c298:	0800c279 	.word	0x0800c279
 800c29c:	0800c279 	.word	0x0800c279
 800c2a0:	0800c279 	.word	0x0800c279
 800c2a4:	0800c279 	.word	0x0800c279
 800c2a8:	0800c2fd 	.word	0x0800c2fd
 800c2ac:	0800c279 	.word	0x0800c279
 800c2b0:	0800c279 	.word	0x0800c279
 800c2b4:	0800c279 	.word	0x0800c279
 800c2b8:	0800c279 	.word	0x0800c279
 800c2bc:	0800c409 	.word	0x0800c409
 800c2c0:	0800c32d 	.word	0x0800c32d
 800c2c4:	0800c3eb 	.word	0x0800c3eb
 800c2c8:	0800c279 	.word	0x0800c279
 800c2cc:	0800c279 	.word	0x0800c279
 800c2d0:	0800c42b 	.word	0x0800c42b
 800c2d4:	0800c279 	.word	0x0800c279
 800c2d8:	0800c32d 	.word	0x0800c32d
 800c2dc:	0800c279 	.word	0x0800c279
 800c2e0:	0800c279 	.word	0x0800c279
 800c2e4:	0800c3f3 	.word	0x0800c3f3
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	1d1a      	adds	r2, r3, #4
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	602a      	str	r2, [r5, #0]
 800c2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e0a3      	b.n	800c444 <_printf_i+0x1f4>
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	6829      	ldr	r1, [r5, #0]
 800c300:	0606      	lsls	r6, r0, #24
 800c302:	f101 0304 	add.w	r3, r1, #4
 800c306:	d50a      	bpl.n	800c31e <_printf_i+0xce>
 800c308:	680e      	ldr	r6, [r1, #0]
 800c30a:	602b      	str	r3, [r5, #0]
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	da03      	bge.n	800c318 <_printf_i+0xc8>
 800c310:	232d      	movs	r3, #45	; 0x2d
 800c312:	4276      	negs	r6, r6
 800c314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c318:	485e      	ldr	r0, [pc, #376]	; (800c494 <_printf_i+0x244>)
 800c31a:	230a      	movs	r3, #10
 800c31c:	e019      	b.n	800c352 <_printf_i+0x102>
 800c31e:	680e      	ldr	r6, [r1, #0]
 800c320:	602b      	str	r3, [r5, #0]
 800c322:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c326:	bf18      	it	ne
 800c328:	b236      	sxthne	r6, r6
 800c32a:	e7ef      	b.n	800c30c <_printf_i+0xbc>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	6820      	ldr	r0, [r4, #0]
 800c330:	1d19      	adds	r1, r3, #4
 800c332:	6029      	str	r1, [r5, #0]
 800c334:	0601      	lsls	r1, r0, #24
 800c336:	d501      	bpl.n	800c33c <_printf_i+0xec>
 800c338:	681e      	ldr	r6, [r3, #0]
 800c33a:	e002      	b.n	800c342 <_printf_i+0xf2>
 800c33c:	0646      	lsls	r6, r0, #25
 800c33e:	d5fb      	bpl.n	800c338 <_printf_i+0xe8>
 800c340:	881e      	ldrh	r6, [r3, #0]
 800c342:	4854      	ldr	r0, [pc, #336]	; (800c494 <_printf_i+0x244>)
 800c344:	2f6f      	cmp	r7, #111	; 0x6f
 800c346:	bf0c      	ite	eq
 800c348:	2308      	moveq	r3, #8
 800c34a:	230a      	movne	r3, #10
 800c34c:	2100      	movs	r1, #0
 800c34e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c352:	6865      	ldr	r5, [r4, #4]
 800c354:	60a5      	str	r5, [r4, #8]
 800c356:	2d00      	cmp	r5, #0
 800c358:	bfa2      	ittt	ge
 800c35a:	6821      	ldrge	r1, [r4, #0]
 800c35c:	f021 0104 	bicge.w	r1, r1, #4
 800c360:	6021      	strge	r1, [r4, #0]
 800c362:	b90e      	cbnz	r6, 800c368 <_printf_i+0x118>
 800c364:	2d00      	cmp	r5, #0
 800c366:	d04d      	beq.n	800c404 <_printf_i+0x1b4>
 800c368:	4615      	mov	r5, r2
 800c36a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c36e:	fb03 6711 	mls	r7, r3, r1, r6
 800c372:	5dc7      	ldrb	r7, [r0, r7]
 800c374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c378:	4637      	mov	r7, r6
 800c37a:	42bb      	cmp	r3, r7
 800c37c:	460e      	mov	r6, r1
 800c37e:	d9f4      	bls.n	800c36a <_printf_i+0x11a>
 800c380:	2b08      	cmp	r3, #8
 800c382:	d10b      	bne.n	800c39c <_printf_i+0x14c>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	07de      	lsls	r6, r3, #31
 800c388:	d508      	bpl.n	800c39c <_printf_i+0x14c>
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	6861      	ldr	r1, [r4, #4]
 800c38e:	4299      	cmp	r1, r3
 800c390:	bfde      	ittt	le
 800c392:	2330      	movle	r3, #48	; 0x30
 800c394:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c398:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c39c:	1b52      	subs	r2, r2, r5
 800c39e:	6122      	str	r2, [r4, #16]
 800c3a0:	f8cd a000 	str.w	sl, [sp]
 800c3a4:	464b      	mov	r3, r9
 800c3a6:	aa03      	add	r2, sp, #12
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	f7ff fee2 	bl	800c174 <_printf_common>
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d14c      	bne.n	800c44e <_printf_i+0x1fe>
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	b004      	add	sp, #16
 800c3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3be:	4835      	ldr	r0, [pc, #212]	; (800c494 <_printf_i+0x244>)
 800c3c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c3c4:	6829      	ldr	r1, [r5, #0]
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3cc:	6029      	str	r1, [r5, #0]
 800c3ce:	061d      	lsls	r5, r3, #24
 800c3d0:	d514      	bpl.n	800c3fc <_printf_i+0x1ac>
 800c3d2:	07df      	lsls	r7, r3, #31
 800c3d4:	bf44      	itt	mi
 800c3d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c3da:	6023      	strmi	r3, [r4, #0]
 800c3dc:	b91e      	cbnz	r6, 800c3e6 <_printf_i+0x196>
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	f023 0320 	bic.w	r3, r3, #32
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	2310      	movs	r3, #16
 800c3e8:	e7b0      	b.n	800c34c <_printf_i+0xfc>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	f043 0320 	orr.w	r3, r3, #32
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	2378      	movs	r3, #120	; 0x78
 800c3f4:	4828      	ldr	r0, [pc, #160]	; (800c498 <_printf_i+0x248>)
 800c3f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c3fa:	e7e3      	b.n	800c3c4 <_printf_i+0x174>
 800c3fc:	0659      	lsls	r1, r3, #25
 800c3fe:	bf48      	it	mi
 800c400:	b2b6      	uxthmi	r6, r6
 800c402:	e7e6      	b.n	800c3d2 <_printf_i+0x182>
 800c404:	4615      	mov	r5, r2
 800c406:	e7bb      	b.n	800c380 <_printf_i+0x130>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	6826      	ldr	r6, [r4, #0]
 800c40c:	6961      	ldr	r1, [r4, #20]
 800c40e:	1d18      	adds	r0, r3, #4
 800c410:	6028      	str	r0, [r5, #0]
 800c412:	0635      	lsls	r5, r6, #24
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	d501      	bpl.n	800c41c <_printf_i+0x1cc>
 800c418:	6019      	str	r1, [r3, #0]
 800c41a:	e002      	b.n	800c422 <_printf_i+0x1d2>
 800c41c:	0670      	lsls	r0, r6, #25
 800c41e:	d5fb      	bpl.n	800c418 <_printf_i+0x1c8>
 800c420:	8019      	strh	r1, [r3, #0]
 800c422:	2300      	movs	r3, #0
 800c424:	6123      	str	r3, [r4, #16]
 800c426:	4615      	mov	r5, r2
 800c428:	e7ba      	b.n	800c3a0 <_printf_i+0x150>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	1d1a      	adds	r2, r3, #4
 800c42e:	602a      	str	r2, [r5, #0]
 800c430:	681d      	ldr	r5, [r3, #0]
 800c432:	6862      	ldr	r2, [r4, #4]
 800c434:	2100      	movs	r1, #0
 800c436:	4628      	mov	r0, r5
 800c438:	f7f3 fed2 	bl	80001e0 <memchr>
 800c43c:	b108      	cbz	r0, 800c442 <_printf_i+0x1f2>
 800c43e:	1b40      	subs	r0, r0, r5
 800c440:	6060      	str	r0, [r4, #4]
 800c442:	6863      	ldr	r3, [r4, #4]
 800c444:	6123      	str	r3, [r4, #16]
 800c446:	2300      	movs	r3, #0
 800c448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c44c:	e7a8      	b.n	800c3a0 <_printf_i+0x150>
 800c44e:	6923      	ldr	r3, [r4, #16]
 800c450:	462a      	mov	r2, r5
 800c452:	4649      	mov	r1, r9
 800c454:	4640      	mov	r0, r8
 800c456:	47d0      	blx	sl
 800c458:	3001      	adds	r0, #1
 800c45a:	d0ab      	beq.n	800c3b4 <_printf_i+0x164>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	079b      	lsls	r3, r3, #30
 800c460:	d413      	bmi.n	800c48a <_printf_i+0x23a>
 800c462:	68e0      	ldr	r0, [r4, #12]
 800c464:	9b03      	ldr	r3, [sp, #12]
 800c466:	4298      	cmp	r0, r3
 800c468:	bfb8      	it	lt
 800c46a:	4618      	movlt	r0, r3
 800c46c:	e7a4      	b.n	800c3b8 <_printf_i+0x168>
 800c46e:	2301      	movs	r3, #1
 800c470:	4632      	mov	r2, r6
 800c472:	4649      	mov	r1, r9
 800c474:	4640      	mov	r0, r8
 800c476:	47d0      	blx	sl
 800c478:	3001      	adds	r0, #1
 800c47a:	d09b      	beq.n	800c3b4 <_printf_i+0x164>
 800c47c:	3501      	adds	r5, #1
 800c47e:	68e3      	ldr	r3, [r4, #12]
 800c480:	9903      	ldr	r1, [sp, #12]
 800c482:	1a5b      	subs	r3, r3, r1
 800c484:	42ab      	cmp	r3, r5
 800c486:	dcf2      	bgt.n	800c46e <_printf_i+0x21e>
 800c488:	e7eb      	b.n	800c462 <_printf_i+0x212>
 800c48a:	2500      	movs	r5, #0
 800c48c:	f104 0619 	add.w	r6, r4, #25
 800c490:	e7f5      	b.n	800c47e <_printf_i+0x22e>
 800c492:	bf00      	nop
 800c494:	080a8a86 	.word	0x080a8a86
 800c498:	080a8a97 	.word	0x080a8a97

0800c49c <srand>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <srand+0x44>)
 800c4a0:	681d      	ldr	r5, [r3, #0]
 800c4a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	b9b3      	cbnz	r3, 800c4d6 <srand+0x3a>
 800c4a8:	2018      	movs	r0, #24
 800c4aa:	f7fa ff47 	bl	800733c <__wrap_malloc>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	63a8      	str	r0, [r5, #56]	; 0x38
 800c4b2:	b920      	cbnz	r0, 800c4be <srand+0x22>
 800c4b4:	4b0b      	ldr	r3, [pc, #44]	; (800c4e4 <srand+0x48>)
 800c4b6:	480c      	ldr	r0, [pc, #48]	; (800c4e8 <srand+0x4c>)
 800c4b8:	2142      	movs	r1, #66	; 0x42
 800c4ba:	f000 f897 	bl	800c5ec <__assert_func>
 800c4be:	490b      	ldr	r1, [pc, #44]	; (800c4ec <srand+0x50>)
 800c4c0:	4b0b      	ldr	r3, [pc, #44]	; (800c4f0 <srand+0x54>)
 800c4c2:	e9c0 1300 	strd	r1, r3, [r0]
 800c4c6:	4b0b      	ldr	r3, [pc, #44]	; (800c4f4 <srand+0x58>)
 800c4c8:	6083      	str	r3, [r0, #8]
 800c4ca:	230b      	movs	r3, #11
 800c4cc:	8183      	strh	r3, [r0, #12]
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c4d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c4d8:	2200      	movs	r2, #0
 800c4da:	611c      	str	r4, [r3, #16]
 800c4dc:	615a      	str	r2, [r3, #20]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	20000774 	.word	0x20000774
 800c4e4:	080a8aa8 	.word	0x080a8aa8
 800c4e8:	080a8abf 	.word	0x080a8abf
 800c4ec:	abcd330e 	.word	0xabcd330e
 800c4f0:	e66d1234 	.word	0xe66d1234
 800c4f4:	0005deec 	.word	0x0005deec

0800c4f8 <_sbrk_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d06      	ldr	r5, [pc, #24]	; (800c514 <_sbrk_r+0x1c>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	602b      	str	r3, [r5, #0]
 800c504:	f7f5 fa56 	bl	80019b4 <_sbrk>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_sbrk_r+0x1a>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_sbrk_r+0x1a>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	2000249c 	.word	0x2000249c

0800c518 <__sread>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	460c      	mov	r4, r1
 800c51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c520:	f001 fc34 	bl	800dd8c <_read_r>
 800c524:	2800      	cmp	r0, #0
 800c526:	bfab      	itete	ge
 800c528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c52a:	89a3      	ldrhlt	r3, [r4, #12]
 800c52c:	181b      	addge	r3, r3, r0
 800c52e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c532:	bfac      	ite	ge
 800c534:	6563      	strge	r3, [r4, #84]	; 0x54
 800c536:	81a3      	strhlt	r3, [r4, #12]
 800c538:	bd10      	pop	{r4, pc}

0800c53a <__swrite>:
 800c53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53e:	461f      	mov	r7, r3
 800c540:	898b      	ldrh	r3, [r1, #12]
 800c542:	05db      	lsls	r3, r3, #23
 800c544:	4605      	mov	r5, r0
 800c546:	460c      	mov	r4, r1
 800c548:	4616      	mov	r6, r2
 800c54a:	d505      	bpl.n	800c558 <__swrite+0x1e>
 800c54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c550:	2302      	movs	r3, #2
 800c552:	2200      	movs	r2, #0
 800c554:	f000 ff08 	bl	800d368 <_lseek_r>
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c55e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	4632      	mov	r2, r6
 800c566:	463b      	mov	r3, r7
 800c568:	4628      	mov	r0, r5
 800c56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c56e:	f000 b82b 	b.w	800c5c8 <_write_r>

0800c572 <__sseek>:
 800c572:	b510      	push	{r4, lr}
 800c574:	460c      	mov	r4, r1
 800c576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c57a:	f000 fef5 	bl	800d368 <_lseek_r>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	bf15      	itete	ne
 800c584:	6560      	strne	r0, [r4, #84]	; 0x54
 800c586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c58a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c58e:	81a3      	strheq	r3, [r4, #12]
 800c590:	bf18      	it	ne
 800c592:	81a3      	strhne	r3, [r4, #12]
 800c594:	bd10      	pop	{r4, pc}

0800c596 <__sclose>:
 800c596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59a:	f000 b845 	b.w	800c628 <_close_r>

0800c59e <strncmp>:
 800c59e:	b510      	push	{r4, lr}
 800c5a0:	b17a      	cbz	r2, 800c5c2 <strncmp+0x24>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	3901      	subs	r1, #1
 800c5a6:	1884      	adds	r4, r0, r2
 800c5a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c5b0:	4290      	cmp	r0, r2
 800c5b2:	d101      	bne.n	800c5b8 <strncmp+0x1a>
 800c5b4:	42a3      	cmp	r3, r4
 800c5b6:	d101      	bne.n	800c5bc <strncmp+0x1e>
 800c5b8:	1a80      	subs	r0, r0, r2
 800c5ba:	bd10      	pop	{r4, pc}
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d1f3      	bne.n	800c5a8 <strncmp+0xa>
 800c5c0:	e7fa      	b.n	800c5b8 <strncmp+0x1a>
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	e7f9      	b.n	800c5ba <strncmp+0x1c>
	...

0800c5c8 <_write_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d07      	ldr	r5, [pc, #28]	; (800c5e8 <_write_r+0x20>)
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	602a      	str	r2, [r5, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f7fa fe7e 	bl	80072d8 <_write>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d102      	bne.n	800c5e6 <_write_r+0x1e>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	b103      	cbz	r3, 800c5e6 <_write_r+0x1e>
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	2000249c 	.word	0x2000249c

0800c5ec <__assert_func>:
 800c5ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5ee:	4614      	mov	r4, r2
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	4b09      	ldr	r3, [pc, #36]	; (800c618 <__assert_func+0x2c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	68d8      	ldr	r0, [r3, #12]
 800c5fa:	b14c      	cbz	r4, 800c610 <__assert_func+0x24>
 800c5fc:	4b07      	ldr	r3, [pc, #28]	; (800c61c <__assert_func+0x30>)
 800c5fe:	9100      	str	r1, [sp, #0]
 800c600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c604:	4906      	ldr	r1, [pc, #24]	; (800c620 <__assert_func+0x34>)
 800c606:	462b      	mov	r3, r5
 800c608:	f000 fe98 	bl	800d33c <fiprintf>
 800c60c:	f001 fc90 	bl	800df30 <abort>
 800c610:	4b04      	ldr	r3, [pc, #16]	; (800c624 <__assert_func+0x38>)
 800c612:	461c      	mov	r4, r3
 800c614:	e7f3      	b.n	800c5fe <__assert_func+0x12>
 800c616:	bf00      	nop
 800c618:	20000774 	.word	0x20000774
 800c61c:	080a8b1a 	.word	0x080a8b1a
 800c620:	080a8b27 	.word	0x080a8b27
 800c624:	080a8b55 	.word	0x080a8b55

0800c628 <_close_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4d06      	ldr	r5, [pc, #24]	; (800c644 <_close_r+0x1c>)
 800c62c:	2300      	movs	r3, #0
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	602b      	str	r3, [r5, #0]
 800c634:	f002 fa46 	bl	800eac4 <_close>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_close_r+0x1a>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_close_r+0x1a>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	2000249c 	.word	0x2000249c

0800c648 <quorem>:
 800c648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	6903      	ldr	r3, [r0, #16]
 800c64e:	690c      	ldr	r4, [r1, #16]
 800c650:	42a3      	cmp	r3, r4
 800c652:	4607      	mov	r7, r0
 800c654:	f2c0 8081 	blt.w	800c75a <quorem+0x112>
 800c658:	3c01      	subs	r4, #1
 800c65a:	f101 0814 	add.w	r8, r1, #20
 800c65e:	f100 0514 	add.w	r5, r0, #20
 800c662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c666:	9301      	str	r3, [sp, #4]
 800c668:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c66c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c670:	3301      	adds	r3, #1
 800c672:	429a      	cmp	r2, r3
 800c674:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c678:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c67c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c680:	d331      	bcc.n	800c6e6 <quorem+0x9e>
 800c682:	f04f 0e00 	mov.w	lr, #0
 800c686:	4640      	mov	r0, r8
 800c688:	46ac      	mov	ip, r5
 800c68a:	46f2      	mov	sl, lr
 800c68c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c690:	b293      	uxth	r3, r2
 800c692:	fb06 e303 	mla	r3, r6, r3, lr
 800c696:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	ebaa 0303 	sub.w	r3, sl, r3
 800c6a0:	f8dc a000 	ldr.w	sl, [ip]
 800c6a4:	0c12      	lsrs	r2, r2, #16
 800c6a6:	fa13 f38a 	uxtah	r3, r3, sl
 800c6aa:	fb06 e202 	mla	r2, r6, r2, lr
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6b6:	b292      	uxth	r2, r2
 800c6b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c6bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6c4:	4581      	cmp	r9, r0
 800c6c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6ca:	f84c 3b04 	str.w	r3, [ip], #4
 800c6ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6d2:	d2db      	bcs.n	800c68c <quorem+0x44>
 800c6d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6d8:	b92b      	cbnz	r3, 800c6e6 <quorem+0x9e>
 800c6da:	9b01      	ldr	r3, [sp, #4]
 800c6dc:	3b04      	subs	r3, #4
 800c6de:	429d      	cmp	r5, r3
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	d32e      	bcc.n	800c742 <quorem+0xfa>
 800c6e4:	613c      	str	r4, [r7, #16]
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	f001 f8de 	bl	800d8a8 <__mcmp>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	db24      	blt.n	800c73a <quorem+0xf2>
 800c6f0:	3601      	adds	r6, #1
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f04f 0c00 	mov.w	ip, #0
 800c6f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6fc:	f8d0 e000 	ldr.w	lr, [r0]
 800c700:	b293      	uxth	r3, r2
 800c702:	ebac 0303 	sub.w	r3, ip, r3
 800c706:	0c12      	lsrs	r2, r2, #16
 800c708:	fa13 f38e 	uxtah	r3, r3, lr
 800c70c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c714:	b29b      	uxth	r3, r3
 800c716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c71a:	45c1      	cmp	r9, r8
 800c71c:	f840 3b04 	str.w	r3, [r0], #4
 800c720:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c724:	d2e8      	bcs.n	800c6f8 <quorem+0xb0>
 800c726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c72a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c72e:	b922      	cbnz	r2, 800c73a <quorem+0xf2>
 800c730:	3b04      	subs	r3, #4
 800c732:	429d      	cmp	r5, r3
 800c734:	461a      	mov	r2, r3
 800c736:	d30a      	bcc.n	800c74e <quorem+0x106>
 800c738:	613c      	str	r4, [r7, #16]
 800c73a:	4630      	mov	r0, r6
 800c73c:	b003      	add	sp, #12
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	6812      	ldr	r2, [r2, #0]
 800c744:	3b04      	subs	r3, #4
 800c746:	2a00      	cmp	r2, #0
 800c748:	d1cc      	bne.n	800c6e4 <quorem+0x9c>
 800c74a:	3c01      	subs	r4, #1
 800c74c:	e7c7      	b.n	800c6de <quorem+0x96>
 800c74e:	6812      	ldr	r2, [r2, #0]
 800c750:	3b04      	subs	r3, #4
 800c752:	2a00      	cmp	r2, #0
 800c754:	d1f0      	bne.n	800c738 <quorem+0xf0>
 800c756:	3c01      	subs	r4, #1
 800c758:	e7eb      	b.n	800c732 <quorem+0xea>
 800c75a:	2000      	movs	r0, #0
 800c75c:	e7ee      	b.n	800c73c <quorem+0xf4>
	...

0800c760 <_dtoa_r>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	ed2d 8b04 	vpush	{d8-d9}
 800c768:	ec57 6b10 	vmov	r6, r7, d0
 800c76c:	b093      	sub	sp, #76	; 0x4c
 800c76e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c774:	9106      	str	r1, [sp, #24]
 800c776:	ee10 aa10 	vmov	sl, s0
 800c77a:	4604      	mov	r4, r0
 800c77c:	9209      	str	r2, [sp, #36]	; 0x24
 800c77e:	930c      	str	r3, [sp, #48]	; 0x30
 800c780:	46bb      	mov	fp, r7
 800c782:	b975      	cbnz	r5, 800c7a2 <_dtoa_r+0x42>
 800c784:	2010      	movs	r0, #16
 800c786:	f7fa fdd9 	bl	800733c <__wrap_malloc>
 800c78a:	4602      	mov	r2, r0
 800c78c:	6260      	str	r0, [r4, #36]	; 0x24
 800c78e:	b920      	cbnz	r0, 800c79a <_dtoa_r+0x3a>
 800c790:	4ba7      	ldr	r3, [pc, #668]	; (800ca30 <_dtoa_r+0x2d0>)
 800c792:	21ea      	movs	r1, #234	; 0xea
 800c794:	48a7      	ldr	r0, [pc, #668]	; (800ca34 <_dtoa_r+0x2d4>)
 800c796:	f7ff ff29 	bl	800c5ec <__assert_func>
 800c79a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c79e:	6005      	str	r5, [r0, #0]
 800c7a0:	60c5      	str	r5, [r0, #12]
 800c7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a4:	6819      	ldr	r1, [r3, #0]
 800c7a6:	b151      	cbz	r1, 800c7be <_dtoa_r+0x5e>
 800c7a8:	685a      	ldr	r2, [r3, #4]
 800c7aa:	604a      	str	r2, [r1, #4]
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4093      	lsls	r3, r2
 800c7b0:	608b      	str	r3, [r1, #8]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f000 fe36 	bl	800d424 <_Bfree>
 800c7b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	1e3b      	subs	r3, r7, #0
 800c7c0:	bfaa      	itet	ge
 800c7c2:	2300      	movge	r3, #0
 800c7c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c7c8:	f8c8 3000 	strge.w	r3, [r8]
 800c7cc:	4b9a      	ldr	r3, [pc, #616]	; (800ca38 <_dtoa_r+0x2d8>)
 800c7ce:	bfbc      	itt	lt
 800c7d0:	2201      	movlt	r2, #1
 800c7d2:	f8c8 2000 	strlt.w	r2, [r8]
 800c7d6:	ea33 030b 	bics.w	r3, r3, fp
 800c7da:	d11b      	bne.n	800c814 <_dtoa_r+0xb4>
 800c7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7de:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7e8:	4333      	orrs	r3, r6
 800c7ea:	f000 8592 	beq.w	800d312 <_dtoa_r+0xbb2>
 800c7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7f0:	b963      	cbnz	r3, 800c80c <_dtoa_r+0xac>
 800c7f2:	4b92      	ldr	r3, [pc, #584]	; (800ca3c <_dtoa_r+0x2dc>)
 800c7f4:	e022      	b.n	800c83c <_dtoa_r+0xdc>
 800c7f6:	4b92      	ldr	r3, [pc, #584]	; (800ca40 <_dtoa_r+0x2e0>)
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	3308      	adds	r3, #8
 800c7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	9801      	ldr	r0, [sp, #4]
 800c802:	b013      	add	sp, #76	; 0x4c
 800c804:	ecbd 8b04 	vpop	{d8-d9}
 800c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80c:	4b8b      	ldr	r3, [pc, #556]	; (800ca3c <_dtoa_r+0x2dc>)
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	3303      	adds	r3, #3
 800c812:	e7f3      	b.n	800c7fc <_dtoa_r+0x9c>
 800c814:	2200      	movs	r2, #0
 800c816:	2300      	movs	r3, #0
 800c818:	4650      	mov	r0, sl
 800c81a:	4659      	mov	r1, fp
 800c81c:	f7f4 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 800c820:	ec4b ab19 	vmov	d9, sl, fp
 800c824:	4680      	mov	r8, r0
 800c826:	b158      	cbz	r0, 800c840 <_dtoa_r+0xe0>
 800c828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c82a:	2301      	movs	r3, #1
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c830:	2b00      	cmp	r3, #0
 800c832:	f000 856b 	beq.w	800d30c <_dtoa_r+0xbac>
 800c836:	4883      	ldr	r0, [pc, #524]	; (800ca44 <_dtoa_r+0x2e4>)
 800c838:	6018      	str	r0, [r3, #0]
 800c83a:	1e43      	subs	r3, r0, #1
 800c83c:	9301      	str	r3, [sp, #4]
 800c83e:	e7df      	b.n	800c800 <_dtoa_r+0xa0>
 800c840:	ec4b ab10 	vmov	d0, sl, fp
 800c844:	aa10      	add	r2, sp, #64	; 0x40
 800c846:	a911      	add	r1, sp, #68	; 0x44
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 f8d3 	bl	800d9f4 <__d2b>
 800c84e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c852:	ee08 0a10 	vmov	s16, r0
 800c856:	2d00      	cmp	r5, #0
 800c858:	f000 8084 	beq.w	800c964 <_dtoa_r+0x204>
 800c85c:	ee19 3a90 	vmov	r3, s19
 800c860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c864:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c868:	4656      	mov	r6, sl
 800c86a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c872:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c876:	4b74      	ldr	r3, [pc, #464]	; (800ca48 <_dtoa_r+0x2e8>)
 800c878:	2200      	movs	r2, #0
 800c87a:	4630      	mov	r0, r6
 800c87c:	4639      	mov	r1, r7
 800c87e:	f7f3 fd03 	bl	8000288 <__aeabi_dsub>
 800c882:	a365      	add	r3, pc, #404	; (adr r3, 800ca18 <_dtoa_r+0x2b8>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 feb6 	bl	80005f8 <__aeabi_dmul>
 800c88c:	a364      	add	r3, pc, #400	; (adr r3, 800ca20 <_dtoa_r+0x2c0>)
 800c88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c892:	f7f3 fcfb 	bl	800028c <__adddf3>
 800c896:	4606      	mov	r6, r0
 800c898:	4628      	mov	r0, r5
 800c89a:	460f      	mov	r7, r1
 800c89c:	f7f3 fe42 	bl	8000524 <__aeabi_i2d>
 800c8a0:	a361      	add	r3, pc, #388	; (adr r3, 800ca28 <_dtoa_r+0x2c8>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 fea7 	bl	80005f8 <__aeabi_dmul>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	f7f3 fceb 	bl	800028c <__adddf3>
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460f      	mov	r7, r1
 800c8ba:	f7f4 f94d 	bl	8000b58 <__aeabi_d2iz>
 800c8be:	2200      	movs	r2, #0
 800c8c0:	9000      	str	r0, [sp, #0]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	f7f4 f908 	bl	8000adc <__aeabi_dcmplt>
 800c8cc:	b150      	cbz	r0, 800c8e4 <_dtoa_r+0x184>
 800c8ce:	9800      	ldr	r0, [sp, #0]
 800c8d0:	f7f3 fe28 	bl	8000524 <__aeabi_i2d>
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	463b      	mov	r3, r7
 800c8d8:	f7f4 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8dc:	b910      	cbnz	r0, 800c8e4 <_dtoa_r+0x184>
 800c8de:	9b00      	ldr	r3, [sp, #0]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	9b00      	ldr	r3, [sp, #0]
 800c8e6:	2b16      	cmp	r3, #22
 800c8e8:	d85a      	bhi.n	800c9a0 <_dtoa_r+0x240>
 800c8ea:	9a00      	ldr	r2, [sp, #0]
 800c8ec:	4b57      	ldr	r3, [pc, #348]	; (800ca4c <_dtoa_r+0x2ec>)
 800c8ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	ec51 0b19 	vmov	r0, r1, d9
 800c8fa:	f7f4 f8ef 	bl	8000adc <__aeabi_dcmplt>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d050      	beq.n	800c9a4 <_dtoa_r+0x244>
 800c902:	9b00      	ldr	r3, [sp, #0]
 800c904:	3b01      	subs	r3, #1
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	2300      	movs	r3, #0
 800c90a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c90e:	1b5d      	subs	r5, r3, r5
 800c910:	1e6b      	subs	r3, r5, #1
 800c912:	9305      	str	r3, [sp, #20]
 800c914:	bf45      	ittet	mi
 800c916:	f1c5 0301 	rsbmi	r3, r5, #1
 800c91a:	9304      	strmi	r3, [sp, #16]
 800c91c:	2300      	movpl	r3, #0
 800c91e:	2300      	movmi	r3, #0
 800c920:	bf4c      	ite	mi
 800c922:	9305      	strmi	r3, [sp, #20]
 800c924:	9304      	strpl	r3, [sp, #16]
 800c926:	9b00      	ldr	r3, [sp, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	db3d      	blt.n	800c9a8 <_dtoa_r+0x248>
 800c92c:	9b05      	ldr	r3, [sp, #20]
 800c92e:	9a00      	ldr	r2, [sp, #0]
 800c930:	920a      	str	r2, [sp, #40]	; 0x28
 800c932:	4413      	add	r3, r2
 800c934:	9305      	str	r3, [sp, #20]
 800c936:	2300      	movs	r3, #0
 800c938:	9307      	str	r3, [sp, #28]
 800c93a:	9b06      	ldr	r3, [sp, #24]
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	f200 8089 	bhi.w	800ca54 <_dtoa_r+0x2f4>
 800c942:	2b05      	cmp	r3, #5
 800c944:	bfc4      	itt	gt
 800c946:	3b04      	subgt	r3, #4
 800c948:	9306      	strgt	r3, [sp, #24]
 800c94a:	9b06      	ldr	r3, [sp, #24]
 800c94c:	f1a3 0302 	sub.w	r3, r3, #2
 800c950:	bfcc      	ite	gt
 800c952:	2500      	movgt	r5, #0
 800c954:	2501      	movle	r5, #1
 800c956:	2b03      	cmp	r3, #3
 800c958:	f200 8087 	bhi.w	800ca6a <_dtoa_r+0x30a>
 800c95c:	e8df f003 	tbb	[pc, r3]
 800c960:	59383a2d 	.word	0x59383a2d
 800c964:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c968:	441d      	add	r5, r3
 800c96a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c96e:	2b20      	cmp	r3, #32
 800c970:	bfc1      	itttt	gt
 800c972:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c976:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c97a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c97e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c982:	bfda      	itte	le
 800c984:	f1c3 0320 	rsble	r3, r3, #32
 800c988:	fa06 f003 	lslle.w	r0, r6, r3
 800c98c:	4318      	orrgt	r0, r3
 800c98e:	f7f3 fdb9 	bl	8000504 <__aeabi_ui2d>
 800c992:	2301      	movs	r3, #1
 800c994:	4606      	mov	r6, r0
 800c996:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c99a:	3d01      	subs	r5, #1
 800c99c:	930e      	str	r3, [sp, #56]	; 0x38
 800c99e:	e76a      	b.n	800c876 <_dtoa_r+0x116>
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e7b2      	b.n	800c90a <_dtoa_r+0x1aa>
 800c9a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c9a6:	e7b1      	b.n	800c90c <_dtoa_r+0x1ac>
 800c9a8:	9b04      	ldr	r3, [sp, #16]
 800c9aa:	9a00      	ldr	r2, [sp, #0]
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	9304      	str	r3, [sp, #16]
 800c9b0:	4253      	negs	r3, r2
 800c9b2:	9307      	str	r3, [sp, #28]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b8:	e7bf      	b.n	800c93a <_dtoa_r+0x1da>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	9308      	str	r3, [sp, #32]
 800c9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	dc55      	bgt.n	800ca70 <_dtoa_r+0x310>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c9ce:	e00c      	b.n	800c9ea <_dtoa_r+0x28a>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e7f3      	b.n	800c9bc <_dtoa_r+0x25c>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d8:	9308      	str	r3, [sp, #32]
 800c9da:	9b00      	ldr	r3, [sp, #0]
 800c9dc:	4413      	add	r3, r2
 800c9de:	9302      	str	r3, [sp, #8]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	9303      	str	r3, [sp, #12]
 800c9e6:	bfb8      	it	lt
 800c9e8:	2301      	movlt	r3, #1
 800c9ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	6042      	str	r2, [r0, #4]
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	f102 0614 	add.w	r6, r2, #20
 800c9f6:	429e      	cmp	r6, r3
 800c9f8:	6841      	ldr	r1, [r0, #4]
 800c9fa:	d93d      	bls.n	800ca78 <_dtoa_r+0x318>
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f000 fcd1 	bl	800d3a4 <_Balloc>
 800ca02:	9001      	str	r0, [sp, #4]
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d13b      	bne.n	800ca80 <_dtoa_r+0x320>
 800ca08:	4b11      	ldr	r3, [pc, #68]	; (800ca50 <_dtoa_r+0x2f0>)
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca10:	e6c0      	b.n	800c794 <_dtoa_r+0x34>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e7df      	b.n	800c9d6 <_dtoa_r+0x276>
 800ca16:	bf00      	nop
 800ca18:	636f4361 	.word	0x636f4361
 800ca1c:	3fd287a7 	.word	0x3fd287a7
 800ca20:	8b60c8b3 	.word	0x8b60c8b3
 800ca24:	3fc68a28 	.word	0x3fc68a28
 800ca28:	509f79fb 	.word	0x509f79fb
 800ca2c:	3fd34413 	.word	0x3fd34413
 800ca30:	080a8aa8 	.word	0x080a8aa8
 800ca34:	080a8b63 	.word	0x080a8b63
 800ca38:	7ff00000 	.word	0x7ff00000
 800ca3c:	080a8b5f 	.word	0x080a8b5f
 800ca40:	080a8b56 	.word	0x080a8b56
 800ca44:	080a8a85 	.word	0x080a8a85
 800ca48:	3ff80000 	.word	0x3ff80000
 800ca4c:	080a8c58 	.word	0x080a8c58
 800ca50:	080a8bbe 	.word	0x080a8bbe
 800ca54:	2501      	movs	r5, #1
 800ca56:	2300      	movs	r3, #0
 800ca58:	9306      	str	r3, [sp, #24]
 800ca5a:	9508      	str	r5, [sp, #32]
 800ca5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca64:	2200      	movs	r2, #0
 800ca66:	2312      	movs	r3, #18
 800ca68:	e7b0      	b.n	800c9cc <_dtoa_r+0x26c>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	9308      	str	r3, [sp, #32]
 800ca6e:	e7f5      	b.n	800ca5c <_dtoa_r+0x2fc>
 800ca70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca76:	e7b8      	b.n	800c9ea <_dtoa_r+0x28a>
 800ca78:	3101      	adds	r1, #1
 800ca7a:	6041      	str	r1, [r0, #4]
 800ca7c:	0052      	lsls	r2, r2, #1
 800ca7e:	e7b8      	b.n	800c9f2 <_dtoa_r+0x292>
 800ca80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca82:	9a01      	ldr	r2, [sp, #4]
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	9b03      	ldr	r3, [sp, #12]
 800ca88:	2b0e      	cmp	r3, #14
 800ca8a:	f200 809d 	bhi.w	800cbc8 <_dtoa_r+0x468>
 800ca8e:	2d00      	cmp	r5, #0
 800ca90:	f000 809a 	beq.w	800cbc8 <_dtoa_r+0x468>
 800ca94:	9b00      	ldr	r3, [sp, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	dd32      	ble.n	800cb00 <_dtoa_r+0x3a0>
 800ca9a:	4ab7      	ldr	r2, [pc, #732]	; (800cd78 <_dtoa_r+0x618>)
 800ca9c:	f003 030f 	and.w	r3, r3, #15
 800caa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800caa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800caa8:	9b00      	ldr	r3, [sp, #0]
 800caaa:	05d8      	lsls	r0, r3, #23
 800caac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cab0:	d516      	bpl.n	800cae0 <_dtoa_r+0x380>
 800cab2:	4bb2      	ldr	r3, [pc, #712]	; (800cd7c <_dtoa_r+0x61c>)
 800cab4:	ec51 0b19 	vmov	r0, r1, d9
 800cab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cabc:	f7f3 fec6 	bl	800084c <__aeabi_ddiv>
 800cac0:	f007 070f 	and.w	r7, r7, #15
 800cac4:	4682      	mov	sl, r0
 800cac6:	468b      	mov	fp, r1
 800cac8:	2503      	movs	r5, #3
 800caca:	4eac      	ldr	r6, [pc, #688]	; (800cd7c <_dtoa_r+0x61c>)
 800cacc:	b957      	cbnz	r7, 800cae4 <_dtoa_r+0x384>
 800cace:	4642      	mov	r2, r8
 800cad0:	464b      	mov	r3, r9
 800cad2:	4650      	mov	r0, sl
 800cad4:	4659      	mov	r1, fp
 800cad6:	f7f3 feb9 	bl	800084c <__aeabi_ddiv>
 800cada:	4682      	mov	sl, r0
 800cadc:	468b      	mov	fp, r1
 800cade:	e028      	b.n	800cb32 <_dtoa_r+0x3d2>
 800cae0:	2502      	movs	r5, #2
 800cae2:	e7f2      	b.n	800caca <_dtoa_r+0x36a>
 800cae4:	07f9      	lsls	r1, r7, #31
 800cae6:	d508      	bpl.n	800cafa <_dtoa_r+0x39a>
 800cae8:	4640      	mov	r0, r8
 800caea:	4649      	mov	r1, r9
 800caec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800caf0:	f7f3 fd82 	bl	80005f8 <__aeabi_dmul>
 800caf4:	3501      	adds	r5, #1
 800caf6:	4680      	mov	r8, r0
 800caf8:	4689      	mov	r9, r1
 800cafa:	107f      	asrs	r7, r7, #1
 800cafc:	3608      	adds	r6, #8
 800cafe:	e7e5      	b.n	800cacc <_dtoa_r+0x36c>
 800cb00:	f000 809b 	beq.w	800cc3a <_dtoa_r+0x4da>
 800cb04:	9b00      	ldr	r3, [sp, #0]
 800cb06:	4f9d      	ldr	r7, [pc, #628]	; (800cd7c <_dtoa_r+0x61c>)
 800cb08:	425e      	negs	r6, r3
 800cb0a:	4b9b      	ldr	r3, [pc, #620]	; (800cd78 <_dtoa_r+0x618>)
 800cb0c:	f006 020f 	and.w	r2, r6, #15
 800cb10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	ec51 0b19 	vmov	r0, r1, d9
 800cb1c:	f7f3 fd6c 	bl	80005f8 <__aeabi_dmul>
 800cb20:	1136      	asrs	r6, r6, #4
 800cb22:	4682      	mov	sl, r0
 800cb24:	468b      	mov	fp, r1
 800cb26:	2300      	movs	r3, #0
 800cb28:	2502      	movs	r5, #2
 800cb2a:	2e00      	cmp	r6, #0
 800cb2c:	d17a      	bne.n	800cc24 <_dtoa_r+0x4c4>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1d3      	bne.n	800cada <_dtoa_r+0x37a>
 800cb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 8082 	beq.w	800cc3e <_dtoa_r+0x4de>
 800cb3a:	4b91      	ldr	r3, [pc, #580]	; (800cd80 <_dtoa_r+0x620>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	4650      	mov	r0, sl
 800cb40:	4659      	mov	r1, fp
 800cb42:	f7f3 ffcb 	bl	8000adc <__aeabi_dcmplt>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d079      	beq.n	800cc3e <_dtoa_r+0x4de>
 800cb4a:	9b03      	ldr	r3, [sp, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d076      	beq.n	800cc3e <_dtoa_r+0x4de>
 800cb50:	9b02      	ldr	r3, [sp, #8]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	dd36      	ble.n	800cbc4 <_dtoa_r+0x464>
 800cb56:	9b00      	ldr	r3, [sp, #0]
 800cb58:	4650      	mov	r0, sl
 800cb5a:	4659      	mov	r1, fp
 800cb5c:	1e5f      	subs	r7, r3, #1
 800cb5e:	2200      	movs	r2, #0
 800cb60:	4b88      	ldr	r3, [pc, #544]	; (800cd84 <_dtoa_r+0x624>)
 800cb62:	f7f3 fd49 	bl	80005f8 <__aeabi_dmul>
 800cb66:	9e02      	ldr	r6, [sp, #8]
 800cb68:	4682      	mov	sl, r0
 800cb6a:	468b      	mov	fp, r1
 800cb6c:	3501      	adds	r5, #1
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f7f3 fcd8 	bl	8000524 <__aeabi_i2d>
 800cb74:	4652      	mov	r2, sl
 800cb76:	465b      	mov	r3, fp
 800cb78:	f7f3 fd3e 	bl	80005f8 <__aeabi_dmul>
 800cb7c:	4b82      	ldr	r3, [pc, #520]	; (800cd88 <_dtoa_r+0x628>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f7f3 fb84 	bl	800028c <__adddf3>
 800cb84:	46d0      	mov	r8, sl
 800cb86:	46d9      	mov	r9, fp
 800cb88:	4682      	mov	sl, r0
 800cb8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cb8e:	2e00      	cmp	r6, #0
 800cb90:	d158      	bne.n	800cc44 <_dtoa_r+0x4e4>
 800cb92:	4b7e      	ldr	r3, [pc, #504]	; (800cd8c <_dtoa_r+0x62c>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	4640      	mov	r0, r8
 800cb98:	4649      	mov	r1, r9
 800cb9a:	f7f3 fb75 	bl	8000288 <__aeabi_dsub>
 800cb9e:	4652      	mov	r2, sl
 800cba0:	465b      	mov	r3, fp
 800cba2:	4680      	mov	r8, r0
 800cba4:	4689      	mov	r9, r1
 800cba6:	f7f3 ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	f040 8295 	bne.w	800d0da <_dtoa_r+0x97a>
 800cbb0:	4652      	mov	r2, sl
 800cbb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	4649      	mov	r1, r9
 800cbba:	f7f3 ff8f 	bl	8000adc <__aeabi_dcmplt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f040 8289 	bne.w	800d0d6 <_dtoa_r+0x976>
 800cbc4:	ec5b ab19 	vmov	sl, fp, d9
 800cbc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f2c0 8148 	blt.w	800ce60 <_dtoa_r+0x700>
 800cbd0:	9a00      	ldr	r2, [sp, #0]
 800cbd2:	2a0e      	cmp	r2, #14
 800cbd4:	f300 8144 	bgt.w	800ce60 <_dtoa_r+0x700>
 800cbd8:	4b67      	ldr	r3, [pc, #412]	; (800cd78 <_dtoa_r+0x618>)
 800cbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f280 80d5 	bge.w	800cd94 <_dtoa_r+0x634>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f300 80d1 	bgt.w	800cd94 <_dtoa_r+0x634>
 800cbf2:	f040 826f 	bne.w	800d0d4 <_dtoa_r+0x974>
 800cbf6:	4b65      	ldr	r3, [pc, #404]	; (800cd8c <_dtoa_r+0x62c>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	f7f3 fcfb 	bl	80005f8 <__aeabi_dmul>
 800cc02:	4652      	mov	r2, sl
 800cc04:	465b      	mov	r3, fp
 800cc06:	f7f3 ff7d 	bl	8000b04 <__aeabi_dcmpge>
 800cc0a:	9e03      	ldr	r6, [sp, #12]
 800cc0c:	4637      	mov	r7, r6
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	f040 8245 	bne.w	800d09e <_dtoa_r+0x93e>
 800cc14:	9d01      	ldr	r5, [sp, #4]
 800cc16:	2331      	movs	r3, #49	; 0x31
 800cc18:	f805 3b01 	strb.w	r3, [r5], #1
 800cc1c:	9b00      	ldr	r3, [sp, #0]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	e240      	b.n	800d0a6 <_dtoa_r+0x946>
 800cc24:	07f2      	lsls	r2, r6, #31
 800cc26:	d505      	bpl.n	800cc34 <_dtoa_r+0x4d4>
 800cc28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc2c:	f7f3 fce4 	bl	80005f8 <__aeabi_dmul>
 800cc30:	3501      	adds	r5, #1
 800cc32:	2301      	movs	r3, #1
 800cc34:	1076      	asrs	r6, r6, #1
 800cc36:	3708      	adds	r7, #8
 800cc38:	e777      	b.n	800cb2a <_dtoa_r+0x3ca>
 800cc3a:	2502      	movs	r5, #2
 800cc3c:	e779      	b.n	800cb32 <_dtoa_r+0x3d2>
 800cc3e:	9f00      	ldr	r7, [sp, #0]
 800cc40:	9e03      	ldr	r6, [sp, #12]
 800cc42:	e794      	b.n	800cb6e <_dtoa_r+0x40e>
 800cc44:	9901      	ldr	r1, [sp, #4]
 800cc46:	4b4c      	ldr	r3, [pc, #304]	; (800cd78 <_dtoa_r+0x618>)
 800cc48:	4431      	add	r1, r6
 800cc4a:	910d      	str	r1, [sp, #52]	; 0x34
 800cc4c:	9908      	ldr	r1, [sp, #32]
 800cc4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc56:	2900      	cmp	r1, #0
 800cc58:	d043      	beq.n	800cce2 <_dtoa_r+0x582>
 800cc5a:	494d      	ldr	r1, [pc, #308]	; (800cd90 <_dtoa_r+0x630>)
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	f7f3 fdf5 	bl	800084c <__aeabi_ddiv>
 800cc62:	4652      	mov	r2, sl
 800cc64:	465b      	mov	r3, fp
 800cc66:	f7f3 fb0f 	bl	8000288 <__aeabi_dsub>
 800cc6a:	9d01      	ldr	r5, [sp, #4]
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	468b      	mov	fp, r1
 800cc70:	4649      	mov	r1, r9
 800cc72:	4640      	mov	r0, r8
 800cc74:	f7f3 ff70 	bl	8000b58 <__aeabi_d2iz>
 800cc78:	4606      	mov	r6, r0
 800cc7a:	f7f3 fc53 	bl	8000524 <__aeabi_i2d>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	4640      	mov	r0, r8
 800cc84:	4649      	mov	r1, r9
 800cc86:	f7f3 faff 	bl	8000288 <__aeabi_dsub>
 800cc8a:	3630      	adds	r6, #48	; 0x30
 800cc8c:	f805 6b01 	strb.w	r6, [r5], #1
 800cc90:	4652      	mov	r2, sl
 800cc92:	465b      	mov	r3, fp
 800cc94:	4680      	mov	r8, r0
 800cc96:	4689      	mov	r9, r1
 800cc98:	f7f3 ff20 	bl	8000adc <__aeabi_dcmplt>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d163      	bne.n	800cd68 <_dtoa_r+0x608>
 800cca0:	4642      	mov	r2, r8
 800cca2:	464b      	mov	r3, r9
 800cca4:	4936      	ldr	r1, [pc, #216]	; (800cd80 <_dtoa_r+0x620>)
 800cca6:	2000      	movs	r0, #0
 800cca8:	f7f3 faee 	bl	8000288 <__aeabi_dsub>
 800ccac:	4652      	mov	r2, sl
 800ccae:	465b      	mov	r3, fp
 800ccb0:	f7f3 ff14 	bl	8000adc <__aeabi_dcmplt>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	f040 80b5 	bne.w	800ce24 <_dtoa_r+0x6c4>
 800ccba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccbc:	429d      	cmp	r5, r3
 800ccbe:	d081      	beq.n	800cbc4 <_dtoa_r+0x464>
 800ccc0:	4b30      	ldr	r3, [pc, #192]	; (800cd84 <_dtoa_r+0x624>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	4650      	mov	r0, sl
 800ccc6:	4659      	mov	r1, fp
 800ccc8:	f7f3 fc96 	bl	80005f8 <__aeabi_dmul>
 800cccc:	4b2d      	ldr	r3, [pc, #180]	; (800cd84 <_dtoa_r+0x624>)
 800ccce:	4682      	mov	sl, r0
 800ccd0:	468b      	mov	fp, r1
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f7f3 fc8e 	bl	80005f8 <__aeabi_dmul>
 800ccdc:	4680      	mov	r8, r0
 800ccde:	4689      	mov	r9, r1
 800cce0:	e7c6      	b.n	800cc70 <_dtoa_r+0x510>
 800cce2:	4650      	mov	r0, sl
 800cce4:	4659      	mov	r1, fp
 800cce6:	f7f3 fc87 	bl	80005f8 <__aeabi_dmul>
 800ccea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccec:	9d01      	ldr	r5, [sp, #4]
 800ccee:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	468b      	mov	fp, r1
 800ccf4:	4649      	mov	r1, r9
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	f7f3 ff2e 	bl	8000b58 <__aeabi_d2iz>
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	f7f3 fc11 	bl	8000524 <__aeabi_i2d>
 800cd02:	3630      	adds	r6, #48	; 0x30
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	4640      	mov	r0, r8
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	f7f3 fabc 	bl	8000288 <__aeabi_dsub>
 800cd10:	f805 6b01 	strb.w	r6, [r5], #1
 800cd14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd16:	429d      	cmp	r5, r3
 800cd18:	4680      	mov	r8, r0
 800cd1a:	4689      	mov	r9, r1
 800cd1c:	f04f 0200 	mov.w	r2, #0
 800cd20:	d124      	bne.n	800cd6c <_dtoa_r+0x60c>
 800cd22:	4b1b      	ldr	r3, [pc, #108]	; (800cd90 <_dtoa_r+0x630>)
 800cd24:	4650      	mov	r0, sl
 800cd26:	4659      	mov	r1, fp
 800cd28:	f7f3 fab0 	bl	800028c <__adddf3>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	4640      	mov	r0, r8
 800cd32:	4649      	mov	r1, r9
 800cd34:	f7f3 fef0 	bl	8000b18 <__aeabi_dcmpgt>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d173      	bne.n	800ce24 <_dtoa_r+0x6c4>
 800cd3c:	4652      	mov	r2, sl
 800cd3e:	465b      	mov	r3, fp
 800cd40:	4913      	ldr	r1, [pc, #76]	; (800cd90 <_dtoa_r+0x630>)
 800cd42:	2000      	movs	r0, #0
 800cd44:	f7f3 faa0 	bl	8000288 <__aeabi_dsub>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	4649      	mov	r1, r9
 800cd50:	f7f3 fec4 	bl	8000adc <__aeabi_dcmplt>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	f43f af35 	beq.w	800cbc4 <_dtoa_r+0x464>
 800cd5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd5c:	1e6b      	subs	r3, r5, #1
 800cd5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd64:	2b30      	cmp	r3, #48	; 0x30
 800cd66:	d0f8      	beq.n	800cd5a <_dtoa_r+0x5fa>
 800cd68:	9700      	str	r7, [sp, #0]
 800cd6a:	e049      	b.n	800ce00 <_dtoa_r+0x6a0>
 800cd6c:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <_dtoa_r+0x624>)
 800cd6e:	f7f3 fc43 	bl	80005f8 <__aeabi_dmul>
 800cd72:	4680      	mov	r8, r0
 800cd74:	4689      	mov	r9, r1
 800cd76:	e7bd      	b.n	800ccf4 <_dtoa_r+0x594>
 800cd78:	080a8c58 	.word	0x080a8c58
 800cd7c:	080a8c30 	.word	0x080a8c30
 800cd80:	3ff00000 	.word	0x3ff00000
 800cd84:	40240000 	.word	0x40240000
 800cd88:	401c0000 	.word	0x401c0000
 800cd8c:	40140000 	.word	0x40140000
 800cd90:	3fe00000 	.word	0x3fe00000
 800cd94:	9d01      	ldr	r5, [sp, #4]
 800cd96:	4656      	mov	r6, sl
 800cd98:	465f      	mov	r7, fp
 800cd9a:	4642      	mov	r2, r8
 800cd9c:	464b      	mov	r3, r9
 800cd9e:	4630      	mov	r0, r6
 800cda0:	4639      	mov	r1, r7
 800cda2:	f7f3 fd53 	bl	800084c <__aeabi_ddiv>
 800cda6:	f7f3 fed7 	bl	8000b58 <__aeabi_d2iz>
 800cdaa:	4682      	mov	sl, r0
 800cdac:	f7f3 fbba 	bl	8000524 <__aeabi_i2d>
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	f7f3 fc20 	bl	80005f8 <__aeabi_dmul>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	4639      	mov	r1, r7
 800cdc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cdc4:	f7f3 fa60 	bl	8000288 <__aeabi_dsub>
 800cdc8:	f805 6b01 	strb.w	r6, [r5], #1
 800cdcc:	9e01      	ldr	r6, [sp, #4]
 800cdce:	9f03      	ldr	r7, [sp, #12]
 800cdd0:	1bae      	subs	r6, r5, r6
 800cdd2:	42b7      	cmp	r7, r6
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	d135      	bne.n	800ce46 <_dtoa_r+0x6e6>
 800cdda:	f7f3 fa57 	bl	800028c <__adddf3>
 800cdde:	4642      	mov	r2, r8
 800cde0:	464b      	mov	r3, r9
 800cde2:	4606      	mov	r6, r0
 800cde4:	460f      	mov	r7, r1
 800cde6:	f7f3 fe97 	bl	8000b18 <__aeabi_dcmpgt>
 800cdea:	b9d0      	cbnz	r0, 800ce22 <_dtoa_r+0x6c2>
 800cdec:	4642      	mov	r2, r8
 800cdee:	464b      	mov	r3, r9
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	f7f3 fe68 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdf8:	b110      	cbz	r0, 800ce00 <_dtoa_r+0x6a0>
 800cdfa:	f01a 0f01 	tst.w	sl, #1
 800cdfe:	d110      	bne.n	800ce22 <_dtoa_r+0x6c2>
 800ce00:	4620      	mov	r0, r4
 800ce02:	ee18 1a10 	vmov	r1, s16
 800ce06:	f000 fb0d 	bl	800d424 <_Bfree>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9800      	ldr	r0, [sp, #0]
 800ce0e:	702b      	strb	r3, [r5, #0]
 800ce10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce12:	3001      	adds	r0, #1
 800ce14:	6018      	str	r0, [r3, #0]
 800ce16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f43f acf1 	beq.w	800c800 <_dtoa_r+0xa0>
 800ce1e:	601d      	str	r5, [r3, #0]
 800ce20:	e4ee      	b.n	800c800 <_dtoa_r+0xa0>
 800ce22:	9f00      	ldr	r7, [sp, #0]
 800ce24:	462b      	mov	r3, r5
 800ce26:	461d      	mov	r5, r3
 800ce28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce2c:	2a39      	cmp	r2, #57	; 0x39
 800ce2e:	d106      	bne.n	800ce3e <_dtoa_r+0x6de>
 800ce30:	9a01      	ldr	r2, [sp, #4]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d1f7      	bne.n	800ce26 <_dtoa_r+0x6c6>
 800ce36:	9901      	ldr	r1, [sp, #4]
 800ce38:	2230      	movs	r2, #48	; 0x30
 800ce3a:	3701      	adds	r7, #1
 800ce3c:	700a      	strb	r2, [r1, #0]
 800ce3e:	781a      	ldrb	r2, [r3, #0]
 800ce40:	3201      	adds	r2, #1
 800ce42:	701a      	strb	r2, [r3, #0]
 800ce44:	e790      	b.n	800cd68 <_dtoa_r+0x608>
 800ce46:	4ba6      	ldr	r3, [pc, #664]	; (800d0e0 <_dtoa_r+0x980>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f7f3 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ce4e:	2200      	movs	r2, #0
 800ce50:	2300      	movs	r3, #0
 800ce52:	4606      	mov	r6, r0
 800ce54:	460f      	mov	r7, r1
 800ce56:	f7f3 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d09d      	beq.n	800cd9a <_dtoa_r+0x63a>
 800ce5e:	e7cf      	b.n	800ce00 <_dtoa_r+0x6a0>
 800ce60:	9a08      	ldr	r2, [sp, #32]
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	f000 80d7 	beq.w	800d016 <_dtoa_r+0x8b6>
 800ce68:	9a06      	ldr	r2, [sp, #24]
 800ce6a:	2a01      	cmp	r2, #1
 800ce6c:	f300 80ba 	bgt.w	800cfe4 <_dtoa_r+0x884>
 800ce70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	f000 80b2 	beq.w	800cfdc <_dtoa_r+0x87c>
 800ce78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce7c:	9e07      	ldr	r6, [sp, #28]
 800ce7e:	9d04      	ldr	r5, [sp, #16]
 800ce80:	9a04      	ldr	r2, [sp, #16]
 800ce82:	441a      	add	r2, r3
 800ce84:	9204      	str	r2, [sp, #16]
 800ce86:	9a05      	ldr	r2, [sp, #20]
 800ce88:	2101      	movs	r1, #1
 800ce8a:	441a      	add	r2, r3
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	9205      	str	r2, [sp, #20]
 800ce90:	f000 fb80 	bl	800d594 <__i2b>
 800ce94:	4607      	mov	r7, r0
 800ce96:	2d00      	cmp	r5, #0
 800ce98:	dd0c      	ble.n	800ceb4 <_dtoa_r+0x754>
 800ce9a:	9b05      	ldr	r3, [sp, #20]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	dd09      	ble.n	800ceb4 <_dtoa_r+0x754>
 800cea0:	42ab      	cmp	r3, r5
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	bfa8      	it	ge
 800cea6:	462b      	movge	r3, r5
 800cea8:	1ad2      	subs	r2, r2, r3
 800ceaa:	9204      	str	r2, [sp, #16]
 800ceac:	9a05      	ldr	r2, [sp, #20]
 800ceae:	1aed      	subs	r5, r5, r3
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	9305      	str	r3, [sp, #20]
 800ceb4:	9b07      	ldr	r3, [sp, #28]
 800ceb6:	b31b      	cbz	r3, 800cf00 <_dtoa_r+0x7a0>
 800ceb8:	9b08      	ldr	r3, [sp, #32]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f000 80af 	beq.w	800d01e <_dtoa_r+0x8be>
 800cec0:	2e00      	cmp	r6, #0
 800cec2:	dd13      	ble.n	800ceec <_dtoa_r+0x78c>
 800cec4:	4639      	mov	r1, r7
 800cec6:	4632      	mov	r2, r6
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 fc23 	bl	800d714 <__pow5mult>
 800cece:	ee18 2a10 	vmov	r2, s16
 800ced2:	4601      	mov	r1, r0
 800ced4:	4607      	mov	r7, r0
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 fb72 	bl	800d5c0 <__multiply>
 800cedc:	ee18 1a10 	vmov	r1, s16
 800cee0:	4680      	mov	r8, r0
 800cee2:	4620      	mov	r0, r4
 800cee4:	f000 fa9e 	bl	800d424 <_Bfree>
 800cee8:	ee08 8a10 	vmov	s16, r8
 800ceec:	9b07      	ldr	r3, [sp, #28]
 800ceee:	1b9a      	subs	r2, r3, r6
 800cef0:	d006      	beq.n	800cf00 <_dtoa_r+0x7a0>
 800cef2:	ee18 1a10 	vmov	r1, s16
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 fc0c 	bl	800d714 <__pow5mult>
 800cefc:	ee08 0a10 	vmov	s16, r0
 800cf00:	2101      	movs	r1, #1
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 fb46 	bl	800d594 <__i2b>
 800cf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	f340 8088 	ble.w	800d022 <_dtoa_r+0x8c2>
 800cf12:	461a      	mov	r2, r3
 800cf14:	4601      	mov	r1, r0
 800cf16:	4620      	mov	r0, r4
 800cf18:	f000 fbfc 	bl	800d714 <__pow5mult>
 800cf1c:	9b06      	ldr	r3, [sp, #24]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	4606      	mov	r6, r0
 800cf22:	f340 8081 	ble.w	800d028 <_dtoa_r+0x8c8>
 800cf26:	f04f 0800 	mov.w	r8, #0
 800cf2a:	6933      	ldr	r3, [r6, #16]
 800cf2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf30:	6918      	ldr	r0, [r3, #16]
 800cf32:	f000 fadf 	bl	800d4f4 <__hi0bits>
 800cf36:	f1c0 0020 	rsb	r0, r0, #32
 800cf3a:	9b05      	ldr	r3, [sp, #20]
 800cf3c:	4418      	add	r0, r3
 800cf3e:	f010 001f 	ands.w	r0, r0, #31
 800cf42:	f000 8092 	beq.w	800d06a <_dtoa_r+0x90a>
 800cf46:	f1c0 0320 	rsb	r3, r0, #32
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	f340 808a 	ble.w	800d064 <_dtoa_r+0x904>
 800cf50:	f1c0 001c 	rsb	r0, r0, #28
 800cf54:	9b04      	ldr	r3, [sp, #16]
 800cf56:	4403      	add	r3, r0
 800cf58:	9304      	str	r3, [sp, #16]
 800cf5a:	9b05      	ldr	r3, [sp, #20]
 800cf5c:	4403      	add	r3, r0
 800cf5e:	4405      	add	r5, r0
 800cf60:	9305      	str	r3, [sp, #20]
 800cf62:	9b04      	ldr	r3, [sp, #16]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dd07      	ble.n	800cf78 <_dtoa_r+0x818>
 800cf68:	ee18 1a10 	vmov	r1, s16
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 fc2a 	bl	800d7c8 <__lshift>
 800cf74:	ee08 0a10 	vmov	s16, r0
 800cf78:	9b05      	ldr	r3, [sp, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	dd05      	ble.n	800cf8a <_dtoa_r+0x82a>
 800cf7e:	4631      	mov	r1, r6
 800cf80:	461a      	mov	r2, r3
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 fc20 	bl	800d7c8 <__lshift>
 800cf88:	4606      	mov	r6, r0
 800cf8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d06e      	beq.n	800d06e <_dtoa_r+0x90e>
 800cf90:	ee18 0a10 	vmov	r0, s16
 800cf94:	4631      	mov	r1, r6
 800cf96:	f000 fc87 	bl	800d8a8 <__mcmp>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	da67      	bge.n	800d06e <_dtoa_r+0x90e>
 800cf9e:	9b00      	ldr	r3, [sp, #0]
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	ee18 1a10 	vmov	r1, s16
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	220a      	movs	r2, #10
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4620      	mov	r0, r4
 800cfae:	f000 fa5b 	bl	800d468 <__multadd>
 800cfb2:	9b08      	ldr	r3, [sp, #32]
 800cfb4:	ee08 0a10 	vmov	s16, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 81b1 	beq.w	800d320 <_dtoa_r+0xbc0>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	220a      	movs	r2, #10
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fa4f 	bl	800d468 <__multadd>
 800cfca:	9b02      	ldr	r3, [sp, #8]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	4607      	mov	r7, r0
 800cfd0:	f300 808e 	bgt.w	800d0f0 <_dtoa_r+0x990>
 800cfd4:	9b06      	ldr	r3, [sp, #24]
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	dc51      	bgt.n	800d07e <_dtoa_r+0x91e>
 800cfda:	e089      	b.n	800d0f0 <_dtoa_r+0x990>
 800cfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfe2:	e74b      	b.n	800ce7c <_dtoa_r+0x71c>
 800cfe4:	9b03      	ldr	r3, [sp, #12]
 800cfe6:	1e5e      	subs	r6, r3, #1
 800cfe8:	9b07      	ldr	r3, [sp, #28]
 800cfea:	42b3      	cmp	r3, r6
 800cfec:	bfbf      	itttt	lt
 800cfee:	9b07      	ldrlt	r3, [sp, #28]
 800cff0:	9607      	strlt	r6, [sp, #28]
 800cff2:	1af2      	sublt	r2, r6, r3
 800cff4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cff6:	bfb6      	itet	lt
 800cff8:	189b      	addlt	r3, r3, r2
 800cffa:	1b9e      	subge	r6, r3, r6
 800cffc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	bfb8      	it	lt
 800d002:	2600      	movlt	r6, #0
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfb7      	itett	lt
 800d008:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d00c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d010:	1a9d      	sublt	r5, r3, r2
 800d012:	2300      	movlt	r3, #0
 800d014:	e734      	b.n	800ce80 <_dtoa_r+0x720>
 800d016:	9e07      	ldr	r6, [sp, #28]
 800d018:	9d04      	ldr	r5, [sp, #16]
 800d01a:	9f08      	ldr	r7, [sp, #32]
 800d01c:	e73b      	b.n	800ce96 <_dtoa_r+0x736>
 800d01e:	9a07      	ldr	r2, [sp, #28]
 800d020:	e767      	b.n	800cef2 <_dtoa_r+0x792>
 800d022:	9b06      	ldr	r3, [sp, #24]
 800d024:	2b01      	cmp	r3, #1
 800d026:	dc18      	bgt.n	800d05a <_dtoa_r+0x8fa>
 800d028:	f1ba 0f00 	cmp.w	sl, #0
 800d02c:	d115      	bne.n	800d05a <_dtoa_r+0x8fa>
 800d02e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d032:	b993      	cbnz	r3, 800d05a <_dtoa_r+0x8fa>
 800d034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d038:	0d1b      	lsrs	r3, r3, #20
 800d03a:	051b      	lsls	r3, r3, #20
 800d03c:	b183      	cbz	r3, 800d060 <_dtoa_r+0x900>
 800d03e:	9b04      	ldr	r3, [sp, #16]
 800d040:	3301      	adds	r3, #1
 800d042:	9304      	str	r3, [sp, #16]
 800d044:	9b05      	ldr	r3, [sp, #20]
 800d046:	3301      	adds	r3, #1
 800d048:	9305      	str	r3, [sp, #20]
 800d04a:	f04f 0801 	mov.w	r8, #1
 800d04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d050:	2b00      	cmp	r3, #0
 800d052:	f47f af6a 	bne.w	800cf2a <_dtoa_r+0x7ca>
 800d056:	2001      	movs	r0, #1
 800d058:	e76f      	b.n	800cf3a <_dtoa_r+0x7da>
 800d05a:	f04f 0800 	mov.w	r8, #0
 800d05e:	e7f6      	b.n	800d04e <_dtoa_r+0x8ee>
 800d060:	4698      	mov	r8, r3
 800d062:	e7f4      	b.n	800d04e <_dtoa_r+0x8ee>
 800d064:	f43f af7d 	beq.w	800cf62 <_dtoa_r+0x802>
 800d068:	4618      	mov	r0, r3
 800d06a:	301c      	adds	r0, #28
 800d06c:	e772      	b.n	800cf54 <_dtoa_r+0x7f4>
 800d06e:	9b03      	ldr	r3, [sp, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dc37      	bgt.n	800d0e4 <_dtoa_r+0x984>
 800d074:	9b06      	ldr	r3, [sp, #24]
 800d076:	2b02      	cmp	r3, #2
 800d078:	dd34      	ble.n	800d0e4 <_dtoa_r+0x984>
 800d07a:	9b03      	ldr	r3, [sp, #12]
 800d07c:	9302      	str	r3, [sp, #8]
 800d07e:	9b02      	ldr	r3, [sp, #8]
 800d080:	b96b      	cbnz	r3, 800d09e <_dtoa_r+0x93e>
 800d082:	4631      	mov	r1, r6
 800d084:	2205      	movs	r2, #5
 800d086:	4620      	mov	r0, r4
 800d088:	f000 f9ee 	bl	800d468 <__multadd>
 800d08c:	4601      	mov	r1, r0
 800d08e:	4606      	mov	r6, r0
 800d090:	ee18 0a10 	vmov	r0, s16
 800d094:	f000 fc08 	bl	800d8a8 <__mcmp>
 800d098:	2800      	cmp	r0, #0
 800d09a:	f73f adbb 	bgt.w	800cc14 <_dtoa_r+0x4b4>
 800d09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a0:	9d01      	ldr	r5, [sp, #4]
 800d0a2:	43db      	mvns	r3, r3
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	f04f 0800 	mov.w	r8, #0
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	f000 f9b9 	bl	800d424 <_Bfree>
 800d0b2:	2f00      	cmp	r7, #0
 800d0b4:	f43f aea4 	beq.w	800ce00 <_dtoa_r+0x6a0>
 800d0b8:	f1b8 0f00 	cmp.w	r8, #0
 800d0bc:	d005      	beq.n	800d0ca <_dtoa_r+0x96a>
 800d0be:	45b8      	cmp	r8, r7
 800d0c0:	d003      	beq.n	800d0ca <_dtoa_r+0x96a>
 800d0c2:	4641      	mov	r1, r8
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 f9ad 	bl	800d424 <_Bfree>
 800d0ca:	4639      	mov	r1, r7
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f000 f9a9 	bl	800d424 <_Bfree>
 800d0d2:	e695      	b.n	800ce00 <_dtoa_r+0x6a0>
 800d0d4:	2600      	movs	r6, #0
 800d0d6:	4637      	mov	r7, r6
 800d0d8:	e7e1      	b.n	800d09e <_dtoa_r+0x93e>
 800d0da:	9700      	str	r7, [sp, #0]
 800d0dc:	4637      	mov	r7, r6
 800d0de:	e599      	b.n	800cc14 <_dtoa_r+0x4b4>
 800d0e0:	40240000 	.word	0x40240000
 800d0e4:	9b08      	ldr	r3, [sp, #32]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 80ca 	beq.w	800d280 <_dtoa_r+0xb20>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	2d00      	cmp	r5, #0
 800d0f2:	dd05      	ble.n	800d100 <_dtoa_r+0x9a0>
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 fb65 	bl	800d7c8 <__lshift>
 800d0fe:	4607      	mov	r7, r0
 800d100:	f1b8 0f00 	cmp.w	r8, #0
 800d104:	d05b      	beq.n	800d1be <_dtoa_r+0xa5e>
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 f94b 	bl	800d3a4 <_Balloc>
 800d10e:	4605      	mov	r5, r0
 800d110:	b928      	cbnz	r0, 800d11e <_dtoa_r+0x9be>
 800d112:	4b87      	ldr	r3, [pc, #540]	; (800d330 <_dtoa_r+0xbd0>)
 800d114:	4602      	mov	r2, r0
 800d116:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d11a:	f7ff bb3b 	b.w	800c794 <_dtoa_r+0x34>
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	3202      	adds	r2, #2
 800d122:	0092      	lsls	r2, r2, #2
 800d124:	f107 010c 	add.w	r1, r7, #12
 800d128:	300c      	adds	r0, #12
 800d12a:	f7fe fc57 	bl	800b9dc <memcpy>
 800d12e:	2201      	movs	r2, #1
 800d130:	4629      	mov	r1, r5
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fb48 	bl	800d7c8 <__lshift>
 800d138:	9b01      	ldr	r3, [sp, #4]
 800d13a:	f103 0901 	add.w	r9, r3, #1
 800d13e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d142:	4413      	add	r3, r2
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	f00a 0301 	and.w	r3, sl, #1
 800d14a:	46b8      	mov	r8, r7
 800d14c:	9304      	str	r3, [sp, #16]
 800d14e:	4607      	mov	r7, r0
 800d150:	4631      	mov	r1, r6
 800d152:	ee18 0a10 	vmov	r0, s16
 800d156:	f7ff fa77 	bl	800c648 <quorem>
 800d15a:	4641      	mov	r1, r8
 800d15c:	9002      	str	r0, [sp, #8]
 800d15e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d162:	ee18 0a10 	vmov	r0, s16
 800d166:	f000 fb9f 	bl	800d8a8 <__mcmp>
 800d16a:	463a      	mov	r2, r7
 800d16c:	9003      	str	r0, [sp, #12]
 800d16e:	4631      	mov	r1, r6
 800d170:	4620      	mov	r0, r4
 800d172:	f000 fbb5 	bl	800d8e0 <__mdiff>
 800d176:	68c2      	ldr	r2, [r0, #12]
 800d178:	f109 3bff 	add.w	fp, r9, #4294967295
 800d17c:	4605      	mov	r5, r0
 800d17e:	bb02      	cbnz	r2, 800d1c2 <_dtoa_r+0xa62>
 800d180:	4601      	mov	r1, r0
 800d182:	ee18 0a10 	vmov	r0, s16
 800d186:	f000 fb8f 	bl	800d8a8 <__mcmp>
 800d18a:	4602      	mov	r2, r0
 800d18c:	4629      	mov	r1, r5
 800d18e:	4620      	mov	r0, r4
 800d190:	9207      	str	r2, [sp, #28]
 800d192:	f000 f947 	bl	800d424 <_Bfree>
 800d196:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d19a:	ea43 0102 	orr.w	r1, r3, r2
 800d19e:	9b04      	ldr	r3, [sp, #16]
 800d1a0:	430b      	orrs	r3, r1
 800d1a2:	464d      	mov	r5, r9
 800d1a4:	d10f      	bne.n	800d1c6 <_dtoa_r+0xa66>
 800d1a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1aa:	d02a      	beq.n	800d202 <_dtoa_r+0xaa2>
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	dd02      	ble.n	800d1b8 <_dtoa_r+0xa58>
 800d1b2:	9b02      	ldr	r3, [sp, #8]
 800d1b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d1b8:	f88b a000 	strb.w	sl, [fp]
 800d1bc:	e775      	b.n	800d0aa <_dtoa_r+0x94a>
 800d1be:	4638      	mov	r0, r7
 800d1c0:	e7ba      	b.n	800d138 <_dtoa_r+0x9d8>
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	e7e2      	b.n	800d18c <_dtoa_r+0xa2c>
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	db04      	blt.n	800d1d6 <_dtoa_r+0xa76>
 800d1cc:	9906      	ldr	r1, [sp, #24]
 800d1ce:	430b      	orrs	r3, r1
 800d1d0:	9904      	ldr	r1, [sp, #16]
 800d1d2:	430b      	orrs	r3, r1
 800d1d4:	d122      	bne.n	800d21c <_dtoa_r+0xabc>
 800d1d6:	2a00      	cmp	r2, #0
 800d1d8:	ddee      	ble.n	800d1b8 <_dtoa_r+0xa58>
 800d1da:	ee18 1a10 	vmov	r1, s16
 800d1de:	2201      	movs	r2, #1
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f000 faf1 	bl	800d7c8 <__lshift>
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	ee08 0a10 	vmov	s16, r0
 800d1ec:	f000 fb5c 	bl	800d8a8 <__mcmp>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	dc03      	bgt.n	800d1fc <_dtoa_r+0xa9c>
 800d1f4:	d1e0      	bne.n	800d1b8 <_dtoa_r+0xa58>
 800d1f6:	f01a 0f01 	tst.w	sl, #1
 800d1fa:	d0dd      	beq.n	800d1b8 <_dtoa_r+0xa58>
 800d1fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d200:	d1d7      	bne.n	800d1b2 <_dtoa_r+0xa52>
 800d202:	2339      	movs	r3, #57	; 0x39
 800d204:	f88b 3000 	strb.w	r3, [fp]
 800d208:	462b      	mov	r3, r5
 800d20a:	461d      	mov	r5, r3
 800d20c:	3b01      	subs	r3, #1
 800d20e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d212:	2a39      	cmp	r2, #57	; 0x39
 800d214:	d071      	beq.n	800d2fa <_dtoa_r+0xb9a>
 800d216:	3201      	adds	r2, #1
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	e746      	b.n	800d0aa <_dtoa_r+0x94a>
 800d21c:	2a00      	cmp	r2, #0
 800d21e:	dd07      	ble.n	800d230 <_dtoa_r+0xad0>
 800d220:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d224:	d0ed      	beq.n	800d202 <_dtoa_r+0xaa2>
 800d226:	f10a 0301 	add.w	r3, sl, #1
 800d22a:	f88b 3000 	strb.w	r3, [fp]
 800d22e:	e73c      	b.n	800d0aa <_dtoa_r+0x94a>
 800d230:	9b05      	ldr	r3, [sp, #20]
 800d232:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d236:	4599      	cmp	r9, r3
 800d238:	d047      	beq.n	800d2ca <_dtoa_r+0xb6a>
 800d23a:	ee18 1a10 	vmov	r1, s16
 800d23e:	2300      	movs	r3, #0
 800d240:	220a      	movs	r2, #10
 800d242:	4620      	mov	r0, r4
 800d244:	f000 f910 	bl	800d468 <__multadd>
 800d248:	45b8      	cmp	r8, r7
 800d24a:	ee08 0a10 	vmov	s16, r0
 800d24e:	f04f 0300 	mov.w	r3, #0
 800d252:	f04f 020a 	mov.w	r2, #10
 800d256:	4641      	mov	r1, r8
 800d258:	4620      	mov	r0, r4
 800d25a:	d106      	bne.n	800d26a <_dtoa_r+0xb0a>
 800d25c:	f000 f904 	bl	800d468 <__multadd>
 800d260:	4680      	mov	r8, r0
 800d262:	4607      	mov	r7, r0
 800d264:	f109 0901 	add.w	r9, r9, #1
 800d268:	e772      	b.n	800d150 <_dtoa_r+0x9f0>
 800d26a:	f000 f8fd 	bl	800d468 <__multadd>
 800d26e:	4639      	mov	r1, r7
 800d270:	4680      	mov	r8, r0
 800d272:	2300      	movs	r3, #0
 800d274:	220a      	movs	r2, #10
 800d276:	4620      	mov	r0, r4
 800d278:	f000 f8f6 	bl	800d468 <__multadd>
 800d27c:	4607      	mov	r7, r0
 800d27e:	e7f1      	b.n	800d264 <_dtoa_r+0xb04>
 800d280:	9b03      	ldr	r3, [sp, #12]
 800d282:	9302      	str	r3, [sp, #8]
 800d284:	9d01      	ldr	r5, [sp, #4]
 800d286:	ee18 0a10 	vmov	r0, s16
 800d28a:	4631      	mov	r1, r6
 800d28c:	f7ff f9dc 	bl	800c648 <quorem>
 800d290:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d294:	9b01      	ldr	r3, [sp, #4]
 800d296:	f805 ab01 	strb.w	sl, [r5], #1
 800d29a:	1aea      	subs	r2, r5, r3
 800d29c:	9b02      	ldr	r3, [sp, #8]
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	dd09      	ble.n	800d2b6 <_dtoa_r+0xb56>
 800d2a2:	ee18 1a10 	vmov	r1, s16
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	220a      	movs	r2, #10
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 f8dc 	bl	800d468 <__multadd>
 800d2b0:	ee08 0a10 	vmov	s16, r0
 800d2b4:	e7e7      	b.n	800d286 <_dtoa_r+0xb26>
 800d2b6:	9b02      	ldr	r3, [sp, #8]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bfc8      	it	gt
 800d2bc:	461d      	movgt	r5, r3
 800d2be:	9b01      	ldr	r3, [sp, #4]
 800d2c0:	bfd8      	it	le
 800d2c2:	2501      	movle	r5, #1
 800d2c4:	441d      	add	r5, r3
 800d2c6:	f04f 0800 	mov.w	r8, #0
 800d2ca:	ee18 1a10 	vmov	r1, s16
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 fa79 	bl	800d7c8 <__lshift>
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	ee08 0a10 	vmov	s16, r0
 800d2dc:	f000 fae4 	bl	800d8a8 <__mcmp>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	dc91      	bgt.n	800d208 <_dtoa_r+0xaa8>
 800d2e4:	d102      	bne.n	800d2ec <_dtoa_r+0xb8c>
 800d2e6:	f01a 0f01 	tst.w	sl, #1
 800d2ea:	d18d      	bne.n	800d208 <_dtoa_r+0xaa8>
 800d2ec:	462b      	mov	r3, r5
 800d2ee:	461d      	mov	r5, r3
 800d2f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2f4:	2a30      	cmp	r2, #48	; 0x30
 800d2f6:	d0fa      	beq.n	800d2ee <_dtoa_r+0xb8e>
 800d2f8:	e6d7      	b.n	800d0aa <_dtoa_r+0x94a>
 800d2fa:	9a01      	ldr	r2, [sp, #4]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d184      	bne.n	800d20a <_dtoa_r+0xaaa>
 800d300:	9b00      	ldr	r3, [sp, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	2331      	movs	r3, #49	; 0x31
 800d308:	7013      	strb	r3, [r2, #0]
 800d30a:	e6ce      	b.n	800d0aa <_dtoa_r+0x94a>
 800d30c:	4b09      	ldr	r3, [pc, #36]	; (800d334 <_dtoa_r+0xbd4>)
 800d30e:	f7ff ba95 	b.w	800c83c <_dtoa_r+0xdc>
 800d312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d314:	2b00      	cmp	r3, #0
 800d316:	f47f aa6e 	bne.w	800c7f6 <_dtoa_r+0x96>
 800d31a:	4b07      	ldr	r3, [pc, #28]	; (800d338 <_dtoa_r+0xbd8>)
 800d31c:	f7ff ba8e 	b.w	800c83c <_dtoa_r+0xdc>
 800d320:	9b02      	ldr	r3, [sp, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	dcae      	bgt.n	800d284 <_dtoa_r+0xb24>
 800d326:	9b06      	ldr	r3, [sp, #24]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	f73f aea8 	bgt.w	800d07e <_dtoa_r+0x91e>
 800d32e:	e7a9      	b.n	800d284 <_dtoa_r+0xb24>
 800d330:	080a8bbe 	.word	0x080a8bbe
 800d334:	080a8a84 	.word	0x080a8a84
 800d338:	080a8b56 	.word	0x080a8b56

0800d33c <fiprintf>:
 800d33c:	b40e      	push	{r1, r2, r3}
 800d33e:	b503      	push	{r0, r1, lr}
 800d340:	4601      	mov	r1, r0
 800d342:	ab03      	add	r3, sp, #12
 800d344:	4805      	ldr	r0, [pc, #20]	; (800d35c <fiprintf+0x20>)
 800d346:	f853 2b04 	ldr.w	r2, [r3], #4
 800d34a:	6800      	ldr	r0, [r0, #0]
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	f000 fbed 	bl	800db2c <_vfiprintf_r>
 800d352:	b002      	add	sp, #8
 800d354:	f85d eb04 	ldr.w	lr, [sp], #4
 800d358:	b003      	add	sp, #12
 800d35a:	4770      	bx	lr
 800d35c:	20000774 	.word	0x20000774

0800d360 <_localeconv_r>:
 800d360:	4800      	ldr	r0, [pc, #0]	; (800d364 <_localeconv_r+0x4>)
 800d362:	4770      	bx	lr
 800d364:	200008c8 	.word	0x200008c8

0800d368 <_lseek_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d07      	ldr	r5, [pc, #28]	; (800d388 <_lseek_r+0x20>)
 800d36c:	4604      	mov	r4, r0
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	2200      	movs	r2, #0
 800d374:	602a      	str	r2, [r5, #0]
 800d376:	461a      	mov	r2, r3
 800d378:	f001 fbcc 	bl	800eb14 <_lseek>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_lseek_r+0x1e>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_lseek_r+0x1e>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	2000249c 	.word	0x2000249c

0800d38c <__malloc_lock>:
 800d38c:	4801      	ldr	r0, [pc, #4]	; (800d394 <__malloc_lock+0x8>)
 800d38e:	f7fe bb12 	b.w	800b9b6 <__retarget_lock_acquire_recursive>
 800d392:	bf00      	nop
 800d394:	20002490 	.word	0x20002490

0800d398 <__malloc_unlock>:
 800d398:	4801      	ldr	r0, [pc, #4]	; (800d3a0 <__malloc_unlock+0x8>)
 800d39a:	f7fe bb0d 	b.w	800b9b8 <__retarget_lock_release_recursive>
 800d39e:	bf00      	nop
 800d3a0:	20002490 	.word	0x20002490

0800d3a4 <_Balloc>:
 800d3a4:	b570      	push	{r4, r5, r6, lr}
 800d3a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	460d      	mov	r5, r1
 800d3ac:	b976      	cbnz	r6, 800d3cc <_Balloc+0x28>
 800d3ae:	2010      	movs	r0, #16
 800d3b0:	f7f9 ffc4 	bl	800733c <__wrap_malloc>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	6260      	str	r0, [r4, #36]	; 0x24
 800d3b8:	b920      	cbnz	r0, 800d3c4 <_Balloc+0x20>
 800d3ba:	4b18      	ldr	r3, [pc, #96]	; (800d41c <_Balloc+0x78>)
 800d3bc:	4818      	ldr	r0, [pc, #96]	; (800d420 <_Balloc+0x7c>)
 800d3be:	2166      	movs	r1, #102	; 0x66
 800d3c0:	f7ff f914 	bl	800c5ec <__assert_func>
 800d3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3c8:	6006      	str	r6, [r0, #0]
 800d3ca:	60c6      	str	r6, [r0, #12]
 800d3cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3ce:	68f3      	ldr	r3, [r6, #12]
 800d3d0:	b183      	cbz	r3, 800d3f4 <_Balloc+0x50>
 800d3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3da:	b9b8      	cbnz	r0, 800d40c <_Balloc+0x68>
 800d3dc:	2101      	movs	r1, #1
 800d3de:	fa01 f605 	lsl.w	r6, r1, r5
 800d3e2:	1d72      	adds	r2, r6, #5
 800d3e4:	0092      	lsls	r2, r2, #2
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 fb60 	bl	800daac <_calloc_r>
 800d3ec:	b160      	cbz	r0, 800d408 <_Balloc+0x64>
 800d3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3f2:	e00e      	b.n	800d412 <_Balloc+0x6e>
 800d3f4:	2221      	movs	r2, #33	; 0x21
 800d3f6:	2104      	movs	r1, #4
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f000 fb57 	bl	800daac <_calloc_r>
 800d3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d400:	60f0      	str	r0, [r6, #12]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1e4      	bne.n	800d3d2 <_Balloc+0x2e>
 800d408:	2000      	movs	r0, #0
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	6802      	ldr	r2, [r0, #0]
 800d40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d412:	2300      	movs	r3, #0
 800d414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d418:	e7f7      	b.n	800d40a <_Balloc+0x66>
 800d41a:	bf00      	nop
 800d41c:	080a8aa8 	.word	0x080a8aa8
 800d420:	080a8bcf 	.word	0x080a8bcf

0800d424 <_Bfree>:
 800d424:	b570      	push	{r4, r5, r6, lr}
 800d426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d428:	4605      	mov	r5, r0
 800d42a:	460c      	mov	r4, r1
 800d42c:	b976      	cbnz	r6, 800d44c <_Bfree+0x28>
 800d42e:	2010      	movs	r0, #16
 800d430:	f7f9 ff84 	bl	800733c <__wrap_malloc>
 800d434:	4602      	mov	r2, r0
 800d436:	6268      	str	r0, [r5, #36]	; 0x24
 800d438:	b920      	cbnz	r0, 800d444 <_Bfree+0x20>
 800d43a:	4b09      	ldr	r3, [pc, #36]	; (800d460 <_Bfree+0x3c>)
 800d43c:	4809      	ldr	r0, [pc, #36]	; (800d464 <_Bfree+0x40>)
 800d43e:	218a      	movs	r1, #138	; 0x8a
 800d440:	f7ff f8d4 	bl	800c5ec <__assert_func>
 800d444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d448:	6006      	str	r6, [r0, #0]
 800d44a:	60c6      	str	r6, [r0, #12]
 800d44c:	b13c      	cbz	r4, 800d45e <_Bfree+0x3a>
 800d44e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d450:	6862      	ldr	r2, [r4, #4]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d458:	6021      	str	r1, [r4, #0]
 800d45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d45e:	bd70      	pop	{r4, r5, r6, pc}
 800d460:	080a8aa8 	.word	0x080a8aa8
 800d464:	080a8bcf 	.word	0x080a8bcf

0800d468 <__multadd>:
 800d468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d46c:	690d      	ldr	r5, [r1, #16]
 800d46e:	4607      	mov	r7, r0
 800d470:	460c      	mov	r4, r1
 800d472:	461e      	mov	r6, r3
 800d474:	f101 0c14 	add.w	ip, r1, #20
 800d478:	2000      	movs	r0, #0
 800d47a:	f8dc 3000 	ldr.w	r3, [ip]
 800d47e:	b299      	uxth	r1, r3
 800d480:	fb02 6101 	mla	r1, r2, r1, r6
 800d484:	0c1e      	lsrs	r6, r3, #16
 800d486:	0c0b      	lsrs	r3, r1, #16
 800d488:	fb02 3306 	mla	r3, r2, r6, r3
 800d48c:	b289      	uxth	r1, r1
 800d48e:	3001      	adds	r0, #1
 800d490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d494:	4285      	cmp	r5, r0
 800d496:	f84c 1b04 	str.w	r1, [ip], #4
 800d49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d49e:	dcec      	bgt.n	800d47a <__multadd+0x12>
 800d4a0:	b30e      	cbz	r6, 800d4e6 <__multadd+0x7e>
 800d4a2:	68a3      	ldr	r3, [r4, #8]
 800d4a4:	42ab      	cmp	r3, r5
 800d4a6:	dc19      	bgt.n	800d4dc <__multadd+0x74>
 800d4a8:	6861      	ldr	r1, [r4, #4]
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	3101      	adds	r1, #1
 800d4ae:	f7ff ff79 	bl	800d3a4 <_Balloc>
 800d4b2:	4680      	mov	r8, r0
 800d4b4:	b928      	cbnz	r0, 800d4c2 <__multadd+0x5a>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	4b0c      	ldr	r3, [pc, #48]	; (800d4ec <__multadd+0x84>)
 800d4ba:	480d      	ldr	r0, [pc, #52]	; (800d4f0 <__multadd+0x88>)
 800d4bc:	21b5      	movs	r1, #181	; 0xb5
 800d4be:	f7ff f895 	bl	800c5ec <__assert_func>
 800d4c2:	6922      	ldr	r2, [r4, #16]
 800d4c4:	3202      	adds	r2, #2
 800d4c6:	f104 010c 	add.w	r1, r4, #12
 800d4ca:	0092      	lsls	r2, r2, #2
 800d4cc:	300c      	adds	r0, #12
 800d4ce:	f7fe fa85 	bl	800b9dc <memcpy>
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	f7ff ffa5 	bl	800d424 <_Bfree>
 800d4da:	4644      	mov	r4, r8
 800d4dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4e0:	3501      	adds	r5, #1
 800d4e2:	615e      	str	r6, [r3, #20]
 800d4e4:	6125      	str	r5, [r4, #16]
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ec:	080a8bbe 	.word	0x080a8bbe
 800d4f0:	080a8bcf 	.word	0x080a8bcf

0800d4f4 <__hi0bits>:
 800d4f4:	0c03      	lsrs	r3, r0, #16
 800d4f6:	041b      	lsls	r3, r3, #16
 800d4f8:	b9d3      	cbnz	r3, 800d530 <__hi0bits+0x3c>
 800d4fa:	0400      	lsls	r0, r0, #16
 800d4fc:	2310      	movs	r3, #16
 800d4fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d502:	bf04      	itt	eq
 800d504:	0200      	lsleq	r0, r0, #8
 800d506:	3308      	addeq	r3, #8
 800d508:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d50c:	bf04      	itt	eq
 800d50e:	0100      	lsleq	r0, r0, #4
 800d510:	3304      	addeq	r3, #4
 800d512:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d516:	bf04      	itt	eq
 800d518:	0080      	lsleq	r0, r0, #2
 800d51a:	3302      	addeq	r3, #2
 800d51c:	2800      	cmp	r0, #0
 800d51e:	db05      	blt.n	800d52c <__hi0bits+0x38>
 800d520:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d524:	f103 0301 	add.w	r3, r3, #1
 800d528:	bf08      	it	eq
 800d52a:	2320      	moveq	r3, #32
 800d52c:	4618      	mov	r0, r3
 800d52e:	4770      	bx	lr
 800d530:	2300      	movs	r3, #0
 800d532:	e7e4      	b.n	800d4fe <__hi0bits+0xa>

0800d534 <__lo0bits>:
 800d534:	6803      	ldr	r3, [r0, #0]
 800d536:	f013 0207 	ands.w	r2, r3, #7
 800d53a:	4601      	mov	r1, r0
 800d53c:	d00b      	beq.n	800d556 <__lo0bits+0x22>
 800d53e:	07da      	lsls	r2, r3, #31
 800d540:	d423      	bmi.n	800d58a <__lo0bits+0x56>
 800d542:	0798      	lsls	r0, r3, #30
 800d544:	bf49      	itett	mi
 800d546:	085b      	lsrmi	r3, r3, #1
 800d548:	089b      	lsrpl	r3, r3, #2
 800d54a:	2001      	movmi	r0, #1
 800d54c:	600b      	strmi	r3, [r1, #0]
 800d54e:	bf5c      	itt	pl
 800d550:	600b      	strpl	r3, [r1, #0]
 800d552:	2002      	movpl	r0, #2
 800d554:	4770      	bx	lr
 800d556:	b298      	uxth	r0, r3
 800d558:	b9a8      	cbnz	r0, 800d586 <__lo0bits+0x52>
 800d55a:	0c1b      	lsrs	r3, r3, #16
 800d55c:	2010      	movs	r0, #16
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	b90a      	cbnz	r2, 800d566 <__lo0bits+0x32>
 800d562:	3008      	adds	r0, #8
 800d564:	0a1b      	lsrs	r3, r3, #8
 800d566:	071a      	lsls	r2, r3, #28
 800d568:	bf04      	itt	eq
 800d56a:	091b      	lsreq	r3, r3, #4
 800d56c:	3004      	addeq	r0, #4
 800d56e:	079a      	lsls	r2, r3, #30
 800d570:	bf04      	itt	eq
 800d572:	089b      	lsreq	r3, r3, #2
 800d574:	3002      	addeq	r0, #2
 800d576:	07da      	lsls	r2, r3, #31
 800d578:	d403      	bmi.n	800d582 <__lo0bits+0x4e>
 800d57a:	085b      	lsrs	r3, r3, #1
 800d57c:	f100 0001 	add.w	r0, r0, #1
 800d580:	d005      	beq.n	800d58e <__lo0bits+0x5a>
 800d582:	600b      	str	r3, [r1, #0]
 800d584:	4770      	bx	lr
 800d586:	4610      	mov	r0, r2
 800d588:	e7e9      	b.n	800d55e <__lo0bits+0x2a>
 800d58a:	2000      	movs	r0, #0
 800d58c:	4770      	bx	lr
 800d58e:	2020      	movs	r0, #32
 800d590:	4770      	bx	lr
	...

0800d594 <__i2b>:
 800d594:	b510      	push	{r4, lr}
 800d596:	460c      	mov	r4, r1
 800d598:	2101      	movs	r1, #1
 800d59a:	f7ff ff03 	bl	800d3a4 <_Balloc>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	b928      	cbnz	r0, 800d5ae <__i2b+0x1a>
 800d5a2:	4b05      	ldr	r3, [pc, #20]	; (800d5b8 <__i2b+0x24>)
 800d5a4:	4805      	ldr	r0, [pc, #20]	; (800d5bc <__i2b+0x28>)
 800d5a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d5aa:	f7ff f81f 	bl	800c5ec <__assert_func>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	6144      	str	r4, [r0, #20]
 800d5b2:	6103      	str	r3, [r0, #16]
 800d5b4:	bd10      	pop	{r4, pc}
 800d5b6:	bf00      	nop
 800d5b8:	080a8bbe 	.word	0x080a8bbe
 800d5bc:	080a8bcf 	.word	0x080a8bcf

0800d5c0 <__multiply>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	4691      	mov	r9, r2
 800d5c6:	690a      	ldr	r2, [r1, #16]
 800d5c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	bfb8      	it	lt
 800d5d0:	460b      	movlt	r3, r1
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	bfbc      	itt	lt
 800d5d6:	464c      	movlt	r4, r9
 800d5d8:	4699      	movlt	r9, r3
 800d5da:	6927      	ldr	r7, [r4, #16]
 800d5dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5e0:	68a3      	ldr	r3, [r4, #8]
 800d5e2:	6861      	ldr	r1, [r4, #4]
 800d5e4:	eb07 060a 	add.w	r6, r7, sl
 800d5e8:	42b3      	cmp	r3, r6
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	bfb8      	it	lt
 800d5ee:	3101      	addlt	r1, #1
 800d5f0:	f7ff fed8 	bl	800d3a4 <_Balloc>
 800d5f4:	b930      	cbnz	r0, 800d604 <__multiply+0x44>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	4b44      	ldr	r3, [pc, #272]	; (800d70c <__multiply+0x14c>)
 800d5fa:	4845      	ldr	r0, [pc, #276]	; (800d710 <__multiply+0x150>)
 800d5fc:	f240 115d 	movw	r1, #349	; 0x15d
 800d600:	f7fe fff4 	bl	800c5ec <__assert_func>
 800d604:	f100 0514 	add.w	r5, r0, #20
 800d608:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d60c:	462b      	mov	r3, r5
 800d60e:	2200      	movs	r2, #0
 800d610:	4543      	cmp	r3, r8
 800d612:	d321      	bcc.n	800d658 <__multiply+0x98>
 800d614:	f104 0314 	add.w	r3, r4, #20
 800d618:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d61c:	f109 0314 	add.w	r3, r9, #20
 800d620:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d624:	9202      	str	r2, [sp, #8]
 800d626:	1b3a      	subs	r2, r7, r4
 800d628:	3a15      	subs	r2, #21
 800d62a:	f022 0203 	bic.w	r2, r2, #3
 800d62e:	3204      	adds	r2, #4
 800d630:	f104 0115 	add.w	r1, r4, #21
 800d634:	428f      	cmp	r7, r1
 800d636:	bf38      	it	cc
 800d638:	2204      	movcc	r2, #4
 800d63a:	9201      	str	r2, [sp, #4]
 800d63c:	9a02      	ldr	r2, [sp, #8]
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	429a      	cmp	r2, r3
 800d642:	d80c      	bhi.n	800d65e <__multiply+0x9e>
 800d644:	2e00      	cmp	r6, #0
 800d646:	dd03      	ble.n	800d650 <__multiply+0x90>
 800d648:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d05a      	beq.n	800d706 <__multiply+0x146>
 800d650:	6106      	str	r6, [r0, #16]
 800d652:	b005      	add	sp, #20
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	f843 2b04 	str.w	r2, [r3], #4
 800d65c:	e7d8      	b.n	800d610 <__multiply+0x50>
 800d65e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d662:	f1ba 0f00 	cmp.w	sl, #0
 800d666:	d024      	beq.n	800d6b2 <__multiply+0xf2>
 800d668:	f104 0e14 	add.w	lr, r4, #20
 800d66c:	46a9      	mov	r9, r5
 800d66e:	f04f 0c00 	mov.w	ip, #0
 800d672:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d676:	f8d9 1000 	ldr.w	r1, [r9]
 800d67a:	fa1f fb82 	uxth.w	fp, r2
 800d67e:	b289      	uxth	r1, r1
 800d680:	fb0a 110b 	mla	r1, sl, fp, r1
 800d684:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d688:	f8d9 2000 	ldr.w	r2, [r9]
 800d68c:	4461      	add	r1, ip
 800d68e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d692:	fb0a c20b 	mla	r2, sl, fp, ip
 800d696:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d69a:	b289      	uxth	r1, r1
 800d69c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6a0:	4577      	cmp	r7, lr
 800d6a2:	f849 1b04 	str.w	r1, [r9], #4
 800d6a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6aa:	d8e2      	bhi.n	800d672 <__multiply+0xb2>
 800d6ac:	9a01      	ldr	r2, [sp, #4]
 800d6ae:	f845 c002 	str.w	ip, [r5, r2]
 800d6b2:	9a03      	ldr	r2, [sp, #12]
 800d6b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	f1b9 0f00 	cmp.w	r9, #0
 800d6be:	d020      	beq.n	800d702 <__multiply+0x142>
 800d6c0:	6829      	ldr	r1, [r5, #0]
 800d6c2:	f104 0c14 	add.w	ip, r4, #20
 800d6c6:	46ae      	mov	lr, r5
 800d6c8:	f04f 0a00 	mov.w	sl, #0
 800d6cc:	f8bc b000 	ldrh.w	fp, [ip]
 800d6d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6d4:	fb09 220b 	mla	r2, r9, fp, r2
 800d6d8:	4492      	add	sl, r2
 800d6da:	b289      	uxth	r1, r1
 800d6dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6e0:	f84e 1b04 	str.w	r1, [lr], #4
 800d6e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6e8:	f8be 1000 	ldrh.w	r1, [lr]
 800d6ec:	0c12      	lsrs	r2, r2, #16
 800d6ee:	fb09 1102 	mla	r1, r9, r2, r1
 800d6f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d6f6:	4567      	cmp	r7, ip
 800d6f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6fc:	d8e6      	bhi.n	800d6cc <__multiply+0x10c>
 800d6fe:	9a01      	ldr	r2, [sp, #4]
 800d700:	50a9      	str	r1, [r5, r2]
 800d702:	3504      	adds	r5, #4
 800d704:	e79a      	b.n	800d63c <__multiply+0x7c>
 800d706:	3e01      	subs	r6, #1
 800d708:	e79c      	b.n	800d644 <__multiply+0x84>
 800d70a:	bf00      	nop
 800d70c:	080a8bbe 	.word	0x080a8bbe
 800d710:	080a8bcf 	.word	0x080a8bcf

0800d714 <__pow5mult>:
 800d714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d718:	4615      	mov	r5, r2
 800d71a:	f012 0203 	ands.w	r2, r2, #3
 800d71e:	4606      	mov	r6, r0
 800d720:	460f      	mov	r7, r1
 800d722:	d007      	beq.n	800d734 <__pow5mult+0x20>
 800d724:	4c25      	ldr	r4, [pc, #148]	; (800d7bc <__pow5mult+0xa8>)
 800d726:	3a01      	subs	r2, #1
 800d728:	2300      	movs	r3, #0
 800d72a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d72e:	f7ff fe9b 	bl	800d468 <__multadd>
 800d732:	4607      	mov	r7, r0
 800d734:	10ad      	asrs	r5, r5, #2
 800d736:	d03d      	beq.n	800d7b4 <__pow5mult+0xa0>
 800d738:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d73a:	b97c      	cbnz	r4, 800d75c <__pow5mult+0x48>
 800d73c:	2010      	movs	r0, #16
 800d73e:	f7f9 fdfd 	bl	800733c <__wrap_malloc>
 800d742:	4602      	mov	r2, r0
 800d744:	6270      	str	r0, [r6, #36]	; 0x24
 800d746:	b928      	cbnz	r0, 800d754 <__pow5mult+0x40>
 800d748:	4b1d      	ldr	r3, [pc, #116]	; (800d7c0 <__pow5mult+0xac>)
 800d74a:	481e      	ldr	r0, [pc, #120]	; (800d7c4 <__pow5mult+0xb0>)
 800d74c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d750:	f7fe ff4c 	bl	800c5ec <__assert_func>
 800d754:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d758:	6004      	str	r4, [r0, #0]
 800d75a:	60c4      	str	r4, [r0, #12]
 800d75c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d760:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d764:	b94c      	cbnz	r4, 800d77a <__pow5mult+0x66>
 800d766:	f240 2171 	movw	r1, #625	; 0x271
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7ff ff12 	bl	800d594 <__i2b>
 800d770:	2300      	movs	r3, #0
 800d772:	f8c8 0008 	str.w	r0, [r8, #8]
 800d776:	4604      	mov	r4, r0
 800d778:	6003      	str	r3, [r0, #0]
 800d77a:	f04f 0900 	mov.w	r9, #0
 800d77e:	07eb      	lsls	r3, r5, #31
 800d780:	d50a      	bpl.n	800d798 <__pow5mult+0x84>
 800d782:	4639      	mov	r1, r7
 800d784:	4622      	mov	r2, r4
 800d786:	4630      	mov	r0, r6
 800d788:	f7ff ff1a 	bl	800d5c0 <__multiply>
 800d78c:	4639      	mov	r1, r7
 800d78e:	4680      	mov	r8, r0
 800d790:	4630      	mov	r0, r6
 800d792:	f7ff fe47 	bl	800d424 <_Bfree>
 800d796:	4647      	mov	r7, r8
 800d798:	106d      	asrs	r5, r5, #1
 800d79a:	d00b      	beq.n	800d7b4 <__pow5mult+0xa0>
 800d79c:	6820      	ldr	r0, [r4, #0]
 800d79e:	b938      	cbnz	r0, 800d7b0 <__pow5mult+0x9c>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f7ff ff0b 	bl	800d5c0 <__multiply>
 800d7aa:	6020      	str	r0, [r4, #0]
 800d7ac:	f8c0 9000 	str.w	r9, [r0]
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	e7e4      	b.n	800d77e <__pow5mult+0x6a>
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ba:	bf00      	nop
 800d7bc:	080a8d20 	.word	0x080a8d20
 800d7c0:	080a8aa8 	.word	0x080a8aa8
 800d7c4:	080a8bcf 	.word	0x080a8bcf

0800d7c8 <__lshift>:
 800d7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	6849      	ldr	r1, [r1, #4]
 800d7d0:	6923      	ldr	r3, [r4, #16]
 800d7d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7d6:	68a3      	ldr	r3, [r4, #8]
 800d7d8:	4607      	mov	r7, r0
 800d7da:	4691      	mov	r9, r2
 800d7dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7e0:	f108 0601 	add.w	r6, r8, #1
 800d7e4:	42b3      	cmp	r3, r6
 800d7e6:	db0b      	blt.n	800d800 <__lshift+0x38>
 800d7e8:	4638      	mov	r0, r7
 800d7ea:	f7ff fddb 	bl	800d3a4 <_Balloc>
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	b948      	cbnz	r0, 800d806 <__lshift+0x3e>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	4b2a      	ldr	r3, [pc, #168]	; (800d8a0 <__lshift+0xd8>)
 800d7f6:	482b      	ldr	r0, [pc, #172]	; (800d8a4 <__lshift+0xdc>)
 800d7f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7fc:	f7fe fef6 	bl	800c5ec <__assert_func>
 800d800:	3101      	adds	r1, #1
 800d802:	005b      	lsls	r3, r3, #1
 800d804:	e7ee      	b.n	800d7e4 <__lshift+0x1c>
 800d806:	2300      	movs	r3, #0
 800d808:	f100 0114 	add.w	r1, r0, #20
 800d80c:	f100 0210 	add.w	r2, r0, #16
 800d810:	4618      	mov	r0, r3
 800d812:	4553      	cmp	r3, sl
 800d814:	db37      	blt.n	800d886 <__lshift+0xbe>
 800d816:	6920      	ldr	r0, [r4, #16]
 800d818:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d81c:	f104 0314 	add.w	r3, r4, #20
 800d820:	f019 091f 	ands.w	r9, r9, #31
 800d824:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d828:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d82c:	d02f      	beq.n	800d88e <__lshift+0xc6>
 800d82e:	f1c9 0e20 	rsb	lr, r9, #32
 800d832:	468a      	mov	sl, r1
 800d834:	f04f 0c00 	mov.w	ip, #0
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	fa02 f209 	lsl.w	r2, r2, r9
 800d83e:	ea42 020c 	orr.w	r2, r2, ip
 800d842:	f84a 2b04 	str.w	r2, [sl], #4
 800d846:	f853 2b04 	ldr.w	r2, [r3], #4
 800d84a:	4298      	cmp	r0, r3
 800d84c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d850:	d8f2      	bhi.n	800d838 <__lshift+0x70>
 800d852:	1b03      	subs	r3, r0, r4
 800d854:	3b15      	subs	r3, #21
 800d856:	f023 0303 	bic.w	r3, r3, #3
 800d85a:	3304      	adds	r3, #4
 800d85c:	f104 0215 	add.w	r2, r4, #21
 800d860:	4290      	cmp	r0, r2
 800d862:	bf38      	it	cc
 800d864:	2304      	movcc	r3, #4
 800d866:	f841 c003 	str.w	ip, [r1, r3]
 800d86a:	f1bc 0f00 	cmp.w	ip, #0
 800d86e:	d001      	beq.n	800d874 <__lshift+0xac>
 800d870:	f108 0602 	add.w	r6, r8, #2
 800d874:	3e01      	subs	r6, #1
 800d876:	4638      	mov	r0, r7
 800d878:	612e      	str	r6, [r5, #16]
 800d87a:	4621      	mov	r1, r4
 800d87c:	f7ff fdd2 	bl	800d424 <_Bfree>
 800d880:	4628      	mov	r0, r5
 800d882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d886:	f842 0f04 	str.w	r0, [r2, #4]!
 800d88a:	3301      	adds	r3, #1
 800d88c:	e7c1      	b.n	800d812 <__lshift+0x4a>
 800d88e:	3904      	subs	r1, #4
 800d890:	f853 2b04 	ldr.w	r2, [r3], #4
 800d894:	f841 2f04 	str.w	r2, [r1, #4]!
 800d898:	4298      	cmp	r0, r3
 800d89a:	d8f9      	bhi.n	800d890 <__lshift+0xc8>
 800d89c:	e7ea      	b.n	800d874 <__lshift+0xac>
 800d89e:	bf00      	nop
 800d8a0:	080a8bbe 	.word	0x080a8bbe
 800d8a4:	080a8bcf 	.word	0x080a8bcf

0800d8a8 <__mcmp>:
 800d8a8:	b530      	push	{r4, r5, lr}
 800d8aa:	6902      	ldr	r2, [r0, #16]
 800d8ac:	690c      	ldr	r4, [r1, #16]
 800d8ae:	1b12      	subs	r2, r2, r4
 800d8b0:	d10e      	bne.n	800d8d0 <__mcmp+0x28>
 800d8b2:	f100 0314 	add.w	r3, r0, #20
 800d8b6:	3114      	adds	r1, #20
 800d8b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8c8:	42a5      	cmp	r5, r4
 800d8ca:	d003      	beq.n	800d8d4 <__mcmp+0x2c>
 800d8cc:	d305      	bcc.n	800d8da <__mcmp+0x32>
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	bd30      	pop	{r4, r5, pc}
 800d8d4:	4283      	cmp	r3, r0
 800d8d6:	d3f3      	bcc.n	800d8c0 <__mcmp+0x18>
 800d8d8:	e7fa      	b.n	800d8d0 <__mcmp+0x28>
 800d8da:	f04f 32ff 	mov.w	r2, #4294967295
 800d8de:	e7f7      	b.n	800d8d0 <__mcmp+0x28>

0800d8e0 <__mdiff>:
 800d8e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	4690      	mov	r8, r2
 800d8ee:	f7ff ffdb 	bl	800d8a8 <__mcmp>
 800d8f2:	1e05      	subs	r5, r0, #0
 800d8f4:	d110      	bne.n	800d918 <__mdiff+0x38>
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f7ff fd53 	bl	800d3a4 <_Balloc>
 800d8fe:	b930      	cbnz	r0, 800d90e <__mdiff+0x2e>
 800d900:	4b3a      	ldr	r3, [pc, #232]	; (800d9ec <__mdiff+0x10c>)
 800d902:	4602      	mov	r2, r0
 800d904:	f240 2132 	movw	r1, #562	; 0x232
 800d908:	4839      	ldr	r0, [pc, #228]	; (800d9f0 <__mdiff+0x110>)
 800d90a:	f7fe fe6f 	bl	800c5ec <__assert_func>
 800d90e:	2301      	movs	r3, #1
 800d910:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d918:	bfa4      	itt	ge
 800d91a:	4643      	movge	r3, r8
 800d91c:	46a0      	movge	r8, r4
 800d91e:	4630      	mov	r0, r6
 800d920:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d924:	bfa6      	itte	ge
 800d926:	461c      	movge	r4, r3
 800d928:	2500      	movge	r5, #0
 800d92a:	2501      	movlt	r5, #1
 800d92c:	f7ff fd3a 	bl	800d3a4 <_Balloc>
 800d930:	b920      	cbnz	r0, 800d93c <__mdiff+0x5c>
 800d932:	4b2e      	ldr	r3, [pc, #184]	; (800d9ec <__mdiff+0x10c>)
 800d934:	4602      	mov	r2, r0
 800d936:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d93a:	e7e5      	b.n	800d908 <__mdiff+0x28>
 800d93c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d940:	6926      	ldr	r6, [r4, #16]
 800d942:	60c5      	str	r5, [r0, #12]
 800d944:	f104 0914 	add.w	r9, r4, #20
 800d948:	f108 0514 	add.w	r5, r8, #20
 800d94c:	f100 0e14 	add.w	lr, r0, #20
 800d950:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d954:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d958:	f108 0210 	add.w	r2, r8, #16
 800d95c:	46f2      	mov	sl, lr
 800d95e:	2100      	movs	r1, #0
 800d960:	f859 3b04 	ldr.w	r3, [r9], #4
 800d964:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d968:	fa1f f883 	uxth.w	r8, r3
 800d96c:	fa11 f18b 	uxtah	r1, r1, fp
 800d970:	0c1b      	lsrs	r3, r3, #16
 800d972:	eba1 0808 	sub.w	r8, r1, r8
 800d976:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d97a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d97e:	fa1f f888 	uxth.w	r8, r8
 800d982:	1419      	asrs	r1, r3, #16
 800d984:	454e      	cmp	r6, r9
 800d986:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d98a:	f84a 3b04 	str.w	r3, [sl], #4
 800d98e:	d8e7      	bhi.n	800d960 <__mdiff+0x80>
 800d990:	1b33      	subs	r3, r6, r4
 800d992:	3b15      	subs	r3, #21
 800d994:	f023 0303 	bic.w	r3, r3, #3
 800d998:	3304      	adds	r3, #4
 800d99a:	3415      	adds	r4, #21
 800d99c:	42a6      	cmp	r6, r4
 800d99e:	bf38      	it	cc
 800d9a0:	2304      	movcc	r3, #4
 800d9a2:	441d      	add	r5, r3
 800d9a4:	4473      	add	r3, lr
 800d9a6:	469e      	mov	lr, r3
 800d9a8:	462e      	mov	r6, r5
 800d9aa:	4566      	cmp	r6, ip
 800d9ac:	d30e      	bcc.n	800d9cc <__mdiff+0xec>
 800d9ae:	f10c 0203 	add.w	r2, ip, #3
 800d9b2:	1b52      	subs	r2, r2, r5
 800d9b4:	f022 0203 	bic.w	r2, r2, #3
 800d9b8:	3d03      	subs	r5, #3
 800d9ba:	45ac      	cmp	ip, r5
 800d9bc:	bf38      	it	cc
 800d9be:	2200      	movcc	r2, #0
 800d9c0:	441a      	add	r2, r3
 800d9c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d9c6:	b17b      	cbz	r3, 800d9e8 <__mdiff+0x108>
 800d9c8:	6107      	str	r7, [r0, #16]
 800d9ca:	e7a3      	b.n	800d914 <__mdiff+0x34>
 800d9cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9d0:	fa11 f288 	uxtah	r2, r1, r8
 800d9d4:	1414      	asrs	r4, r2, #16
 800d9d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9da:	b292      	uxth	r2, r2
 800d9dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9e0:	f84e 2b04 	str.w	r2, [lr], #4
 800d9e4:	1421      	asrs	r1, r4, #16
 800d9e6:	e7e0      	b.n	800d9aa <__mdiff+0xca>
 800d9e8:	3f01      	subs	r7, #1
 800d9ea:	e7ea      	b.n	800d9c2 <__mdiff+0xe2>
 800d9ec:	080a8bbe 	.word	0x080a8bbe
 800d9f0:	080a8bcf 	.word	0x080a8bcf

0800d9f4 <__d2b>:
 800d9f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9f8:	4689      	mov	r9, r1
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	ec57 6b10 	vmov	r6, r7, d0
 800da00:	4690      	mov	r8, r2
 800da02:	f7ff fccf 	bl	800d3a4 <_Balloc>
 800da06:	4604      	mov	r4, r0
 800da08:	b930      	cbnz	r0, 800da18 <__d2b+0x24>
 800da0a:	4602      	mov	r2, r0
 800da0c:	4b25      	ldr	r3, [pc, #148]	; (800daa4 <__d2b+0xb0>)
 800da0e:	4826      	ldr	r0, [pc, #152]	; (800daa8 <__d2b+0xb4>)
 800da10:	f240 310a 	movw	r1, #778	; 0x30a
 800da14:	f7fe fdea 	bl	800c5ec <__assert_func>
 800da18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da20:	bb35      	cbnz	r5, 800da70 <__d2b+0x7c>
 800da22:	2e00      	cmp	r6, #0
 800da24:	9301      	str	r3, [sp, #4]
 800da26:	d028      	beq.n	800da7a <__d2b+0x86>
 800da28:	4668      	mov	r0, sp
 800da2a:	9600      	str	r6, [sp, #0]
 800da2c:	f7ff fd82 	bl	800d534 <__lo0bits>
 800da30:	9900      	ldr	r1, [sp, #0]
 800da32:	b300      	cbz	r0, 800da76 <__d2b+0x82>
 800da34:	9a01      	ldr	r2, [sp, #4]
 800da36:	f1c0 0320 	rsb	r3, r0, #32
 800da3a:	fa02 f303 	lsl.w	r3, r2, r3
 800da3e:	430b      	orrs	r3, r1
 800da40:	40c2      	lsrs	r2, r0
 800da42:	6163      	str	r3, [r4, #20]
 800da44:	9201      	str	r2, [sp, #4]
 800da46:	9b01      	ldr	r3, [sp, #4]
 800da48:	61a3      	str	r3, [r4, #24]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	bf14      	ite	ne
 800da4e:	2202      	movne	r2, #2
 800da50:	2201      	moveq	r2, #1
 800da52:	6122      	str	r2, [r4, #16]
 800da54:	b1d5      	cbz	r5, 800da8c <__d2b+0x98>
 800da56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da5a:	4405      	add	r5, r0
 800da5c:	f8c9 5000 	str.w	r5, [r9]
 800da60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da64:	f8c8 0000 	str.w	r0, [r8]
 800da68:	4620      	mov	r0, r4
 800da6a:	b003      	add	sp, #12
 800da6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da74:	e7d5      	b.n	800da22 <__d2b+0x2e>
 800da76:	6161      	str	r1, [r4, #20]
 800da78:	e7e5      	b.n	800da46 <__d2b+0x52>
 800da7a:	a801      	add	r0, sp, #4
 800da7c:	f7ff fd5a 	bl	800d534 <__lo0bits>
 800da80:	9b01      	ldr	r3, [sp, #4]
 800da82:	6163      	str	r3, [r4, #20]
 800da84:	2201      	movs	r2, #1
 800da86:	6122      	str	r2, [r4, #16]
 800da88:	3020      	adds	r0, #32
 800da8a:	e7e3      	b.n	800da54 <__d2b+0x60>
 800da8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da94:	f8c9 0000 	str.w	r0, [r9]
 800da98:	6918      	ldr	r0, [r3, #16]
 800da9a:	f7ff fd2b 	bl	800d4f4 <__hi0bits>
 800da9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800daa2:	e7df      	b.n	800da64 <__d2b+0x70>
 800daa4:	080a8bbe 	.word	0x080a8bbe
 800daa8:	080a8bcf 	.word	0x080a8bcf

0800daac <_calloc_r>:
 800daac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daae:	fba1 2402 	umull	r2, r4, r1, r2
 800dab2:	b94c      	cbnz	r4, 800dac8 <_calloc_r+0x1c>
 800dab4:	4611      	mov	r1, r2
 800dab6:	9201      	str	r2, [sp, #4]
 800dab8:	f7fe f812 	bl	800bae0 <_malloc_r>
 800dabc:	9a01      	ldr	r2, [sp, #4]
 800dabe:	4605      	mov	r5, r0
 800dac0:	b930      	cbnz	r0, 800dad0 <_calloc_r+0x24>
 800dac2:	4628      	mov	r0, r5
 800dac4:	b003      	add	sp, #12
 800dac6:	bd30      	pop	{r4, r5, pc}
 800dac8:	220c      	movs	r2, #12
 800daca:	6002      	str	r2, [r0, #0]
 800dacc:	2500      	movs	r5, #0
 800dace:	e7f8      	b.n	800dac2 <_calloc_r+0x16>
 800dad0:	4621      	mov	r1, r4
 800dad2:	f7fd ff91 	bl	800b9f8 <memset>
 800dad6:	e7f4      	b.n	800dac2 <_calloc_r+0x16>

0800dad8 <__sfputc_r>:
 800dad8:	6893      	ldr	r3, [r2, #8]
 800dada:	3b01      	subs	r3, #1
 800dadc:	2b00      	cmp	r3, #0
 800dade:	b410      	push	{r4}
 800dae0:	6093      	str	r3, [r2, #8]
 800dae2:	da08      	bge.n	800daf6 <__sfputc_r+0x1e>
 800dae4:	6994      	ldr	r4, [r2, #24]
 800dae6:	42a3      	cmp	r3, r4
 800dae8:	db01      	blt.n	800daee <__sfputc_r+0x16>
 800daea:	290a      	cmp	r1, #10
 800daec:	d103      	bne.n	800daf6 <__sfputc_r+0x1e>
 800daee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daf2:	f000 b95d 	b.w	800ddb0 <__swbuf_r>
 800daf6:	6813      	ldr	r3, [r2, #0]
 800daf8:	1c58      	adds	r0, r3, #1
 800dafa:	6010      	str	r0, [r2, #0]
 800dafc:	7019      	strb	r1, [r3, #0]
 800dafe:	4608      	mov	r0, r1
 800db00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <__sfputs_r>:
 800db06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db08:	4606      	mov	r6, r0
 800db0a:	460f      	mov	r7, r1
 800db0c:	4614      	mov	r4, r2
 800db0e:	18d5      	adds	r5, r2, r3
 800db10:	42ac      	cmp	r4, r5
 800db12:	d101      	bne.n	800db18 <__sfputs_r+0x12>
 800db14:	2000      	movs	r0, #0
 800db16:	e007      	b.n	800db28 <__sfputs_r+0x22>
 800db18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db1c:	463a      	mov	r2, r7
 800db1e:	4630      	mov	r0, r6
 800db20:	f7ff ffda 	bl	800dad8 <__sfputc_r>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d1f3      	bne.n	800db10 <__sfputs_r+0xa>
 800db28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db2c <_vfiprintf_r>:
 800db2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db30:	460d      	mov	r5, r1
 800db32:	b09d      	sub	sp, #116	; 0x74
 800db34:	4614      	mov	r4, r2
 800db36:	4698      	mov	r8, r3
 800db38:	4606      	mov	r6, r0
 800db3a:	b118      	cbz	r0, 800db44 <_vfiprintf_r+0x18>
 800db3c:	6983      	ldr	r3, [r0, #24]
 800db3e:	b90b      	cbnz	r3, 800db44 <_vfiprintf_r+0x18>
 800db40:	f7fd fe76 	bl	800b830 <__sinit>
 800db44:	4b89      	ldr	r3, [pc, #548]	; (800dd6c <_vfiprintf_r+0x240>)
 800db46:	429d      	cmp	r5, r3
 800db48:	d11b      	bne.n	800db82 <_vfiprintf_r+0x56>
 800db4a:	6875      	ldr	r5, [r6, #4]
 800db4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db4e:	07d9      	lsls	r1, r3, #31
 800db50:	d405      	bmi.n	800db5e <_vfiprintf_r+0x32>
 800db52:	89ab      	ldrh	r3, [r5, #12]
 800db54:	059a      	lsls	r2, r3, #22
 800db56:	d402      	bmi.n	800db5e <_vfiprintf_r+0x32>
 800db58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db5a:	f7fd ff2c 	bl	800b9b6 <__retarget_lock_acquire_recursive>
 800db5e:	89ab      	ldrh	r3, [r5, #12]
 800db60:	071b      	lsls	r3, r3, #28
 800db62:	d501      	bpl.n	800db68 <_vfiprintf_r+0x3c>
 800db64:	692b      	ldr	r3, [r5, #16]
 800db66:	b9eb      	cbnz	r3, 800dba4 <_vfiprintf_r+0x78>
 800db68:	4629      	mov	r1, r5
 800db6a:	4630      	mov	r0, r6
 800db6c:	f000 f972 	bl	800de54 <__swsetup_r>
 800db70:	b1c0      	cbz	r0, 800dba4 <_vfiprintf_r+0x78>
 800db72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db74:	07dc      	lsls	r4, r3, #31
 800db76:	d50e      	bpl.n	800db96 <_vfiprintf_r+0x6a>
 800db78:	f04f 30ff 	mov.w	r0, #4294967295
 800db7c:	b01d      	add	sp, #116	; 0x74
 800db7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db82:	4b7b      	ldr	r3, [pc, #492]	; (800dd70 <_vfiprintf_r+0x244>)
 800db84:	429d      	cmp	r5, r3
 800db86:	d101      	bne.n	800db8c <_vfiprintf_r+0x60>
 800db88:	68b5      	ldr	r5, [r6, #8]
 800db8a:	e7df      	b.n	800db4c <_vfiprintf_r+0x20>
 800db8c:	4b79      	ldr	r3, [pc, #484]	; (800dd74 <_vfiprintf_r+0x248>)
 800db8e:	429d      	cmp	r5, r3
 800db90:	bf08      	it	eq
 800db92:	68f5      	ldreq	r5, [r6, #12]
 800db94:	e7da      	b.n	800db4c <_vfiprintf_r+0x20>
 800db96:	89ab      	ldrh	r3, [r5, #12]
 800db98:	0598      	lsls	r0, r3, #22
 800db9a:	d4ed      	bmi.n	800db78 <_vfiprintf_r+0x4c>
 800db9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db9e:	f7fd ff0b 	bl	800b9b8 <__retarget_lock_release_recursive>
 800dba2:	e7e9      	b.n	800db78 <_vfiprintf_r+0x4c>
 800dba4:	2300      	movs	r3, #0
 800dba6:	9309      	str	r3, [sp, #36]	; 0x24
 800dba8:	2320      	movs	r3, #32
 800dbaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbae:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb2:	2330      	movs	r3, #48	; 0x30
 800dbb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dd78 <_vfiprintf_r+0x24c>
 800dbb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbbc:	f04f 0901 	mov.w	r9, #1
 800dbc0:	4623      	mov	r3, r4
 800dbc2:	469a      	mov	sl, r3
 800dbc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbc8:	b10a      	cbz	r2, 800dbce <_vfiprintf_r+0xa2>
 800dbca:	2a25      	cmp	r2, #37	; 0x25
 800dbcc:	d1f9      	bne.n	800dbc2 <_vfiprintf_r+0x96>
 800dbce:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd2:	d00b      	beq.n	800dbec <_vfiprintf_r+0xc0>
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7ff ff93 	bl	800db06 <__sfputs_r>
 800dbe0:	3001      	adds	r0, #1
 800dbe2:	f000 80aa 	beq.w	800dd3a <_vfiprintf_r+0x20e>
 800dbe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe8:	445a      	add	r2, fp
 800dbea:	9209      	str	r2, [sp, #36]	; 0x24
 800dbec:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f000 80a2 	beq.w	800dd3a <_vfiprintf_r+0x20e>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc00:	f10a 0a01 	add.w	sl, sl, #1
 800dc04:	9304      	str	r3, [sp, #16]
 800dc06:	9307      	str	r3, [sp, #28]
 800dc08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc0c:	931a      	str	r3, [sp, #104]	; 0x68
 800dc0e:	4654      	mov	r4, sl
 800dc10:	2205      	movs	r2, #5
 800dc12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc16:	4858      	ldr	r0, [pc, #352]	; (800dd78 <_vfiprintf_r+0x24c>)
 800dc18:	f7f2 fae2 	bl	80001e0 <memchr>
 800dc1c:	9a04      	ldr	r2, [sp, #16]
 800dc1e:	b9d8      	cbnz	r0, 800dc58 <_vfiprintf_r+0x12c>
 800dc20:	06d1      	lsls	r1, r2, #27
 800dc22:	bf44      	itt	mi
 800dc24:	2320      	movmi	r3, #32
 800dc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc2a:	0713      	lsls	r3, r2, #28
 800dc2c:	bf44      	itt	mi
 800dc2e:	232b      	movmi	r3, #43	; 0x2b
 800dc30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc34:	f89a 3000 	ldrb.w	r3, [sl]
 800dc38:	2b2a      	cmp	r3, #42	; 0x2a
 800dc3a:	d015      	beq.n	800dc68 <_vfiprintf_r+0x13c>
 800dc3c:	9a07      	ldr	r2, [sp, #28]
 800dc3e:	4654      	mov	r4, sl
 800dc40:	2000      	movs	r0, #0
 800dc42:	f04f 0c0a 	mov.w	ip, #10
 800dc46:	4621      	mov	r1, r4
 800dc48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc4c:	3b30      	subs	r3, #48	; 0x30
 800dc4e:	2b09      	cmp	r3, #9
 800dc50:	d94e      	bls.n	800dcf0 <_vfiprintf_r+0x1c4>
 800dc52:	b1b0      	cbz	r0, 800dc82 <_vfiprintf_r+0x156>
 800dc54:	9207      	str	r2, [sp, #28]
 800dc56:	e014      	b.n	800dc82 <_vfiprintf_r+0x156>
 800dc58:	eba0 0308 	sub.w	r3, r0, r8
 800dc5c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc60:	4313      	orrs	r3, r2
 800dc62:	9304      	str	r3, [sp, #16]
 800dc64:	46a2      	mov	sl, r4
 800dc66:	e7d2      	b.n	800dc0e <_vfiprintf_r+0xe2>
 800dc68:	9b03      	ldr	r3, [sp, #12]
 800dc6a:	1d19      	adds	r1, r3, #4
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	9103      	str	r1, [sp, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bfbb      	ittet	lt
 800dc74:	425b      	neglt	r3, r3
 800dc76:	f042 0202 	orrlt.w	r2, r2, #2
 800dc7a:	9307      	strge	r3, [sp, #28]
 800dc7c:	9307      	strlt	r3, [sp, #28]
 800dc7e:	bfb8      	it	lt
 800dc80:	9204      	strlt	r2, [sp, #16]
 800dc82:	7823      	ldrb	r3, [r4, #0]
 800dc84:	2b2e      	cmp	r3, #46	; 0x2e
 800dc86:	d10c      	bne.n	800dca2 <_vfiprintf_r+0x176>
 800dc88:	7863      	ldrb	r3, [r4, #1]
 800dc8a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc8c:	d135      	bne.n	800dcfa <_vfiprintf_r+0x1ce>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	1d1a      	adds	r2, r3, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	9203      	str	r2, [sp, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfb8      	it	lt
 800dc9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc9e:	3402      	adds	r4, #2
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd88 <_vfiprintf_r+0x25c>
 800dca6:	7821      	ldrb	r1, [r4, #0]
 800dca8:	2203      	movs	r2, #3
 800dcaa:	4650      	mov	r0, sl
 800dcac:	f7f2 fa98 	bl	80001e0 <memchr>
 800dcb0:	b140      	cbz	r0, 800dcc4 <_vfiprintf_r+0x198>
 800dcb2:	2340      	movs	r3, #64	; 0x40
 800dcb4:	eba0 000a 	sub.w	r0, r0, sl
 800dcb8:	fa03 f000 	lsl.w	r0, r3, r0
 800dcbc:	9b04      	ldr	r3, [sp, #16]
 800dcbe:	4303      	orrs	r3, r0
 800dcc0:	3401      	adds	r4, #1
 800dcc2:	9304      	str	r3, [sp, #16]
 800dcc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc8:	482c      	ldr	r0, [pc, #176]	; (800dd7c <_vfiprintf_r+0x250>)
 800dcca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcce:	2206      	movs	r2, #6
 800dcd0:	f7f2 fa86 	bl	80001e0 <memchr>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	d03f      	beq.n	800dd58 <_vfiprintf_r+0x22c>
 800dcd8:	4b29      	ldr	r3, [pc, #164]	; (800dd80 <_vfiprintf_r+0x254>)
 800dcda:	bb1b      	cbnz	r3, 800dd24 <_vfiprintf_r+0x1f8>
 800dcdc:	9b03      	ldr	r3, [sp, #12]
 800dcde:	3307      	adds	r3, #7
 800dce0:	f023 0307 	bic.w	r3, r3, #7
 800dce4:	3308      	adds	r3, #8
 800dce6:	9303      	str	r3, [sp, #12]
 800dce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcea:	443b      	add	r3, r7
 800dcec:	9309      	str	r3, [sp, #36]	; 0x24
 800dcee:	e767      	b.n	800dbc0 <_vfiprintf_r+0x94>
 800dcf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcf4:	460c      	mov	r4, r1
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	e7a5      	b.n	800dc46 <_vfiprintf_r+0x11a>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	3401      	adds	r4, #1
 800dcfe:	9305      	str	r3, [sp, #20]
 800dd00:	4619      	mov	r1, r3
 800dd02:	f04f 0c0a 	mov.w	ip, #10
 800dd06:	4620      	mov	r0, r4
 800dd08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd0c:	3a30      	subs	r2, #48	; 0x30
 800dd0e:	2a09      	cmp	r2, #9
 800dd10:	d903      	bls.n	800dd1a <_vfiprintf_r+0x1ee>
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0c5      	beq.n	800dca2 <_vfiprintf_r+0x176>
 800dd16:	9105      	str	r1, [sp, #20]
 800dd18:	e7c3      	b.n	800dca2 <_vfiprintf_r+0x176>
 800dd1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd1e:	4604      	mov	r4, r0
 800dd20:	2301      	movs	r3, #1
 800dd22:	e7f0      	b.n	800dd06 <_vfiprintf_r+0x1da>
 800dd24:	ab03      	add	r3, sp, #12
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	462a      	mov	r2, r5
 800dd2a:	4b16      	ldr	r3, [pc, #88]	; (800dd84 <_vfiprintf_r+0x258>)
 800dd2c:	a904      	add	r1, sp, #16
 800dd2e:	4630      	mov	r0, r6
 800dd30:	f7fd ffea 	bl	800bd08 <_printf_float>
 800dd34:	4607      	mov	r7, r0
 800dd36:	1c78      	adds	r0, r7, #1
 800dd38:	d1d6      	bne.n	800dce8 <_vfiprintf_r+0x1bc>
 800dd3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd3c:	07d9      	lsls	r1, r3, #31
 800dd3e:	d405      	bmi.n	800dd4c <_vfiprintf_r+0x220>
 800dd40:	89ab      	ldrh	r3, [r5, #12]
 800dd42:	059a      	lsls	r2, r3, #22
 800dd44:	d402      	bmi.n	800dd4c <_vfiprintf_r+0x220>
 800dd46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd48:	f7fd fe36 	bl	800b9b8 <__retarget_lock_release_recursive>
 800dd4c:	89ab      	ldrh	r3, [r5, #12]
 800dd4e:	065b      	lsls	r3, r3, #25
 800dd50:	f53f af12 	bmi.w	800db78 <_vfiprintf_r+0x4c>
 800dd54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd56:	e711      	b.n	800db7c <_vfiprintf_r+0x50>
 800dd58:	ab03      	add	r3, sp, #12
 800dd5a:	9300      	str	r3, [sp, #0]
 800dd5c:	462a      	mov	r2, r5
 800dd5e:	4b09      	ldr	r3, [pc, #36]	; (800dd84 <_vfiprintf_r+0x258>)
 800dd60:	a904      	add	r1, sp, #16
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7fe fa74 	bl	800c250 <_printf_i>
 800dd68:	e7e4      	b.n	800dd34 <_vfiprintf_r+0x208>
 800dd6a:	bf00      	nop
 800dd6c:	080a8a30 	.word	0x080a8a30
 800dd70:	080a8a50 	.word	0x080a8a50
 800dd74:	080a8a10 	.word	0x080a8a10
 800dd78:	080a8d2c 	.word	0x080a8d2c
 800dd7c:	080a8d36 	.word	0x080a8d36
 800dd80:	0800bd09 	.word	0x0800bd09
 800dd84:	0800db07 	.word	0x0800db07
 800dd88:	080a8d32 	.word	0x080a8d32

0800dd8c <_read_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d07      	ldr	r5, [pc, #28]	; (800ddac <_read_r+0x20>)
 800dd90:	4604      	mov	r4, r0
 800dd92:	4608      	mov	r0, r1
 800dd94:	4611      	mov	r1, r2
 800dd96:	2200      	movs	r2, #0
 800dd98:	602a      	str	r2, [r5, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f000 fec2 	bl	800eb24 <_read>
 800dda0:	1c43      	adds	r3, r0, #1
 800dda2:	d102      	bne.n	800ddaa <_read_r+0x1e>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	b103      	cbz	r3, 800ddaa <_read_r+0x1e>
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	2000249c 	.word	0x2000249c

0800ddb0 <__swbuf_r>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	460e      	mov	r6, r1
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	b118      	cbz	r0, 800ddc2 <__swbuf_r+0x12>
 800ddba:	6983      	ldr	r3, [r0, #24]
 800ddbc:	b90b      	cbnz	r3, 800ddc2 <__swbuf_r+0x12>
 800ddbe:	f7fd fd37 	bl	800b830 <__sinit>
 800ddc2:	4b21      	ldr	r3, [pc, #132]	; (800de48 <__swbuf_r+0x98>)
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	d12b      	bne.n	800de20 <__swbuf_r+0x70>
 800ddc8:	686c      	ldr	r4, [r5, #4]
 800ddca:	69a3      	ldr	r3, [r4, #24]
 800ddcc:	60a3      	str	r3, [r4, #8]
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	071a      	lsls	r2, r3, #28
 800ddd2:	d52f      	bpl.n	800de34 <__swbuf_r+0x84>
 800ddd4:	6923      	ldr	r3, [r4, #16]
 800ddd6:	b36b      	cbz	r3, 800de34 <__swbuf_r+0x84>
 800ddd8:	6923      	ldr	r3, [r4, #16]
 800ddda:	6820      	ldr	r0, [r4, #0]
 800dddc:	1ac0      	subs	r0, r0, r3
 800ddde:	6963      	ldr	r3, [r4, #20]
 800dde0:	b2f6      	uxtb	r6, r6
 800dde2:	4283      	cmp	r3, r0
 800dde4:	4637      	mov	r7, r6
 800dde6:	dc04      	bgt.n	800ddf2 <__swbuf_r+0x42>
 800dde8:	4621      	mov	r1, r4
 800ddea:	4628      	mov	r0, r5
 800ddec:	f7fd fc7a 	bl	800b6e4 <_fflush_r>
 800ddf0:	bb30      	cbnz	r0, 800de40 <__swbuf_r+0x90>
 800ddf2:	68a3      	ldr	r3, [r4, #8]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	60a3      	str	r3, [r4, #8]
 800ddf8:	6823      	ldr	r3, [r4, #0]
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	6022      	str	r2, [r4, #0]
 800ddfe:	701e      	strb	r6, [r3, #0]
 800de00:	6963      	ldr	r3, [r4, #20]
 800de02:	3001      	adds	r0, #1
 800de04:	4283      	cmp	r3, r0
 800de06:	d004      	beq.n	800de12 <__swbuf_r+0x62>
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	07db      	lsls	r3, r3, #31
 800de0c:	d506      	bpl.n	800de1c <__swbuf_r+0x6c>
 800de0e:	2e0a      	cmp	r6, #10
 800de10:	d104      	bne.n	800de1c <__swbuf_r+0x6c>
 800de12:	4621      	mov	r1, r4
 800de14:	4628      	mov	r0, r5
 800de16:	f7fd fc65 	bl	800b6e4 <_fflush_r>
 800de1a:	b988      	cbnz	r0, 800de40 <__swbuf_r+0x90>
 800de1c:	4638      	mov	r0, r7
 800de1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de20:	4b0a      	ldr	r3, [pc, #40]	; (800de4c <__swbuf_r+0x9c>)
 800de22:	429c      	cmp	r4, r3
 800de24:	d101      	bne.n	800de2a <__swbuf_r+0x7a>
 800de26:	68ac      	ldr	r4, [r5, #8]
 800de28:	e7cf      	b.n	800ddca <__swbuf_r+0x1a>
 800de2a:	4b09      	ldr	r3, [pc, #36]	; (800de50 <__swbuf_r+0xa0>)
 800de2c:	429c      	cmp	r4, r3
 800de2e:	bf08      	it	eq
 800de30:	68ec      	ldreq	r4, [r5, #12]
 800de32:	e7ca      	b.n	800ddca <__swbuf_r+0x1a>
 800de34:	4621      	mov	r1, r4
 800de36:	4628      	mov	r0, r5
 800de38:	f000 f80c 	bl	800de54 <__swsetup_r>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d0cb      	beq.n	800ddd8 <__swbuf_r+0x28>
 800de40:	f04f 37ff 	mov.w	r7, #4294967295
 800de44:	e7ea      	b.n	800de1c <__swbuf_r+0x6c>
 800de46:	bf00      	nop
 800de48:	080a8a30 	.word	0x080a8a30
 800de4c:	080a8a50 	.word	0x080a8a50
 800de50:	080a8a10 	.word	0x080a8a10

0800de54 <__swsetup_r>:
 800de54:	4b32      	ldr	r3, [pc, #200]	; (800df20 <__swsetup_r+0xcc>)
 800de56:	b570      	push	{r4, r5, r6, lr}
 800de58:	681d      	ldr	r5, [r3, #0]
 800de5a:	4606      	mov	r6, r0
 800de5c:	460c      	mov	r4, r1
 800de5e:	b125      	cbz	r5, 800de6a <__swsetup_r+0x16>
 800de60:	69ab      	ldr	r3, [r5, #24]
 800de62:	b913      	cbnz	r3, 800de6a <__swsetup_r+0x16>
 800de64:	4628      	mov	r0, r5
 800de66:	f7fd fce3 	bl	800b830 <__sinit>
 800de6a:	4b2e      	ldr	r3, [pc, #184]	; (800df24 <__swsetup_r+0xd0>)
 800de6c:	429c      	cmp	r4, r3
 800de6e:	d10f      	bne.n	800de90 <__swsetup_r+0x3c>
 800de70:	686c      	ldr	r4, [r5, #4]
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de78:	0719      	lsls	r1, r3, #28
 800de7a:	d42c      	bmi.n	800ded6 <__swsetup_r+0x82>
 800de7c:	06dd      	lsls	r5, r3, #27
 800de7e:	d411      	bmi.n	800dea4 <__swsetup_r+0x50>
 800de80:	2309      	movs	r3, #9
 800de82:	6033      	str	r3, [r6, #0]
 800de84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de88:	81a3      	strh	r3, [r4, #12]
 800de8a:	f04f 30ff 	mov.w	r0, #4294967295
 800de8e:	e03e      	b.n	800df0e <__swsetup_r+0xba>
 800de90:	4b25      	ldr	r3, [pc, #148]	; (800df28 <__swsetup_r+0xd4>)
 800de92:	429c      	cmp	r4, r3
 800de94:	d101      	bne.n	800de9a <__swsetup_r+0x46>
 800de96:	68ac      	ldr	r4, [r5, #8]
 800de98:	e7eb      	b.n	800de72 <__swsetup_r+0x1e>
 800de9a:	4b24      	ldr	r3, [pc, #144]	; (800df2c <__swsetup_r+0xd8>)
 800de9c:	429c      	cmp	r4, r3
 800de9e:	bf08      	it	eq
 800dea0:	68ec      	ldreq	r4, [r5, #12]
 800dea2:	e7e6      	b.n	800de72 <__swsetup_r+0x1e>
 800dea4:	0758      	lsls	r0, r3, #29
 800dea6:	d512      	bpl.n	800dece <__swsetup_r+0x7a>
 800dea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800deaa:	b141      	cbz	r1, 800debe <__swsetup_r+0x6a>
 800deac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800deb0:	4299      	cmp	r1, r3
 800deb2:	d002      	beq.n	800deba <__swsetup_r+0x66>
 800deb4:	4630      	mov	r0, r6
 800deb6:	f7fd fda7 	bl	800ba08 <_free_r>
 800deba:	2300      	movs	r3, #0
 800debc:	6363      	str	r3, [r4, #52]	; 0x34
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dec4:	81a3      	strh	r3, [r4, #12]
 800dec6:	2300      	movs	r3, #0
 800dec8:	6063      	str	r3, [r4, #4]
 800deca:	6923      	ldr	r3, [r4, #16]
 800decc:	6023      	str	r3, [r4, #0]
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	f043 0308 	orr.w	r3, r3, #8
 800ded4:	81a3      	strh	r3, [r4, #12]
 800ded6:	6923      	ldr	r3, [r4, #16]
 800ded8:	b94b      	cbnz	r3, 800deee <__swsetup_r+0x9a>
 800deda:	89a3      	ldrh	r3, [r4, #12]
 800dedc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dee4:	d003      	beq.n	800deee <__swsetup_r+0x9a>
 800dee6:	4621      	mov	r1, r4
 800dee8:	4630      	mov	r0, r6
 800deea:	f000 f84d 	bl	800df88 <__smakebuf_r>
 800deee:	89a0      	ldrh	r0, [r4, #12]
 800def0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800def4:	f010 0301 	ands.w	r3, r0, #1
 800def8:	d00a      	beq.n	800df10 <__swsetup_r+0xbc>
 800defa:	2300      	movs	r3, #0
 800defc:	60a3      	str	r3, [r4, #8]
 800defe:	6963      	ldr	r3, [r4, #20]
 800df00:	425b      	negs	r3, r3
 800df02:	61a3      	str	r3, [r4, #24]
 800df04:	6923      	ldr	r3, [r4, #16]
 800df06:	b943      	cbnz	r3, 800df1a <__swsetup_r+0xc6>
 800df08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df0c:	d1ba      	bne.n	800de84 <__swsetup_r+0x30>
 800df0e:	bd70      	pop	{r4, r5, r6, pc}
 800df10:	0781      	lsls	r1, r0, #30
 800df12:	bf58      	it	pl
 800df14:	6963      	ldrpl	r3, [r4, #20]
 800df16:	60a3      	str	r3, [r4, #8]
 800df18:	e7f4      	b.n	800df04 <__swsetup_r+0xb0>
 800df1a:	2000      	movs	r0, #0
 800df1c:	e7f7      	b.n	800df0e <__swsetup_r+0xba>
 800df1e:	bf00      	nop
 800df20:	20000774 	.word	0x20000774
 800df24:	080a8a30 	.word	0x080a8a30
 800df28:	080a8a50 	.word	0x080a8a50
 800df2c:	080a8a10 	.word	0x080a8a10

0800df30 <abort>:
 800df30:	b508      	push	{r3, lr}
 800df32:	2006      	movs	r0, #6
 800df34:	f000 f8a2 	bl	800e07c <raise>
 800df38:	2001      	movs	r0, #1
 800df3a:	f000 fdfb 	bl	800eb34 <_exit>

0800df3e <__swhatbuf_r>:
 800df3e:	b570      	push	{r4, r5, r6, lr}
 800df40:	460e      	mov	r6, r1
 800df42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df46:	2900      	cmp	r1, #0
 800df48:	b096      	sub	sp, #88	; 0x58
 800df4a:	4614      	mov	r4, r2
 800df4c:	461d      	mov	r5, r3
 800df4e:	da08      	bge.n	800df62 <__swhatbuf_r+0x24>
 800df50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	602a      	str	r2, [r5, #0]
 800df58:	061a      	lsls	r2, r3, #24
 800df5a:	d410      	bmi.n	800df7e <__swhatbuf_r+0x40>
 800df5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df60:	e00e      	b.n	800df80 <__swhatbuf_r+0x42>
 800df62:	466a      	mov	r2, sp
 800df64:	f000 f8b4 	bl	800e0d0 <_fstat_r>
 800df68:	2800      	cmp	r0, #0
 800df6a:	dbf1      	blt.n	800df50 <__swhatbuf_r+0x12>
 800df6c:	9a01      	ldr	r2, [sp, #4]
 800df6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df76:	425a      	negs	r2, r3
 800df78:	415a      	adcs	r2, r3
 800df7a:	602a      	str	r2, [r5, #0]
 800df7c:	e7ee      	b.n	800df5c <__swhatbuf_r+0x1e>
 800df7e:	2340      	movs	r3, #64	; 0x40
 800df80:	2000      	movs	r0, #0
 800df82:	6023      	str	r3, [r4, #0]
 800df84:	b016      	add	sp, #88	; 0x58
 800df86:	bd70      	pop	{r4, r5, r6, pc}

0800df88 <__smakebuf_r>:
 800df88:	898b      	ldrh	r3, [r1, #12]
 800df8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df8c:	079d      	lsls	r5, r3, #30
 800df8e:	4606      	mov	r6, r0
 800df90:	460c      	mov	r4, r1
 800df92:	d507      	bpl.n	800dfa4 <__smakebuf_r+0x1c>
 800df94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	6123      	str	r3, [r4, #16]
 800df9c:	2301      	movs	r3, #1
 800df9e:	6163      	str	r3, [r4, #20]
 800dfa0:	b002      	add	sp, #8
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	ab01      	add	r3, sp, #4
 800dfa6:	466a      	mov	r2, sp
 800dfa8:	f7ff ffc9 	bl	800df3e <__swhatbuf_r>
 800dfac:	9900      	ldr	r1, [sp, #0]
 800dfae:	4605      	mov	r5, r0
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f7fd fd95 	bl	800bae0 <_malloc_r>
 800dfb6:	b948      	cbnz	r0, 800dfcc <__smakebuf_r+0x44>
 800dfb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfbc:	059a      	lsls	r2, r3, #22
 800dfbe:	d4ef      	bmi.n	800dfa0 <__smakebuf_r+0x18>
 800dfc0:	f023 0303 	bic.w	r3, r3, #3
 800dfc4:	f043 0302 	orr.w	r3, r3, #2
 800dfc8:	81a3      	strh	r3, [r4, #12]
 800dfca:	e7e3      	b.n	800df94 <__smakebuf_r+0xc>
 800dfcc:	4b0d      	ldr	r3, [pc, #52]	; (800e004 <__smakebuf_r+0x7c>)
 800dfce:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	6020      	str	r0, [r4, #0]
 800dfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfd8:	81a3      	strh	r3, [r4, #12]
 800dfda:	9b00      	ldr	r3, [sp, #0]
 800dfdc:	6163      	str	r3, [r4, #20]
 800dfde:	9b01      	ldr	r3, [sp, #4]
 800dfe0:	6120      	str	r0, [r4, #16]
 800dfe2:	b15b      	cbz	r3, 800dffc <__smakebuf_r+0x74>
 800dfe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f000 f883 	bl	800e0f4 <_isatty_r>
 800dfee:	b128      	cbz	r0, 800dffc <__smakebuf_r+0x74>
 800dff0:	89a3      	ldrh	r3, [r4, #12]
 800dff2:	f023 0303 	bic.w	r3, r3, #3
 800dff6:	f043 0301 	orr.w	r3, r3, #1
 800dffa:	81a3      	strh	r3, [r4, #12]
 800dffc:	89a0      	ldrh	r0, [r4, #12]
 800dffe:	4305      	orrs	r5, r0
 800e000:	81a5      	strh	r5, [r4, #12]
 800e002:	e7cd      	b.n	800dfa0 <__smakebuf_r+0x18>
 800e004:	0800b7c9 	.word	0x0800b7c9

0800e008 <__ascii_mbtowc>:
 800e008:	b082      	sub	sp, #8
 800e00a:	b901      	cbnz	r1, 800e00e <__ascii_mbtowc+0x6>
 800e00c:	a901      	add	r1, sp, #4
 800e00e:	b142      	cbz	r2, 800e022 <__ascii_mbtowc+0x1a>
 800e010:	b14b      	cbz	r3, 800e026 <__ascii_mbtowc+0x1e>
 800e012:	7813      	ldrb	r3, [r2, #0]
 800e014:	600b      	str	r3, [r1, #0]
 800e016:	7812      	ldrb	r2, [r2, #0]
 800e018:	1e10      	subs	r0, r2, #0
 800e01a:	bf18      	it	ne
 800e01c:	2001      	movne	r0, #1
 800e01e:	b002      	add	sp, #8
 800e020:	4770      	bx	lr
 800e022:	4610      	mov	r0, r2
 800e024:	e7fb      	b.n	800e01e <__ascii_mbtowc+0x16>
 800e026:	f06f 0001 	mvn.w	r0, #1
 800e02a:	e7f8      	b.n	800e01e <__ascii_mbtowc+0x16>

0800e02c <_raise_r>:
 800e02c:	291f      	cmp	r1, #31
 800e02e:	b538      	push	{r3, r4, r5, lr}
 800e030:	4604      	mov	r4, r0
 800e032:	460d      	mov	r5, r1
 800e034:	d904      	bls.n	800e040 <_raise_r+0x14>
 800e036:	2316      	movs	r3, #22
 800e038:	6003      	str	r3, [r0, #0]
 800e03a:	f04f 30ff 	mov.w	r0, #4294967295
 800e03e:	bd38      	pop	{r3, r4, r5, pc}
 800e040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e042:	b112      	cbz	r2, 800e04a <_raise_r+0x1e>
 800e044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e048:	b94b      	cbnz	r3, 800e05e <_raise_r+0x32>
 800e04a:	4620      	mov	r0, r4
 800e04c:	f000 f830 	bl	800e0b0 <_getpid_r>
 800e050:	462a      	mov	r2, r5
 800e052:	4601      	mov	r1, r0
 800e054:	4620      	mov	r0, r4
 800e056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e05a:	f000 b817 	b.w	800e08c <_kill_r>
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d00a      	beq.n	800e078 <_raise_r+0x4c>
 800e062:	1c59      	adds	r1, r3, #1
 800e064:	d103      	bne.n	800e06e <_raise_r+0x42>
 800e066:	2316      	movs	r3, #22
 800e068:	6003      	str	r3, [r0, #0]
 800e06a:	2001      	movs	r0, #1
 800e06c:	e7e7      	b.n	800e03e <_raise_r+0x12>
 800e06e:	2400      	movs	r4, #0
 800e070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e074:	4628      	mov	r0, r5
 800e076:	4798      	blx	r3
 800e078:	2000      	movs	r0, #0
 800e07a:	e7e0      	b.n	800e03e <_raise_r+0x12>

0800e07c <raise>:
 800e07c:	4b02      	ldr	r3, [pc, #8]	; (800e088 <raise+0xc>)
 800e07e:	4601      	mov	r1, r0
 800e080:	6818      	ldr	r0, [r3, #0]
 800e082:	f7ff bfd3 	b.w	800e02c <_raise_r>
 800e086:	bf00      	nop
 800e088:	20000774 	.word	0x20000774

0800e08c <_kill_r>:
 800e08c:	b538      	push	{r3, r4, r5, lr}
 800e08e:	4d07      	ldr	r5, [pc, #28]	; (800e0ac <_kill_r+0x20>)
 800e090:	2300      	movs	r3, #0
 800e092:	4604      	mov	r4, r0
 800e094:	4608      	mov	r0, r1
 800e096:	4611      	mov	r1, r2
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	f000 fd33 	bl	800eb04 <_kill>
 800e09e:	1c43      	adds	r3, r0, #1
 800e0a0:	d102      	bne.n	800e0a8 <_kill_r+0x1c>
 800e0a2:	682b      	ldr	r3, [r5, #0]
 800e0a4:	b103      	cbz	r3, 800e0a8 <_kill_r+0x1c>
 800e0a6:	6023      	str	r3, [r4, #0]
 800e0a8:	bd38      	pop	{r3, r4, r5, pc}
 800e0aa:	bf00      	nop
 800e0ac:	2000249c 	.word	0x2000249c

0800e0b0 <_getpid_r>:
 800e0b0:	f000 bd18 	b.w	800eae4 <_getpid>

0800e0b4 <__ascii_wctomb>:
 800e0b4:	b149      	cbz	r1, 800e0ca <__ascii_wctomb+0x16>
 800e0b6:	2aff      	cmp	r2, #255	; 0xff
 800e0b8:	bf85      	ittet	hi
 800e0ba:	238a      	movhi	r3, #138	; 0x8a
 800e0bc:	6003      	strhi	r3, [r0, #0]
 800e0be:	700a      	strbls	r2, [r1, #0]
 800e0c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e0c4:	bf98      	it	ls
 800e0c6:	2001      	movls	r0, #1
 800e0c8:	4770      	bx	lr
 800e0ca:	4608      	mov	r0, r1
 800e0cc:	4770      	bx	lr
	...

0800e0d0 <_fstat_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d07      	ldr	r5, [pc, #28]	; (800e0f0 <_fstat_r+0x20>)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	4608      	mov	r0, r1
 800e0da:	4611      	mov	r1, r2
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	f000 fcf9 	bl	800ead4 <_fstat>
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	d102      	bne.n	800e0ec <_fstat_r+0x1c>
 800e0e6:	682b      	ldr	r3, [r5, #0]
 800e0e8:	b103      	cbz	r3, 800e0ec <_fstat_r+0x1c>
 800e0ea:	6023      	str	r3, [r4, #0]
 800e0ec:	bd38      	pop	{r3, r4, r5, pc}
 800e0ee:	bf00      	nop
 800e0f0:	2000249c 	.word	0x2000249c

0800e0f4 <_isatty_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	4d06      	ldr	r5, [pc, #24]	; (800e110 <_isatty_r+0x1c>)
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	4608      	mov	r0, r1
 800e0fe:	602b      	str	r3, [r5, #0]
 800e100:	f000 fcf8 	bl	800eaf4 <_isatty>
 800e104:	1c43      	adds	r3, r0, #1
 800e106:	d102      	bne.n	800e10e <_isatty_r+0x1a>
 800e108:	682b      	ldr	r3, [r5, #0]
 800e10a:	b103      	cbz	r3, 800e10e <_isatty_r+0x1a>
 800e10c:	6023      	str	r3, [r4, #0]
 800e10e:	bd38      	pop	{r3, r4, r5, pc}
 800e110:	2000249c 	.word	0x2000249c

0800e114 <fabsf>:
 800e114:	ee10 3a10 	vmov	r3, s0
 800e118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e11c:	ee00 3a10 	vmov	s0, r3
 800e120:	4770      	bx	lr
	...

0800e124 <expf>:
 800e124:	b508      	push	{r3, lr}
 800e126:	ed2d 8b02 	vpush	{d8}
 800e12a:	eef0 8a40 	vmov.f32	s17, s0
 800e12e:	f000 f887 	bl	800e240 <__ieee754_expf>
 800e132:	eeb0 8a40 	vmov.f32	s16, s0
 800e136:	eeb0 0a68 	vmov.f32	s0, s17
 800e13a:	f000 fc43 	bl	800e9c4 <finitef>
 800e13e:	b160      	cbz	r0, 800e15a <expf+0x36>
 800e140:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e180 <expf+0x5c>
 800e144:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14c:	dd0a      	ble.n	800e164 <expf+0x40>
 800e14e:	f7fd fa3d 	bl	800b5cc <__errno>
 800e152:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800e184 <expf+0x60>
 800e156:	2322      	movs	r3, #34	; 0x22
 800e158:	6003      	str	r3, [r0, #0]
 800e15a:	eeb0 0a48 	vmov.f32	s0, s16
 800e15e:	ecbd 8b02 	vpop	{d8}
 800e162:	bd08      	pop	{r3, pc}
 800e164:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e188 <expf+0x64>
 800e168:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e170:	d5f3      	bpl.n	800e15a <expf+0x36>
 800e172:	f7fd fa2b 	bl	800b5cc <__errno>
 800e176:	2322      	movs	r3, #34	; 0x22
 800e178:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800e18c <expf+0x68>
 800e17c:	6003      	str	r3, [r0, #0]
 800e17e:	e7ec      	b.n	800e15a <expf+0x36>
 800e180:	42b17180 	.word	0x42b17180
 800e184:	7f800000 	.word	0x7f800000
 800e188:	c2cff1b5 	.word	0xc2cff1b5
 800e18c:	00000000 	.word	0x00000000

0800e190 <powf>:
 800e190:	b508      	push	{r3, lr}
 800e192:	ed2d 8b04 	vpush	{d8-d9}
 800e196:	eeb0 8a60 	vmov.f32	s16, s1
 800e19a:	eeb0 9a40 	vmov.f32	s18, s0
 800e19e:	f000 f91d 	bl	800e3dc <__ieee754_powf>
 800e1a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1aa:	eef0 8a40 	vmov.f32	s17, s0
 800e1ae:	d63e      	bvs.n	800e22e <powf+0x9e>
 800e1b0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b8:	d112      	bne.n	800e1e0 <powf+0x50>
 800e1ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c2:	d039      	beq.n	800e238 <powf+0xa8>
 800e1c4:	eeb0 0a48 	vmov.f32	s0, s16
 800e1c8:	f000 fbfc 	bl	800e9c4 <finitef>
 800e1cc:	b378      	cbz	r0, 800e22e <powf+0x9e>
 800e1ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d6:	d52a      	bpl.n	800e22e <powf+0x9e>
 800e1d8:	f7fd f9f8 	bl	800b5cc <__errno>
 800e1dc:	2322      	movs	r3, #34	; 0x22
 800e1de:	e014      	b.n	800e20a <powf+0x7a>
 800e1e0:	f000 fbf0 	bl	800e9c4 <finitef>
 800e1e4:	b998      	cbnz	r0, 800e20e <powf+0x7e>
 800e1e6:	eeb0 0a49 	vmov.f32	s0, s18
 800e1ea:	f000 fbeb 	bl	800e9c4 <finitef>
 800e1ee:	b170      	cbz	r0, 800e20e <powf+0x7e>
 800e1f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e1f4:	f000 fbe6 	bl	800e9c4 <finitef>
 800e1f8:	b148      	cbz	r0, 800e20e <powf+0x7e>
 800e1fa:	eef4 8a68 	vcmp.f32	s17, s17
 800e1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e202:	d7e9      	bvc.n	800e1d8 <powf+0x48>
 800e204:	f7fd f9e2 	bl	800b5cc <__errno>
 800e208:	2321      	movs	r3, #33	; 0x21
 800e20a:	6003      	str	r3, [r0, #0]
 800e20c:	e00f      	b.n	800e22e <powf+0x9e>
 800e20e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e216:	d10a      	bne.n	800e22e <powf+0x9e>
 800e218:	eeb0 0a49 	vmov.f32	s0, s18
 800e21c:	f000 fbd2 	bl	800e9c4 <finitef>
 800e220:	b128      	cbz	r0, 800e22e <powf+0x9e>
 800e222:	eeb0 0a48 	vmov.f32	s0, s16
 800e226:	f000 fbcd 	bl	800e9c4 <finitef>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d1d4      	bne.n	800e1d8 <powf+0x48>
 800e22e:	eeb0 0a68 	vmov.f32	s0, s17
 800e232:	ecbd 8b04 	vpop	{d8-d9}
 800e236:	bd08      	pop	{r3, pc}
 800e238:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e23c:	e7f7      	b.n	800e22e <powf+0x9e>
	...

0800e240 <__ieee754_expf>:
 800e240:	ee10 2a10 	vmov	r2, s0
 800e244:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e248:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e24c:	d902      	bls.n	800e254 <__ieee754_expf+0x14>
 800e24e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e252:	4770      	bx	lr
 800e254:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800e258:	d106      	bne.n	800e268 <__ieee754_expf+0x28>
 800e25a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800e394 <__ieee754_expf+0x154>
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bf18      	it	ne
 800e262:	eeb0 0a67 	vmovne.f32	s0, s15
 800e266:	4770      	bx	lr
 800e268:	484b      	ldr	r0, [pc, #300]	; (800e398 <__ieee754_expf+0x158>)
 800e26a:	4282      	cmp	r2, r0
 800e26c:	dd02      	ble.n	800e274 <__ieee754_expf+0x34>
 800e26e:	2000      	movs	r0, #0
 800e270:	f000 bba2 	b.w	800e9b8 <__math_oflowf>
 800e274:	2a00      	cmp	r2, #0
 800e276:	da05      	bge.n	800e284 <__ieee754_expf+0x44>
 800e278:	4a48      	ldr	r2, [pc, #288]	; (800e39c <__ieee754_expf+0x15c>)
 800e27a:	4291      	cmp	r1, r2
 800e27c:	d902      	bls.n	800e284 <__ieee754_expf+0x44>
 800e27e:	2000      	movs	r0, #0
 800e280:	f000 bb94 	b.w	800e9ac <__math_uflowf>
 800e284:	4a46      	ldr	r2, [pc, #280]	; (800e3a0 <__ieee754_expf+0x160>)
 800e286:	4291      	cmp	r1, r2
 800e288:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e28c:	d952      	bls.n	800e334 <__ieee754_expf+0xf4>
 800e28e:	4a45      	ldr	r2, [pc, #276]	; (800e3a4 <__ieee754_expf+0x164>)
 800e290:	4291      	cmp	r1, r2
 800e292:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e296:	d834      	bhi.n	800e302 <__ieee754_expf+0xc2>
 800e298:	4943      	ldr	r1, [pc, #268]	; (800e3a8 <__ieee754_expf+0x168>)
 800e29a:	4411      	add	r1, r2
 800e29c:	ed91 7a00 	vldr	s14, [r1]
 800e2a0:	4942      	ldr	r1, [pc, #264]	; (800e3ac <__ieee754_expf+0x16c>)
 800e2a2:	440a      	add	r2, r1
 800e2a4:	edd2 7a00 	vldr	s15, [r2]
 800e2a8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800e2ac:	f1c3 0201 	rsb	r2, r3, #1
 800e2b0:	1ad2      	subs	r2, r2, r3
 800e2b2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800e2b6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800e2ba:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800e3b0 <__ieee754_expf+0x170>
 800e2be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e3b4 <__ieee754_expf+0x174>
 800e2c2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800e2c6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800e3b8 <__ieee754_expf+0x178>
 800e2ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 800e2ce:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e3bc <__ieee754_expf+0x17c>
 800e2d2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800e2d6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800e3c0 <__ieee754_expf+0x180>
 800e2da:	eea6 5a86 	vfma.f32	s10, s13, s12
 800e2de:	eef0 6a40 	vmov.f32	s13, s0
 800e2e2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800e2e6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e2ea:	ee20 5a26 	vmul.f32	s10, s0, s13
 800e2ee:	bb92      	cbnz	r2, 800e356 <__ieee754_expf+0x116>
 800e2f0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e2f4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800e2f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e2fc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e300:	4770      	bx	lr
 800e302:	4b30      	ldr	r3, [pc, #192]	; (800e3c4 <__ieee754_expf+0x184>)
 800e304:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e3c8 <__ieee754_expf+0x188>
 800e308:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e3cc <__ieee754_expf+0x18c>
 800e30c:	4413      	add	r3, r2
 800e30e:	edd3 7a00 	vldr	s15, [r3]
 800e312:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e316:	eeb0 7a40 	vmov.f32	s14, s0
 800e31a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e31e:	ee17 2a90 	vmov	r2, s15
 800e322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e326:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e32a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e3d0 <__ieee754_expf+0x190>
 800e32e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e332:	e7be      	b.n	800e2b2 <__ieee754_expf+0x72>
 800e334:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800e338:	d20b      	bcs.n	800e352 <__ieee754_expf+0x112>
 800e33a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e3d4 <__ieee754_expf+0x194>
 800e33e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800e342:	eef4 6ae5 	vcmpe.f32	s13, s11
 800e346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34a:	dd02      	ble.n	800e352 <__ieee754_expf+0x112>
 800e34c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800e350:	4770      	bx	lr
 800e352:	2200      	movs	r2, #0
 800e354:	e7af      	b.n	800e2b6 <__ieee754_expf+0x76>
 800e356:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e35a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800e35e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800e362:	bfb8      	it	lt
 800e364:	3264      	addlt	r2, #100	; 0x64
 800e366:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e36a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800e36e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800e372:	ee17 3a90 	vmov	r3, s15
 800e376:	bfab      	itete	ge
 800e378:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800e37c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800e380:	ee00 3a10 	vmovge	s0, r3
 800e384:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800e3d8 <__ieee754_expf+0x198>
 800e388:	bfbc      	itt	lt
 800e38a:	ee00 3a10 	vmovlt	s0, r3
 800e38e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800e392:	4770      	bx	lr
 800e394:	00000000 	.word	0x00000000
 800e398:	42b17217 	.word	0x42b17217
 800e39c:	42cff1b5 	.word	0x42cff1b5
 800e3a0:	3eb17218 	.word	0x3eb17218
 800e3a4:	3f851591 	.word	0x3f851591
 800e3a8:	080a8e50 	.word	0x080a8e50
 800e3ac:	080a8e58 	.word	0x080a8e58
 800e3b0:	3331bb4c 	.word	0x3331bb4c
 800e3b4:	b5ddea0e 	.word	0xb5ddea0e
 800e3b8:	388ab355 	.word	0x388ab355
 800e3bc:	bb360b61 	.word	0xbb360b61
 800e3c0:	3e2aaaab 	.word	0x3e2aaaab
 800e3c4:	080a8e48 	.word	0x080a8e48
 800e3c8:	3fb8aa3b 	.word	0x3fb8aa3b
 800e3cc:	3f317180 	.word	0x3f317180
 800e3d0:	3717f7d1 	.word	0x3717f7d1
 800e3d4:	7149f2ca 	.word	0x7149f2ca
 800e3d8:	0d800000 	.word	0x0d800000

0800e3dc <__ieee754_powf>:
 800e3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e0:	ee10 4a90 	vmov	r4, s1
 800e3e4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800e3e8:	ed2d 8b02 	vpush	{d8}
 800e3ec:	ee10 6a10 	vmov	r6, s0
 800e3f0:	eeb0 8a40 	vmov.f32	s16, s0
 800e3f4:	eef0 8a60 	vmov.f32	s17, s1
 800e3f8:	d10c      	bne.n	800e414 <__ieee754_powf+0x38>
 800e3fa:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800e3fe:	0076      	lsls	r6, r6, #1
 800e400:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800e404:	f240 8296 	bls.w	800e934 <__ieee754_powf+0x558>
 800e408:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e40c:	ecbd 8b02 	vpop	{d8}
 800e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e414:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e418:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e41c:	dcf4      	bgt.n	800e408 <__ieee754_powf+0x2c>
 800e41e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e422:	dd08      	ble.n	800e436 <__ieee754_powf+0x5a>
 800e424:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800e428:	d1ee      	bne.n	800e408 <__ieee754_powf+0x2c>
 800e42a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800e42e:	0064      	lsls	r4, r4, #1
 800e430:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800e434:	e7e6      	b.n	800e404 <__ieee754_powf+0x28>
 800e436:	2e00      	cmp	r6, #0
 800e438:	da20      	bge.n	800e47c <__ieee754_powf+0xa0>
 800e43a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800e43e:	da2d      	bge.n	800e49c <__ieee754_powf+0xc0>
 800e440:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e444:	f2c0 827f 	blt.w	800e946 <__ieee754_powf+0x56a>
 800e448:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800e44c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e450:	fa48 f703 	asr.w	r7, r8, r3
 800e454:	fa07 f303 	lsl.w	r3, r7, r3
 800e458:	4543      	cmp	r3, r8
 800e45a:	f040 8274 	bne.w	800e946 <__ieee754_powf+0x56a>
 800e45e:	f007 0701 	and.w	r7, r7, #1
 800e462:	f1c7 0702 	rsb	r7, r7, #2
 800e466:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e46a:	d11f      	bne.n	800e4ac <__ieee754_powf+0xd0>
 800e46c:	2c00      	cmp	r4, #0
 800e46e:	f280 8267 	bge.w	800e940 <__ieee754_powf+0x564>
 800e472:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e476:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e47a:	e7c7      	b.n	800e40c <__ieee754_powf+0x30>
 800e47c:	2700      	movs	r7, #0
 800e47e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e482:	d1f0      	bne.n	800e466 <__ieee754_powf+0x8a>
 800e484:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800e488:	f000 8254 	beq.w	800e934 <__ieee754_powf+0x558>
 800e48c:	dd08      	ble.n	800e4a0 <__ieee754_powf+0xc4>
 800e48e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800e798 <__ieee754_powf+0x3bc>
 800e492:	2c00      	cmp	r4, #0
 800e494:	bfa8      	it	ge
 800e496:	eeb0 0a68 	vmovge.f32	s0, s17
 800e49a:	e7b7      	b.n	800e40c <__ieee754_powf+0x30>
 800e49c:	2702      	movs	r7, #2
 800e49e:	e7ee      	b.n	800e47e <__ieee754_powf+0xa2>
 800e4a0:	2c00      	cmp	r4, #0
 800e4a2:	f280 824a 	bge.w	800e93a <__ieee754_powf+0x55e>
 800e4a6:	eeb1 0a68 	vneg.f32	s0, s17
 800e4aa:	e7af      	b.n	800e40c <__ieee754_powf+0x30>
 800e4ac:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e4b0:	d102      	bne.n	800e4b8 <__ieee754_powf+0xdc>
 800e4b2:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e4b6:	e7a9      	b.n	800e40c <__ieee754_powf+0x30>
 800e4b8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e4bc:	eeb0 0a48 	vmov.f32	s0, s16
 800e4c0:	d107      	bne.n	800e4d2 <__ieee754_powf+0xf6>
 800e4c2:	2e00      	cmp	r6, #0
 800e4c4:	db05      	blt.n	800e4d2 <__ieee754_powf+0xf6>
 800e4c6:	ecbd 8b02 	vpop	{d8}
 800e4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ce:	f000 ba53 	b.w	800e978 <__ieee754_sqrtf>
 800e4d2:	f7ff fe1f 	bl	800e114 <fabsf>
 800e4d6:	b125      	cbz	r5, 800e4e2 <__ieee754_powf+0x106>
 800e4d8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800e4dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e4e0:	d116      	bne.n	800e510 <__ieee754_powf+0x134>
 800e4e2:	2c00      	cmp	r4, #0
 800e4e4:	bfbc      	itt	lt
 800e4e6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e4ea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e4ee:	2e00      	cmp	r6, #0
 800e4f0:	da8c      	bge.n	800e40c <__ieee754_powf+0x30>
 800e4f2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800e4f6:	ea55 0307 	orrs.w	r3, r5, r7
 800e4fa:	d104      	bne.n	800e506 <__ieee754_powf+0x12a>
 800e4fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e500:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e504:	e782      	b.n	800e40c <__ieee754_powf+0x30>
 800e506:	2f01      	cmp	r7, #1
 800e508:	d180      	bne.n	800e40c <__ieee754_powf+0x30>
 800e50a:	eeb1 0a40 	vneg.f32	s0, s0
 800e50e:	e77d      	b.n	800e40c <__ieee754_powf+0x30>
 800e510:	0ff0      	lsrs	r0, r6, #31
 800e512:	3801      	subs	r0, #1
 800e514:	ea57 0300 	orrs.w	r3, r7, r0
 800e518:	d104      	bne.n	800e524 <__ieee754_powf+0x148>
 800e51a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e51e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e522:	e773      	b.n	800e40c <__ieee754_powf+0x30>
 800e524:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800e528:	dd74      	ble.n	800e614 <__ieee754_powf+0x238>
 800e52a:	4b9c      	ldr	r3, [pc, #624]	; (800e79c <__ieee754_powf+0x3c0>)
 800e52c:	429d      	cmp	r5, r3
 800e52e:	dc08      	bgt.n	800e542 <__ieee754_powf+0x166>
 800e530:	2c00      	cmp	r4, #0
 800e532:	da0b      	bge.n	800e54c <__ieee754_powf+0x170>
 800e534:	2000      	movs	r0, #0
 800e536:	ecbd 8b02 	vpop	{d8}
 800e53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e53e:	f000 ba3b 	b.w	800e9b8 <__math_oflowf>
 800e542:	4b97      	ldr	r3, [pc, #604]	; (800e7a0 <__ieee754_powf+0x3c4>)
 800e544:	429d      	cmp	r5, r3
 800e546:	dd08      	ble.n	800e55a <__ieee754_powf+0x17e>
 800e548:	2c00      	cmp	r4, #0
 800e54a:	dcf3      	bgt.n	800e534 <__ieee754_powf+0x158>
 800e54c:	2000      	movs	r0, #0
 800e54e:	ecbd 8b02 	vpop	{d8}
 800e552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e556:	f000 ba29 	b.w	800e9ac <__math_uflowf>
 800e55a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e55e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e562:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e7a4 <__ieee754_powf+0x3c8>
 800e566:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e56a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e56e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e572:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e576:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e57e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e7a8 <__ieee754_powf+0x3cc>
 800e582:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e586:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800e7ac <__ieee754_powf+0x3d0>
 800e58a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e58e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800e7b0 <__ieee754_powf+0x3d4>
 800e592:	eef0 6a67 	vmov.f32	s13, s15
 800e596:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e59a:	ee16 3a90 	vmov	r3, s13
 800e59e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e5a2:	f023 030f 	bic.w	r3, r3, #15
 800e5a6:	ee00 3a90 	vmov	s1, r3
 800e5aa:	eee0 0a47 	vfms.f32	s1, s0, s14
 800e5ae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e5b2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800e5b6:	f024 040f 	bic.w	r4, r4, #15
 800e5ba:	ee07 4a10 	vmov	s14, r4
 800e5be:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e5c2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e5c6:	ee07 3a90 	vmov	s15, r3
 800e5ca:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e5ce:	3f01      	subs	r7, #1
 800e5d0:	ea57 0200 	orrs.w	r2, r7, r0
 800e5d4:	ee07 4a10 	vmov	s14, r4
 800e5d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e5e0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e5e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e5e8:	ee17 4a10 	vmov	r4, s14
 800e5ec:	bf08      	it	eq
 800e5ee:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e5f2:	2c00      	cmp	r4, #0
 800e5f4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e5f8:	f340 817e 	ble.w	800e8f8 <__ieee754_powf+0x51c>
 800e5fc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e600:	f340 80f8 	ble.w	800e7f4 <__ieee754_powf+0x418>
 800e604:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e60c:	bf4c      	ite	mi
 800e60e:	2001      	movmi	r0, #1
 800e610:	2000      	movpl	r0, #0
 800e612:	e790      	b.n	800e536 <__ieee754_powf+0x15a>
 800e614:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800e618:	bf01      	itttt	eq
 800e61a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800e7b4 <__ieee754_powf+0x3d8>
 800e61e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e622:	f06f 0217 	mvneq.w	r2, #23
 800e626:	ee17 5a90 	vmoveq	r5, s15
 800e62a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e62e:	bf18      	it	ne
 800e630:	2200      	movne	r2, #0
 800e632:	3b7f      	subs	r3, #127	; 0x7f
 800e634:	4413      	add	r3, r2
 800e636:	4a60      	ldr	r2, [pc, #384]	; (800e7b8 <__ieee754_powf+0x3dc>)
 800e638:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800e63c:	4295      	cmp	r5, r2
 800e63e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800e642:	dd06      	ble.n	800e652 <__ieee754_powf+0x276>
 800e644:	4a5d      	ldr	r2, [pc, #372]	; (800e7bc <__ieee754_powf+0x3e0>)
 800e646:	4295      	cmp	r5, r2
 800e648:	f340 80a4 	ble.w	800e794 <__ieee754_powf+0x3b8>
 800e64c:	3301      	adds	r3, #1
 800e64e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e652:	2500      	movs	r5, #0
 800e654:	4a5a      	ldr	r2, [pc, #360]	; (800e7c0 <__ieee754_powf+0x3e4>)
 800e656:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e65a:	ee07 1a90 	vmov	s15, r1
 800e65e:	ed92 7a00 	vldr	s14, [r2]
 800e662:	4a58      	ldr	r2, [pc, #352]	; (800e7c4 <__ieee754_powf+0x3e8>)
 800e664:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e668:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e66c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e670:	1049      	asrs	r1, r1, #1
 800e672:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e676:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e67a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800e67e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800e682:	ee06 1a10 	vmov	s12, r1
 800e686:	ee65 4a26 	vmul.f32	s9, s10, s13
 800e68a:	ee36 7a47 	vsub.f32	s14, s12, s14
 800e68e:	ee14 6a90 	vmov	r6, s9
 800e692:	4016      	ands	r6, r2
 800e694:	ee05 6a90 	vmov	s11, r6
 800e698:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800e69c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6a0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e7c8 <__ieee754_powf+0x3ec>
 800e6a4:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800e6a8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e6ac:	ee25 6a26 	vmul.f32	s12, s10, s13
 800e6b0:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e7cc <__ieee754_powf+0x3f0>
 800e6b4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e6b8:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e7d0 <__ieee754_powf+0x3f4>
 800e6bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e7a4 <__ieee754_powf+0x3c8>
 800e6c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6c8:	eddf 6a42 	vldr	s13, [pc, #264]	; 800e7d4 <__ieee754_powf+0x3f8>
 800e6cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6d0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e7d8 <__ieee754_powf+0x3fc>
 800e6d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6d8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800e6dc:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800e6e0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e6e4:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e6e8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800e6ec:	eef0 7a45 	vmov.f32	s15, s10
 800e6f0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800e6f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6f8:	ee17 1a90 	vmov	r1, s15
 800e6fc:	4011      	ands	r1, r2
 800e6fe:	ee07 1a90 	vmov	s15, r1
 800e702:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800e706:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800e70a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e70e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e712:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e716:	eeb0 6a47 	vmov.f32	s12, s14
 800e71a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e71e:	ee16 1a10 	vmov	r1, s12
 800e722:	4011      	ands	r1, r2
 800e724:	ee06 1a90 	vmov	s13, r1
 800e728:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800e72c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e7dc <__ieee754_powf+0x400>
 800e730:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800e7e0 <__ieee754_powf+0x404>
 800e734:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e738:	ee06 1a10 	vmov	s12, r1
 800e73c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e740:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e7e4 <__ieee754_powf+0x408>
 800e744:	4928      	ldr	r1, [pc, #160]	; (800e7e8 <__ieee754_powf+0x40c>)
 800e746:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e74a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800e74e:	edd1 7a00 	vldr	s15, [r1]
 800e752:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e756:	ee07 3a90 	vmov	s15, r3
 800e75a:	4b24      	ldr	r3, [pc, #144]	; (800e7ec <__ieee754_powf+0x410>)
 800e75c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e760:	eef0 7a47 	vmov.f32	s15, s14
 800e764:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e768:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e76c:	edd5 0a00 	vldr	s1, [r5]
 800e770:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e778:	ee17 3a90 	vmov	r3, s15
 800e77c:	4013      	ands	r3, r2
 800e77e:	ee07 3a90 	vmov	s15, r3
 800e782:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e786:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e78a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e78e:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e792:	e70e      	b.n	800e5b2 <__ieee754_powf+0x1d6>
 800e794:	2501      	movs	r5, #1
 800e796:	e75d      	b.n	800e654 <__ieee754_powf+0x278>
 800e798:	00000000 	.word	0x00000000
 800e79c:	3f7ffff3 	.word	0x3f7ffff3
 800e7a0:	3f800007 	.word	0x3f800007
 800e7a4:	3eaaaaab 	.word	0x3eaaaaab
 800e7a8:	3fb8aa3b 	.word	0x3fb8aa3b
 800e7ac:	36eca570 	.word	0x36eca570
 800e7b0:	3fb8aa00 	.word	0x3fb8aa00
 800e7b4:	4b800000 	.word	0x4b800000
 800e7b8:	001cc471 	.word	0x001cc471
 800e7bc:	005db3d6 	.word	0x005db3d6
 800e7c0:	080a8e60 	.word	0x080a8e60
 800e7c4:	fffff000 	.word	0xfffff000
 800e7c8:	3e6c3255 	.word	0x3e6c3255
 800e7cc:	3e53f142 	.word	0x3e53f142
 800e7d0:	3e8ba305 	.word	0x3e8ba305
 800e7d4:	3edb6db7 	.word	0x3edb6db7
 800e7d8:	3f19999a 	.word	0x3f19999a
 800e7dc:	3f76384f 	.word	0x3f76384f
 800e7e0:	3f763800 	.word	0x3f763800
 800e7e4:	369dc3a0 	.word	0x369dc3a0
 800e7e8:	080a8e70 	.word	0x080a8e70
 800e7ec:	080a8e68 	.word	0x080a8e68
 800e7f0:	3338aa3c 	.word	0x3338aa3c
 800e7f4:	f040 8095 	bne.w	800e922 <__ieee754_powf+0x546>
 800e7f8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e7f0 <__ieee754_powf+0x414>
 800e7fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e800:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e804:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80c:	f73f aefa 	bgt.w	800e604 <__ieee754_powf+0x228>
 800e810:	15db      	asrs	r3, r3, #23
 800e812:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e816:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e81a:	4103      	asrs	r3, r0
 800e81c:	4423      	add	r3, r4
 800e81e:	494b      	ldr	r1, [pc, #300]	; (800e94c <__ieee754_powf+0x570>)
 800e820:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e824:	3a7f      	subs	r2, #127	; 0x7f
 800e826:	4111      	asrs	r1, r2
 800e828:	ea23 0101 	bic.w	r1, r3, r1
 800e82c:	ee07 1a10 	vmov	s14, r1
 800e830:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e838:	f1c2 0217 	rsb	r2, r2, #23
 800e83c:	4110      	asrs	r0, r2
 800e83e:	2c00      	cmp	r4, #0
 800e840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e844:	bfb8      	it	lt
 800e846:	4240      	neglt	r0, r0
 800e848:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e84c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e950 <__ieee754_powf+0x574>
 800e850:	eddf 6a40 	vldr	s13, [pc, #256]	; 800e954 <__ieee754_powf+0x578>
 800e854:	ee17 3a10 	vmov	r3, s14
 800e858:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e85c:	f023 030f 	bic.w	r3, r3, #15
 800e860:	ee07 3a10 	vmov	s14, r3
 800e864:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e868:	ee27 0a00 	vmul.f32	s0, s14, s0
 800e86c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e870:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e958 <__ieee754_powf+0x57c>
 800e874:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800e878:	eef0 7a40 	vmov.f32	s15, s0
 800e87c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e880:	eeb0 6a67 	vmov.f32	s12, s15
 800e884:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e888:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e88c:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e890:	eddf 6a32 	vldr	s13, [pc, #200]	; 800e95c <__ieee754_powf+0x580>
 800e894:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800e960 <__ieee754_powf+0x584>
 800e898:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e89c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800e964 <__ieee754_powf+0x588>
 800e8a0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e8a4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e968 <__ieee754_powf+0x58c>
 800e8a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e8ac:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e96c <__ieee754_powf+0x590>
 800e8b0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e8b4:	eef0 6a67 	vmov.f32	s13, s15
 800e8b8:	eee6 6a47 	vfms.f32	s13, s12, s14
 800e8bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e8c0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800e8c4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800e8c8:	eea7 0a80 	vfma.f32	s0, s15, s0
 800e8cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e8d0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e8d4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e8d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e8dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e8e0:	ee10 3a10 	vmov	r3, s0
 800e8e4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e8e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e8ec:	da1f      	bge.n	800e92e <__ieee754_powf+0x552>
 800e8ee:	f000 f877 	bl	800e9e0 <scalbnf>
 800e8f2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e8f6:	e589      	b.n	800e40c <__ieee754_powf+0x30>
 800e8f8:	4a1d      	ldr	r2, [pc, #116]	; (800e970 <__ieee754_powf+0x594>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	dd07      	ble.n	800e90e <__ieee754_powf+0x532>
 800e8fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e906:	bf4c      	ite	mi
 800e908:	2001      	movmi	r0, #1
 800e90a:	2000      	movpl	r0, #0
 800e90c:	e61f      	b.n	800e54e <__ieee754_powf+0x172>
 800e90e:	d108      	bne.n	800e922 <__ieee754_powf+0x546>
 800e910:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e914:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91c:	f6ff af78 	blt.w	800e810 <__ieee754_powf+0x434>
 800e920:	e7ed      	b.n	800e8fe <__ieee754_powf+0x522>
 800e922:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e926:	f73f af73 	bgt.w	800e810 <__ieee754_powf+0x434>
 800e92a:	2000      	movs	r0, #0
 800e92c:	e78c      	b.n	800e848 <__ieee754_powf+0x46c>
 800e92e:	ee00 3a10 	vmov	s0, r3
 800e932:	e7de      	b.n	800e8f2 <__ieee754_powf+0x516>
 800e934:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e938:	e568      	b.n	800e40c <__ieee754_powf+0x30>
 800e93a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e974 <__ieee754_powf+0x598>
 800e93e:	e565      	b.n	800e40c <__ieee754_powf+0x30>
 800e940:	eeb0 0a48 	vmov.f32	s0, s16
 800e944:	e562      	b.n	800e40c <__ieee754_powf+0x30>
 800e946:	2700      	movs	r7, #0
 800e948:	e58d      	b.n	800e466 <__ieee754_powf+0x8a>
 800e94a:	bf00      	nop
 800e94c:	007fffff 	.word	0x007fffff
 800e950:	35bfbe8c 	.word	0x35bfbe8c
 800e954:	3f317200 	.word	0x3f317200
 800e958:	3f317218 	.word	0x3f317218
 800e95c:	b5ddea0e 	.word	0xb5ddea0e
 800e960:	3331bb4c 	.word	0x3331bb4c
 800e964:	388ab355 	.word	0x388ab355
 800e968:	bb360b61 	.word	0xbb360b61
 800e96c:	3e2aaaab 	.word	0x3e2aaaab
 800e970:	43160000 	.word	0x43160000
 800e974:	00000000 	.word	0x00000000

0800e978 <__ieee754_sqrtf>:
 800e978:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e97c:	4770      	bx	lr

0800e97e <with_errnof>:
 800e97e:	b513      	push	{r0, r1, r4, lr}
 800e980:	4604      	mov	r4, r0
 800e982:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e986:	f7fc fe21 	bl	800b5cc <__errno>
 800e98a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e98e:	6004      	str	r4, [r0, #0]
 800e990:	b002      	add	sp, #8
 800e992:	bd10      	pop	{r4, pc}

0800e994 <xflowf>:
 800e994:	b130      	cbz	r0, 800e9a4 <xflowf+0x10>
 800e996:	eef1 7a40 	vneg.f32	s15, s0
 800e99a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e99e:	2022      	movs	r0, #34	; 0x22
 800e9a0:	f7ff bfed 	b.w	800e97e <with_errnof>
 800e9a4:	eef0 7a40 	vmov.f32	s15, s0
 800e9a8:	e7f7      	b.n	800e99a <xflowf+0x6>
	...

0800e9ac <__math_uflowf>:
 800e9ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e9b4 <__math_uflowf+0x8>
 800e9b0:	f7ff bff0 	b.w	800e994 <xflowf>
 800e9b4:	10000000 	.word	0x10000000

0800e9b8 <__math_oflowf>:
 800e9b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e9c0 <__math_oflowf+0x8>
 800e9bc:	f7ff bfea 	b.w	800e994 <xflowf>
 800e9c0:	70000000 	.word	0x70000000

0800e9c4 <finitef>:
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e9ca:	9801      	ldr	r0, [sp, #4]
 800e9cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e9d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e9d4:	bfac      	ite	ge
 800e9d6:	2000      	movge	r0, #0
 800e9d8:	2001      	movlt	r0, #1
 800e9da:	b002      	add	sp, #8
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <scalbnf>:
 800e9e0:	ee10 3a10 	vmov	r3, s0
 800e9e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e9e8:	d025      	beq.n	800ea36 <scalbnf+0x56>
 800e9ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e9ee:	d302      	bcc.n	800e9f6 <scalbnf+0x16>
 800e9f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9f4:	4770      	bx	lr
 800e9f6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e9fa:	d122      	bne.n	800ea42 <scalbnf+0x62>
 800e9fc:	4b2a      	ldr	r3, [pc, #168]	; (800eaa8 <scalbnf+0xc8>)
 800e9fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800eaac <scalbnf+0xcc>
 800ea02:	4298      	cmp	r0, r3
 800ea04:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea08:	db16      	blt.n	800ea38 <scalbnf+0x58>
 800ea0a:	ee10 3a10 	vmov	r3, s0
 800ea0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea12:	3a19      	subs	r2, #25
 800ea14:	4402      	add	r2, r0
 800ea16:	2afe      	cmp	r2, #254	; 0xfe
 800ea18:	dd15      	ble.n	800ea46 <scalbnf+0x66>
 800ea1a:	ee10 3a10 	vmov	r3, s0
 800ea1e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800eab0 <scalbnf+0xd0>
 800ea22:	eddf 6a24 	vldr	s13, [pc, #144]	; 800eab4 <scalbnf+0xd4>
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	eeb0 7a67 	vmov.f32	s14, s15
 800ea2c:	bfb8      	it	lt
 800ea2e:	eef0 7a66 	vmovlt.f32	s15, s13
 800ea32:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ea36:	4770      	bx	lr
 800ea38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800eab8 <scalbnf+0xd8>
 800ea3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea40:	4770      	bx	lr
 800ea42:	0dd2      	lsrs	r2, r2, #23
 800ea44:	e7e6      	b.n	800ea14 <scalbnf+0x34>
 800ea46:	2a00      	cmp	r2, #0
 800ea48:	dd06      	ble.n	800ea58 <scalbnf+0x78>
 800ea4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ea52:	ee00 3a10 	vmov	s0, r3
 800ea56:	4770      	bx	lr
 800ea58:	f112 0f16 	cmn.w	r2, #22
 800ea5c:	da1a      	bge.n	800ea94 <scalbnf+0xb4>
 800ea5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ea62:	4298      	cmp	r0, r3
 800ea64:	ee10 3a10 	vmov	r3, s0
 800ea68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea6c:	dd0a      	ble.n	800ea84 <scalbnf+0xa4>
 800ea6e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800eab0 <scalbnf+0xd0>
 800ea72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800eab4 <scalbnf+0xd4>
 800ea76:	eef0 7a40 	vmov.f32	s15, s0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	bf18      	it	ne
 800ea7e:	eeb0 0a47 	vmovne.f32	s0, s14
 800ea82:	e7db      	b.n	800ea3c <scalbnf+0x5c>
 800ea84:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800eab8 <scalbnf+0xd8>
 800ea88:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800eabc <scalbnf+0xdc>
 800ea8c:	eef0 7a40 	vmov.f32	s15, s0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	e7f3      	b.n	800ea7c <scalbnf+0x9c>
 800ea94:	3219      	adds	r2, #25
 800ea96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ea9e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800eac0 <scalbnf+0xe0>
 800eaa2:	ee07 3a10 	vmov	s14, r3
 800eaa6:	e7c4      	b.n	800ea32 <scalbnf+0x52>
 800eaa8:	ffff3cb0 	.word	0xffff3cb0
 800eaac:	4c000000 	.word	0x4c000000
 800eab0:	7149f2ca 	.word	0x7149f2ca
 800eab4:	f149f2ca 	.word	0xf149f2ca
 800eab8:	0da24260 	.word	0x0da24260
 800eabc:	8da24260 	.word	0x8da24260
 800eac0:	33000000 	.word	0x33000000

0800eac4 <_close>:
 800eac4:	4b02      	ldr	r3, [pc, #8]	; (800ead0 <_close+0xc>)
 800eac6:	2258      	movs	r2, #88	; 0x58
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	f04f 30ff 	mov.w	r0, #4294967295
 800eace:	4770      	bx	lr
 800ead0:	2000249c 	.word	0x2000249c

0800ead4 <_fstat>:
 800ead4:	4b02      	ldr	r3, [pc, #8]	; (800eae0 <_fstat+0xc>)
 800ead6:	2258      	movs	r2, #88	; 0x58
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	f04f 30ff 	mov.w	r0, #4294967295
 800eade:	4770      	bx	lr
 800eae0:	2000249c 	.word	0x2000249c

0800eae4 <_getpid>:
 800eae4:	4b02      	ldr	r3, [pc, #8]	; (800eaf0 <_getpid+0xc>)
 800eae6:	2258      	movs	r2, #88	; 0x58
 800eae8:	601a      	str	r2, [r3, #0]
 800eaea:	f04f 30ff 	mov.w	r0, #4294967295
 800eaee:	4770      	bx	lr
 800eaf0:	2000249c 	.word	0x2000249c

0800eaf4 <_isatty>:
 800eaf4:	4b02      	ldr	r3, [pc, #8]	; (800eb00 <_isatty+0xc>)
 800eaf6:	2258      	movs	r2, #88	; 0x58
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	2000      	movs	r0, #0
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	2000249c 	.word	0x2000249c

0800eb04 <_kill>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <_kill+0xc>)
 800eb06:	2258      	movs	r2, #88	; 0x58
 800eb08:	601a      	str	r2, [r3, #0]
 800eb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0e:	4770      	bx	lr
 800eb10:	2000249c 	.word	0x2000249c

0800eb14 <_lseek>:
 800eb14:	4b02      	ldr	r3, [pc, #8]	; (800eb20 <_lseek+0xc>)
 800eb16:	2258      	movs	r2, #88	; 0x58
 800eb18:	601a      	str	r2, [r3, #0]
 800eb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb1e:	4770      	bx	lr
 800eb20:	2000249c 	.word	0x2000249c

0800eb24 <_read>:
 800eb24:	4b02      	ldr	r3, [pc, #8]	; (800eb30 <_read+0xc>)
 800eb26:	2258      	movs	r2, #88	; 0x58
 800eb28:	601a      	str	r2, [r3, #0]
 800eb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2e:	4770      	bx	lr
 800eb30:	2000249c 	.word	0x2000249c

0800eb34 <_exit>:
 800eb34:	e7fe      	b.n	800eb34 <_exit>
	...

0800eb38 <_init>:
 800eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3a:	bf00      	nop
 800eb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb3e:	bc08      	pop	{r3}
 800eb40:	469e      	mov	lr, r3
 800eb42:	4770      	bx	lr

0800eb44 <_fini>:
 800eb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb46:	bf00      	nop
 800eb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb4a:	bc08      	pop	{r3}
 800eb4c:	469e      	mov	lr, r3
 800eb4e:	4770      	bx	lr
